<?xml version="1.0" ?>
<!DOCTYPE extension
  PUBLIC '-//QM/2.4.1/Extension//EN'
  'http://www.codesourcery.com/qm/dtds/2.4.1/-//qm/2.4.1/extension//en.dtd'>
<extension class="GaudiTest.GaudiExeTest" kind="test">
<argument name="program"><text>gaudirun.py</text></argument>
<argument name="target_group"><text>.*</text></argument>
<argument name="timeout"><integer>1800</integer></argument>
<argument name="reference">
	<text>$GAUSSROOT/tests/refs/testGauss-DEV.ref</text>
</argument>
<argument name="stdout"><text/></argument>
<argument name="prerequisites"><set/></argument>
<argument name="args"><set>
	<text>$GAUSSOPTS/Gauss-DEV.py</text>
	<text>$DECFILESROOT/options/30000000.py</text>
	<text>$LBPYTHIAROOT/options/Pythia.py</text>
	<text>$GAUSSOPTS/Gauss-Job.py</text>
        <text>$GAUSSROOT/tests/options/testGauss-QMTests.py</text>
</set>
</argument>
<argument name="exit_code"><integer>0</integer></argument>
<argument name="use_temp_dir"><enumeral>true</enumeral></argument>
<argument name="error_reference">
	<text>$GAUSSROOT/tests/refs/testGauss-err.ref</text>
</argument>
<argument name="environment">
	<set>
	  <text>GFORTRAN_UNBUFFERED_PRECONNECTED=y</text>
	</set>
</argument>
<argument name="unsupported_platforms"><set/></argument>
<argument name="workdir"><text/></argument>
<argument name="stderr"><text/></argument>
<argument name="options"><text/></argument>
<argument name="validator"><text>
def replacenumbers(m):
  res = m.groups()[0]
  for i in m.groups()[1].lstrip().split():
    res = res + " {0:f}".format( float( i ) )
  return res

preprocessor = (normalizeExamples + 
     RegexpReplacer(when = "Connected to database",
         orig = r"(\"sqlite_file:)(.*/)([\w.]+/[0-9A-Z_]{1,8}\")",
         repl = r"\1\3") + 
     RegexpReplacer(when = "RFileCnv                   INFO opening Root file",
         orig = r"(opening Root file \")(.*/)([\w]+/[a-z.]{1,14}\")",
         repl = r"\1\3") + 
     RegexpReplacer(when = "HistogramDataSvc           INFO Added stream file",
         orig = r"(Added stream file:)(.*/)([\w.]+/[a-z]{1,10})(.root)",
         repl = r"\1\3") + 
     RegexpReplacer(when = "MagneticFieldSvc           INFO Opened magnetic field file",
         orig = r"(Opened magnetic field file : )(.*/)([\w.]+/[0-9a-z_]{1,14})(.cdf)",
         repl = r"\1\3\4") + 
     RegexpReplacer(when = "  KORB:" ,
         orig = r"(  KORB: [a-zA-Z0-9*]+\s*=|  KORB: [A-Z0-9- ]+:)([0-9. \t-E]+)\n",
         repl = replacenumbers ) +
     RegexpReplacer(when = "RootHistSvc                INFO Writing ROOT histograms to",
         orig = r"(Writing ROOT histograms to: Gauss-30000000-5ev-)(\d{8})(-histos.root)",
         repl = r"\1\3") +
     RegexpReplacer(when = "GaussTape                  INFO Data source: EventDataSvc output",
         orig = r"(Data source: EventDataSvc output: DATAFILE=\'Gauss-30000000-5ev-)(\d{8})(.sim\')",
         repl = r"\1\3") +
     RegexpReplacer(when = "FSROutputStreamGaussTape   INFO Data source: FileRecordDataSvc output",
         orig = r"(Data source: FileRecordDataSvc output: DATAFILE='Gauss-30000000-5ev-)(\d{8})(.sim\')",
         repl = r"\1\3") +
     LineSkipper(["TimingAuditor.TIMER", "ToolSvc.SequencerTime..."]) + 
     LineSkipper(["INFO Disconnect from database after being idle"]) +
     LineSkipper(["G4Transportation constructor> set fShortStepOptimisation to false"]) +
     LineSkipper(["PDFset name"]) + 
     RegexpReplacer(when = "Loading simulation attributes",
         orig = r"(\")(.*/)([\w.]+\")",
         repl = r"\1.../\3"))

validateWithReference(preproc = preprocessor)
</text></argument>
<argument name="resources"><set/></argument>
<argument name="stdin"><text/></argument>
</extension>
