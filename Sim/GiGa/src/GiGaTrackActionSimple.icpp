#ifndef     GIGA_GIGATRACKACTIONSIMPLE_ICPP
#define     GIGA_GIGATRACKACTIONSIMPLE_ICPP 1 
/// 
#include "GiGaTrackActionSimple.h"
///

/// Should all tracks to be stored?
inline bool      GiGaTrackActionSimple::storeAll             () const 
{ return m_storeAll ; }  
/// Should primaries be stored ? 
inline bool      GiGaTrackActionSimple::storePrimaries       () const 
{ return m_storePrimaries ; }  
/// Should tracks with kinetic energy over some threshold be stored ?  
inline bool      GiGaTrackActionSimple::storeByOwnEnergy     () const  
{ return m_storeByOwnEnergy ; }  
/// should tracks of some predefined types be stored ?
inline bool      GiGaTrackActionSimple::storeByOwnType       () const  
{ return m_storeByOwnType ; }  
/// Should tracks which produce at least one child with kinetic energy over some threshold be stored ?  
inline bool      GiGaTrackActionSimple::storeByChildEnergy   () const  
{ return m_storeByChildEnergy ; }  
/// Should tracks which produce at least one child of some predefined types be stored ?
inline bool      GiGaTrackActionSimple::storeByChildType     () const  
/// Should track which marked explicitely be stored ? 
{ return m_storeByChildType ; }  
inline bool      GiGaTrackActionSimple::storeMarkedTracks    () const  
{ return m_storeMarkedTracks ; }  
/// Threshold for own   kinetic energy 
inline double    GiGaTrackActionSimple::ownEnergyThreshold   () const  
{ return m_ownEnergyThreshold; }  
/// Threshold for child kinetic energy 
inline double    GiGaTrackActionSimple::childEnergyThreshold () const  
{ return m_childEnergyThreshold; }  
/// Own   particle types to be stored 
inline const GiGaTrackActionSimple::PartDefs& GiGaTrackActionSimple::ownStoredTypes   () const  
{ return m_ownStoredTypes; }  
/// Child particle types to be stored 
inline const GiGaTrackActionSimple::PartDefs& GiGaTrackActionSimple::childStoredTypes () const  
{ return m_childStoredTypes; }  
///

#endif  //  GIGA_GIGATRACKACTIONSIMPLE_ICPP
