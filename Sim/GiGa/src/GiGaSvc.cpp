///////////////////////////////////////////////////////////////////////////////////
/// *************************************************************************** ///
/// *   base classes         (from STL )                                      * ///
/// *************************************************************************** /// 
///////////////////////////////////////////////////////////////////////////////////

#include <string>
#include <list>
#include <vector> 

///////////////////////////////////////////////////////////////////////////////////
/// *************************************************************************** ///
/// *   base classes         (from GiGa)                                      * ///
/// *************************************************************************** /// 
///////////////////////////////////////////////////////////////////////////////////

#include "GiGa/GiGaSvc.h"
#include "GiGa/GiGaException.h"
#include "GiGa/GiGaRunManager.h" 

///////////////////////////////////////////////////////////////////////////////////
/// *************************************************************************** ///
/// *   base classes         (from Gaudi framework)                           * ///
/// *************************************************************************** /// 
///////////////////////////////////////////////////////////////////////////////////

#include    "GaudiKernel/ISvcLocator.h"
#include    "GaudiKernel/IMessageSvc.h"
#include    "GaudiKernel/IChronoStatSvc.h"
#include    "GaudiKernel/ParticleProperty.h"
#include    "GaudiKernel/SvcFactory.h"
#include    "GaudiKernel/MsgStream.h"

///////////////////////////////////////////////////////////////////////////////////
/// *************************************************************************** ///
/// *   base classes         (from LHCbEvent package)                         * ///
/// *************************************************************************** /// 
///////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////
/// *************************************************************************** ///
/// *   base classes         (from Geant4 Tool Kit)                           * ///
/// *************************************************************************** /// 
///////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////
/// *************************************************************************** ///
/// *************************************************************************** ///
/// *************************************************************************** /// 
///////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////
/// *************************************************************************** ///
///////////////////////////////////////////////////////////////////////////////////
///                                                                             ///
/// *************************************************************************** ///
/// *                                                                         * ///
/// * * GiGa * GiGa * GiGa * GiGa * GiGa * GiGa * GiGa * GiGa * GiGa * GiGa * * ///
/// *                                                                         * ///
/// *            Geant4 Interface for Gaudi  Applications                     * ///
/// *                                                                         * ///
/// * * GiGa * GiGa * GiGa * GiGa * GiGa * GiGa * GiGa * GiGa * GiGa * GiGa * * ///
/// *                                                                         * ///
/// *            Gaudi  Interface for Geant4 Applications                     * ///
/// *                                                                         * ///
/// * * GiGa * GiGa * GiGa * GiGa * GiGa * GiGa * GiGa * GiGa * GiGa * GiGa * * ///
/// *                                                                         * ///
/// *************************************************************************** ///
///                                                                             ///
///////////////////////////////////////////////////////////////////////////////////
/// *************************************************************************** ///
///////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////
/// *************************************************************************** ///
/// *************************************************************************** ///
/// *************************************************************************** /// 
///////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///                                                                             ///
///    class GiGaSvc : implementation of abstract Interfaces IGiGaSvc           ///      
///                    (for event-by-event communications with Geant4)          ///
///                    and IGiGaSetUpSvc (for configuration of Geant4)          ///
///                                                                             ///
///    Author: Vanya Belyaev                                                    ///
///                                                                             ///
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////
/// *************************************************************************** ///
/// *                         Factory                                         * ///
/// *************************************************************************** /// 
///////////////////////////////////////////////////////////////////////////////////
///                                                                             ///
static const  SvcFactory<GiGaSvc>                   s_factory ;                 ///
extern const ISvcFactory&          GiGaSvcFactory = s_factory ;                 ///
///                                                                             ///
///////////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////////
/// *************************************************************************** ///
/// *************************************************************************** ///
/// *************************************************************************** /// 
///////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////
/// *************************************************************************** ///
/// *                         Constructor                                     * ///
/// *************************************************************************** /// 
///////////////////////////////////////////////////////////////////////////////////
GiGaSvc::GiGaSvc( const std::string& name, ISvcLocator* svcloc )                   
  : Service( name , svcloc )
  , m_GiGaRunManager       (   0   )
  , m_chronoSvc            (   0   ) 
{
  ///
  /// Geant4 commands to be executed by G4UImanager 
  /// 
  declareProperty( "StartUIcommands"        , m_startUIcommands      = Strings() ) ;
  declareProperty( "StartOfEventUIcommands" , m_startOfEvtUIcommands = Strings() ) ;
  declareProperty( "EndOfEventUIcommands"   , m_endOfEvtUIcommands   = Strings() ) ;
  declareProperty( "StartOfRunUIcommands"   , m_startOfRunUIcommands = Strings() ) ;
  declareProperty( "EndOfRunUIcommands"     , m_endOfRunUIcommands   = Strings() ) ;
  declareProperty( "EndUIcommands"          , m_endUIcommands        = Strings() ) ;
  ///
  declareProperty( "UIsessions"             , m_UIsessions           = Strings() ) ;             
  ///
};
///////////////////////////////////////////////////////////////////////////////////
/// *************************************************************************** ///
/// *************************************************************************** ///
/// *************************************************************************** /// 
///////////////////////////////////////////////////////////////////////////////////
 
///////////////////////////////////////////////////////////////////////////////////
/// *************************************************************************** ///
/// *                         (Virtual) Destructor                            * ///
/// *************************************************************************** /// 
///////////////////////////////////////////////////////////////////////////////////
GiGaSvc::~GiGaSvc() 
{
  ///
  if( 0 != m_GiGaRunManager  ) 
    { delete m_GiGaRunManager  ; m_GiGaRunManager  = 0 ; }    
  ///
};
///////////////////////////////////////////////////////////////////////////////////
/// *************************************************************************** ///
/// *************************************************************************** ///
/// *************************************************************************** /// 
///////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////
/// *************************************************************************** ///
/// *                         Query Interface                                 * ///
/// *************************************************************************** /// 
///////////////////////////////////////////////////////////////////////////////////
StatusCode GiGaSvc::queryInterface( const IID& id , void** ppI  ) 
{
  ///
  if       ( 0 == ppI  )               { return StatusCode::FAILURE             ; }       ///  RETURN !!!  
  ///
  if       ( IID_IGiGaSvc      == id ) {  *ppI = (IGiGaSvc*)       this         ; } 
  else if  ( IID_IGiGaSetUpSvc == id ) {  *ppI = (IGiGaSetUpSvc*)  this         ; } 
  else                                 { return Service::queryInterface(id,ppI) ; }    
  ///
  addRef(); 
  ///
  return StatusCode::SUCCESS;
};

///////////////////////////////////////////////////////////////////////////////////
/// *************************************************************************** ///
/// *************************************************************************** ///
/// *************************************************************************** /// 
///////////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////////
/// *************************************************************************** ///
/// *                         Initialize                                      * ///
/// *************************************************************************** /// 
///////////////////////////////////////////////////////////////////////////////////
StatusCode GiGaSvc::initialize()
{
  
  MsgStream log( msgSvc() , name()+"initialize()" ) ; 
  
  ///
  /// initialize the base class 
  ///
  
  StatusCode sc = Service::initialize(); 
  if( sc.isFailure() ) 
    { log << MSG::ERROR << "Unable to initialize the base class Service " <<  endreq ; return sc ; } 
  
  ///
  ///
  ///
  
  setProperties(); 
  
  ///
  /// locate  services, 
  ///
  
  sc = serviceLocator()->
    getService( "ChronoStatSvc", IID_IChronoStatSvc, (IInterface*&) m_chronoSvc ); 
  
  if( sc.isFailure() || 0 == m_chronoSvc ) 
    { log << MSG::ERROR << "Unable to create locate Chrono & Stat Service  " << endreq; return sc ;} 
  
  ///
  ///
  /// 
  
  sc = createGiGaRunManager(); 
  
  if( sc.isFailure() ) 
    { log << MSG::ERROR << "Unable to create GiGaRunManager " << endreq; return sc ;} 

  ///
  ///
  ///
  
  return StatusCode::SUCCESS ; 
};
///////////////////////////////////////////////////////////////////////////////////
/// *************************************************************************** ///
/// *************************************************************************** ///
/// *************************************************************************** /// 
///////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////
/// *************************************************************************** ///
/// *                         Finalize                                        * ///
/// *************************************************************************** /// 
///////////////////////////////////////////////////////////////////////////////////
StatusCode GiGaSvc::finalize()
{  
  
  const std::string Tag( name() + ".finalize()" ) ; 
  
  MsgStream log( msgSvc(), name() ); 
  
  ///
  /// finalize Run Manager 
  ///
  
  StatusCode sc ( StatusCode::SUCCESS ); 
  if( 0 != m_GiGaRunManager ) { sc = m_GiGaRunManager->finalizeRunManager() ;} 
  if( sc.isFailure() ) 
    { log << MSG::ERROR << " Error in ->finalizeRunManager() method!" << endreq ; } 
  
  ///
  /// release all used services 
  ///
  
  if( 0 != chronoSvc() ) { chronoSvc()->release() ; m_chronoSvc = 0 ; } 
  
  {  
    ///
    StatusCode sc(StatusCode::FAILURE); 
    const std::string m1("::delete RunManager  "); 
    ///
    ___GIGA_TRY___                         
      {
	///
	if( 0 != m_GiGaRunManager  ) 
	  { delete m_GiGaRunManager ; m_GiGaRunManager = 0 ; } 
	///
      }
    ___GIGA_CATCH_PRINT_AND_RETURN___(Tag,m1,msgSvc(),chronoSvc(),sc);
    ///
  }
  
  return Service::finalize();
};
///////////////////////////////////////////////////////////////////////////////////
/// *************************************************************************** ///
/// *************************************************************************** ///
/// *************************************************************************** /// 
///////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////
/// *************************************************************************** ///
/// * internal features                                                       * ///
/// *************************************************************************** /// 
///////////////////////////////////////////////////////////////////////////////////
StatusCode GiGaSvc::createGiGaRunManager() 
{
  ///
  if( 0 != m_GiGaRunManager ) { return StatusCode::SUCCESS; }     /// RETURN !!!
  ///
  Assert( 0 == G4RunManager::GetRunManager() , 
	  "There exist another instance of G4RunManager!" ) ; 
  ///
  m_GiGaRunManager = 
    new  GiGaRunManager( name()+".Manager" , serviceLocator() ); 
  ///
  Assert( 0 != m_GiGaRunManager              , " Unable to create GiGaRunManager" ) ; 
  Assert( 0 != G4RunManager::GetRunManager() , " Unable to create G4RunManager"   ) ; 
  ///
  m_GiGaRunManager->set_startUIcommands      ( m_startUIcommands      ) ; 
  m_GiGaRunManager->set_startOfEvtUIcommands ( m_startOfEvtUIcommands ) ; 
  m_GiGaRunManager->set_endOfEvtUIcommands   ( m_endOfEvtUIcommands   ) ; 
  m_GiGaRunManager->set_startOfRunUIcommands ( m_startOfRunUIcommands ) ; 
  m_GiGaRunManager->set_endOfRunUIcommands   ( m_endOfRunUIcommands   ) ; 
  m_GiGaRunManager->set_endUIcommands        ( m_endUIcommands        ) ; 
  ///
  m_GiGaRunManager->set_UIsessions           ( m_UIsessions           ) ; 
  ///
  
  return StatusCode::SUCCESS;                                     /// RETURN !!!
  ///
};
///////////////////////////////////////////////////////////////////////////////////
/// *************************************************************************** ///
/// *************************************************************************** ///
/// *************************************************************************** /// 
///////////////////////////////////////////////////////////////////////////////////
StatusCode GiGaSvc::prepareTheEvent( G4PrimaryVertex * vertex ) 
{
  const std::string Tag     ( name() + ".prepareTheEvent(G4PrimaryVertex*)" );
  const std::string method1 ( " createGiGaRunManager() " ) ; 
  const std::string method2 ( " GiGaRunManager::prepareTheEvent() " ) ; 
  
  MsgStream  log( msgSvc() , name() + "prepareTheEvent" ) ; 
  
  StatusCode sc( StatusCode::SUCCESS ) ; 
  
  ///
  ___GIGA_TRY___ 
    {
      ///
      if( 0 == m_GiGaRunManager )
	{ 
	  sc = createGiGaRunManager() ;   
	  Assert( sc.isSuccess()        , " prepareTheEvent(): failure from createGiGaRunManager " , sc     ) ; 
	  Assert( 0 != m_GiGaRunManager , " prepareTheEvent(): unable to create GiGaRunManager   "          ) ; 
	  ///
	}
      ///
    }
  ___GIGA_CATCH_AND_THROW___(Tag,method1) ; 
  ///
  
  ///
  ___GIGA_TRY___ 
    {
      ///
      sc = m_GiGaRunManager->prepareTheEvent( vertex ) ; 
      ///
      Assert( sc.isSuccess() , "preparetheEvent() failure from GiGaRunManager::prepareTheEvent() ", sc ) ; 
      ///
    }
  ___GIGA_CATCH_AND_THROW___(Tag,method2) ; 
  ///
  ///
  return StatusCode::SUCCESS; 
  ///
};
///////////////////////////////////////////////////////////////////////////////////
/// *************************************************************************** ///
/// *************************************************************************** ///
/// *************************************************************************** /// 
///////////////////////////////////////////////////////////////////////////////////
StatusCode GiGaSvc::retrieveTheEvent( const G4Event*& event) 
{
  const std::string Tag     ( name() + ".retrieveTheEvent(const G4Event*&)" );
  const std::string method1 ( " createGiGaRunManager() " ) ; 
  const std::string method2 ( " GiGaRunManager::retrieveTheEvent() " ) ; 
  
  StatusCode sc( StatusCode::SUCCESS ) ; 

  MsgStream  log( msgSvc() , name() + ".retrieveTheEvent" ) ; 
  
  ///
  ___GIGA_TRY___ 
    { 
      ///
      if( 0 == m_GiGaRunManager )
	{ 
	  ///
	  sc = createGiGaRunManager() ;   
	  ///
	  Assert( sc.isSuccess()        , " retrieveTheEvent: failure from createGiGaRunManager " , sc     ) ; 
	  ///
	  Assert( 0 != m_GiGaRunManager , " retrieveTheEvent: unable to create GiGaRunManager   "          ) ; 
	  ///
	}
      ///
    }
  ___GIGA_CATCH_AND_THROW___(Tag,method1) ; 
  ///
  ///
  ___GIGA_TRY___ 
    { 
      ///
      sc = m_GiGaRunManager->retrieveTheEvent( event ) ; 
      ///
      Assert( sc.isSuccess() , " retrieveTheEvent: failure from GiGaRunManager::retrieveTheEvent" , sc ) ; 
      ///
    }
  ___GIGA_CATCH_AND_THROW___(Tag,method2) ; 
  ///
  ///
  return StatusCode::SUCCESS; 
  ///
};
///////////////////////////////////////////////////////////////////////////////////
/// *************************************************************************** ///
/// *************************************************************************** ///
/// *************************************************************************** /// 
///////////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////////
/// *************************************************************************** ///
/// *************************************************************************** ///
/// *************************************************************************** /// 
///////////////////////////////////////////////////////////////////////////////////
IGiGaSvc&   GiGaSvc::operator <<         ( G4PrimaryVertex * vertex   )
{
  ///
  StatusCode sc = prepareTheEvent( vertex ) ; 
  ///
  Assert( sc.isSuccess(), " operator<<(G4PrimaryVertex*) " , sc );   
  ///
  return *this; 
  ///
}; 
///////////////////////////////////////////////////////////////////////////////////
/// *************************************************************************** ///
/// *************************************************************************** ///
/// *************************************************************************** /// 
///////////////////////////////////////////////////////////////////////////////////
StatusCode  GiGaSvc::addPrimaryKinematics( G4PrimaryVertex  * vertex   ) 
{
  ///
  StatusCode sc(StatusCode::FAILURE);
  ///
  ___GIGA_TRY___
    { *this << vertex           ; } 
  ___GIGA_CATCH_PRINT_AND_RETURN___(name(),"addPrimaryKinematics",msgSvc(),chronoSvc(),sc ) ; 
  ///
  return StatusCode::SUCCESS;  
};

///////////////////////////////////////////////////////////////////////////////////
/// *************************************************************************** ///
/// *************************************************************************** ///
/// *************************************************************************** /// 
///////////////////////////////////////////////////////////////////////////////////
IGiGaSvc& GiGaSvc::operator >> ( const G4Event*         & event        )    
{
  ///
  StatusCode sc = retrieveTheEvent( event ) ; 
  Assert( sc.isSuccess(), "operator>>(G4Event*)" , sc );   
  return *this;
}; 
///////////////////////////////////////////////////////////////////////////////////
/// *************************************************************************** ///
/// *************************************************************************** ///
/// *************************************************************************** /// 
///////////////////////////////////////////////////////////////////////////////////
IGiGaSvc& GiGaSvc::operator >> ( G4HCofThisEvent*       & collections  )
{
  ///
  const G4Event* event = 0 ; 
  *this >> event           ; 
  collections = 
    ( 0 != event )  ? event->GetHCofThisEvent() : 0 ; 
  ///
  return *this;   
};
///////////////////////////////////////////////////////////////////////////////////
/// *************************************************************************** ///
/// *************************************************************************** ///
/// *************************************************************************** /// 
///////////////////////////////////////////////////////////////////////////////////
IGiGaSvc& GiGaSvc::operator >> ( CollectionPair         & collection   )
{
  G4HCofThisEvent* collections = 0 ; 
  *this >> collections             ; 
  collection.second = 
    ( 0 != collections)  ? collections->GetHC( collection.first ) : 0 ; 
  ///
  return *this ;  
}; 
///////////////////////////////////////////////////////////////////////////////////
/// *************************************************************************** ///
/// *************************************************************************** ///
/// *************************************************************************** /// 
///////////////////////////////////////////////////////////////////////////////////
IGiGaSvc& GiGaSvc::operator >> ( G4TrajectoryContainer* & trajectories )
{
  ///
  const G4Event* event = 0 ; 
  *this >> event ;
  trajectories = 
    ( 0 != event ) ? event->GetTrajectoryContainer() : 0 ; 
  /// 
  return *this ; 
};
///////////////////////////////////////////////////////////////////////////////////
/// *************************************************************************** ///
/// *************************************************************************** ///
/// *************************************************************************** /// 
///////////////////////////////////////////////////////////////////////////////////
StatusCode GiGaSvc::retrieveEvent  ( const G4Event*          & event )
{ 
  ///
  StatusCode sc( StatusCode::FAILURE ); 
  ///
  ___GIGA_TRY___
    { *this >> event            ; } 
  ___GIGA_CATCH_PRINT_AND_RETURN___(name(),"retrieveEvent",msgSvc(),chronoSvc(),sc ) ; 
  ///
  return StatusCode::SUCCESS ;  
};
///////////////////////////////////////////////////////////////////////////////////
/// *************************************************************************** ///
/// *************************************************************************** ///
/// *************************************************************************** /// 
///////////////////////////////////////////////////////////////////////////////////
StatusCode GiGaSvc::retrieveHitCollections  ( G4HCofThisEvent*        & collections  )
{
  ///
  StatusCode sc( StatusCode::FAILURE ); 
  ///
  ___GIGA_TRY___
    { *this >> collections      ; } 
  ___GIGA_CATCH_PRINT_AND_RETURN___(name(),"retrieveHitCollections",msgSvc(),chronoSvc(),sc ) ; 
  ///
  return StatusCode::SUCCESS; 
};
///////////////////////////////////////////////////////////////////////////////////
/// *************************************************************************** ///
/// *************************************************************************** ///
/// *************************************************************************** /// 
///////////////////////////////////////////////////////////////////////////////////
StatusCode GiGaSvc::retrieveHitCollection  ( CollectionPair          & collection   )
{
  ///
  StatusCode sc( StatusCode::FAILURE ); 
  ///
  ___GIGA_TRY___
    { *this >> collection       ; } 
  ___GIGA_CATCH_PRINT_AND_RETURN___(name(),"retrieveHitCollection",msgSvc(),chronoSvc(),sc ) ; 
  ///
  return StatusCode::SUCCESS; 
};
///////////////////////////////////////////////////////////////////////////////////
/// *************************************************************************** ///
/// *************************************************************************** ///
/// *************************************************************************** /// 
///////////////////////////////////////////////////////////////////////////////////
StatusCode GiGaSvc::retrieveTrajectories  ( G4TrajectoryContainer*  & trajectories )
{
  ///
  StatusCode sc( StatusCode::FAILURE ); 
  ///
  ___GIGA_TRY___
    { *this >> trajectories     ; } 
  ___GIGA_CATCH_PRINT_AND_RETURN___(name(),"retrieveTrajectories",msgSvc(),chronoSvc(),sc ) ; 
  ///
  return StatusCode::SUCCESS; 
};
///////////////////////////////////////////////////////////////////////////////////
/// *************************************************************************** ///
/// *************************************************************************** ///
/// *************************************************************************** /// 
///////////////////////////////////////////////////////////////////////////////////























