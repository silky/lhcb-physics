#ifndef     GIGA_GIGATRACKINFORMATION_ICPP
#define     GIGA_GIGATRACKINFORMATION_ICPP 1 

/// Geant4 
#include "globals.hh"
#include "G4Allocator.hh"
/// GiGa 
#include "GiGa/GiGaTrackInformation.h"

/////////////////////////////////////////////////////////////////////////////////////
extern G4Allocator<GiGaTrackInformation> s_GiGaTrackInformationAllocator;
/////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
inline void*      GiGaTrackInformation::operator new    ( size_t    )
{ return (void*) s_GiGaTrackInformationAllocator.MallocSingle(); };
//////////////////////////////////////////////////////////////////////////////////////////
inline void       GiGaTrackInformation::operator delete ( void*  trackInfo  )
{ s_GiGaTrackInformationAllocator.FreeSingle((GiGaTrackInformation*) trackInfo ); };
//////////////////////////////////////////////////////////////////////////////////////////
inline void       GiGaTrackInformation::Print() const {};
//////////////////////////////////////////////////////////////////////////////////////////
inline const bool GiGaTrackInformation::toBeStored   () const { return m_toBeStored; };  
//////////////////////////////////////////////////////////////////////////////////////////
inline GiGaTrackInformation&  GiGaTrackInformation::setToBeStored ( const bool Flag )       
{ m_toBeStored = Flag ; return *this; }; 
//////////////////////////////////////////////////////////////////////////////////////////

#endif  //  GIGA_GIGATRACKINFORMATION_ICPP



