// ============================================================================
/// CVS tag $Name: not supported by cvs2svn $ 
// ============================================================================
/// $Log: not supported by cvs2svn $
/// Revision 1.8  2001/07/23 13:11:44  ibelyaev
/// the package restructurisation(II)
/// 
// ============================================================================
#ifndef     GIGA_GIGATRACKINFORMATION_ICPP
#define     GIGA_GIGATRACKINFORMATION_ICPP 1 
// ============================================================================

/// Geant4 
#include "globals.hh"
#include "G4Allocator.hh"
/// GiGa 
#include "GiGa/GiGaTrackInformation.h"

/** implementation of inline methods from class GiGaTrackInformation 
 *  
 *  @author Vanya Belyaev 
 */

// ============================================================================
/// allocator 
// ============================================================================
extern G4Allocator<GiGaTrackInformation> s_GiGaTrackInformationAllocator;

// ============================================================================
/// constructor 
// ============================================================================
inline GiGaTrackInformation::GiGaTrackInformation()
  : m_toBeStored( false )
{}; 

// ============================================================================
/// destructor 
// ============================================================================
inline GiGaTrackInformation::~GiGaTrackInformation() {}; 

// ============================================================================
/// operator new 
// ============================================================================
inline void*      GiGaTrackInformation::operator new    ( size_t    )
{ return (void*) s_GiGaTrackInformationAllocator.MallocSingle(); };

// ============================================================================
/// operator delete 
// ============================================================================
inline void       GiGaTrackInformation::operator delete ( void*  trackInfo  )
{ 
  s_GiGaTrackInformationAllocator.FreeSingle( (GiGaTrackInformation*) 
                                              trackInfo ); 
};

// ============================================================================
/// print
// ============================================================================
inline void       GiGaTrackInformation::Print() const {};

// ============================================================================
/// 
// ============================================================================
inline const bool GiGaTrackInformation::toBeStored   () const 
{ return m_toBeStored; };  

// ============================================================================
/// 
// ============================================================================
inline GiGaTrackInformation&  
GiGaTrackInformation::setToBeStored ( const bool Flag )       
{ m_toBeStored = Flag ; return *this; }; 

// ============================================================================
#endif  //  GIGA_GIGATRACKINFORMATION_ICPP
// ============================================================================



