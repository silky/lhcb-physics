#ifndef     __GIGA_GIGARUNMANAGER_GIGARUNMANAGER_H__
#define     __GIGA_GIGARUNMANAGER_GIGARUNMANAGER_H__  1

///////////////////////////////////////////////////////////////////////////////////
/// *************************************************************************** ///
/// *   base classes         (from STL )                                      * ///
/// *************************************************************************** /// 
///////////////////////////////////////////////////////////////////////////////////

#include <string>
#include <list>
#include <vector> 

///////////////////////////////////////////////////////////////////////////////////
/// *************************************************************************** ///
/// *   base classes         (from Gaudi framework)                           * ///
/// *************************************************************************** /// 
///////////////////////////////////////////////////////////////////////////////////

#include   "GaudiKernel/Kernel.h"
#include   "GaudiKernel/StatusCode.h"
#include   "GaudiKernel/IMessageSvc.h"
#include   "GaudiKernel/IChronoStatSvc.h"

///////////////////////////////////////////////////////////////////////////////////
/// *************************************************************************** ///
/// *   base classes         (from GiGa)                                      * ///
/// *************************************************************************** /// 
///////////////////////////////////////////////////////////////////////////////////

#include "GiGa/GiGaException.h"

///////////////////////////////////////////////////////////////////////////////////
/// *************************************************************************** ///
/// *   base classes         (from Geant4)                                    * ///
/// *************************************************************************** /// 
///////////////////////////////////////////////////////////////////////////////////

#include "G4RunManager.hh" 

///////////////////////////////////////////////////////////////////////////////////
/// *************************************************************************** ///
/// *   forward declarations (from Gaudi framework)                           * ///
/// *************************************************************************** /// 
///////////////////////////////////////////////////////////////////////////////////

class  IParticlePropertySvc            ;
class  IChronoStatSvc                  ;
class  ISvcLocator                     ;
template <class TYPE> class SvcFactory ; 

///////////////////////////////////////////////////////////////////////////////////
/// *************************************************************************** ///
/// *   forward declarations (from GiGa)                                      * ///
/// *************************************************************************** /// 
///////////////////////////////////////////////////////////////////////////////////

class GiGaKineManager ; 

///////////////////////////////////////////////////////////////////////////////////
/// *************************************************************************** ///
/// *   forward declarations (from Geant4 ToolKit)                            * ///
/// *************************************************************************** /// 
///////////////////////////////////////////////////////////////////////////////////

   
class     G4VUserPrimaryGeneratorAction ;
class     G4VUserDetectorConstruction   ;
class     G4VUserPhysicsList            ;
class     G4UserRunAction               ;
class     G4UserEventAction             ;
class     G4UserStackingAction          ;
class     G4UserSteppingAction          ;
class     G4UserTrackingAction          ;
class     G4VisManager                  ; 
class     G4UIsession                   ;
class     G4UImanager                   ; 
 
///////////////////////////////////////////////////////////////////////////////////
/// *************************************************************************** ///
/// *************************************************************************** ///
/// *************************************************************************** /// 
///////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////
/// *************************************************************************** ///
///////////////////////////////////////////////////////////////////////////////////
///                                                                             ///
/// *************************************************************************** ///
/// *                                                                         * ///
/// * * GiGa * GiGa * GiGa * GiGa * GiGa * GiGa * GiGa * GiGa * GiGa * GiGa * * ///
/// *                                                                         * ///
/// *            Geant4 Interface for Gaudi  Applications                     * ///
/// *                                                                         * ///
/// * * GiGa * GiGa * GiGa * GiGa * GiGa * GiGa * GiGa * GiGa * GiGa * GiGa * * ///
/// *                                                                         * ///
/// *            Gaudi  Interface for Geant4 Applications                     * ///
/// *                                                                         * ///
/// * * GiGa * GiGa * GiGa * GiGa * GiGa * GiGa * GiGa * GiGa * GiGa * GiGa * * ///
/// *                                                                         * ///
/// *************************************************************************** ///
///                                                                             ///
///////////////////////////////////////////////////////////////////////////////////
/// *************************************************************************** ///
///////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////
/// *************************************************************************** ///
/// *************************************************************************** ///
/// *************************************************************************** /// 
///////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///                                                                             ///
///    class GiGaRunManager : an adaptation of generic G4RunManager to Gaudi    ///      
///                                                                             ///
///    Author: Vanya Belyaev                                                    ///
///                                                                             ///
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////


class GiGaRunManager: private G4RunManager
{
  
  /////////////////////////////////////////////////////////////////////////////////
  /// ************************************************************************* ///
  /// *      Friend class                                                     * /// 
  /// ************************************************************************* ///
  /////////////////////////////////////////////////////////////////////////////////
  
  friend class GiGaSvc;
  
  /////////////////////////////////////////////////////////////////////////////////
  /// ************************************************************************* ///
  /// *      GiGaRunManager has only a limited number of public methods       * /// 
  /// ************************************************************************* ///
  /////////////////////////////////////////////////////////////////////////////////

 public: 

  /////////////////////////////////////////////////////////////////////////////////
  /// ************************************************************************* ///
  /// *      useful typedef                                                   * /// 
  /// ************************************************************************* ///
  /////////////////////////////////////////////////////////////////////////////////
  typedef std::vector<std::string>        Strings;                              ///
  /////////////////////////////////////////////////////////////////////////////////

 protected:


  /////////////////////////////////////////////////////////////////////////////////
  /// ************************************************************************* ///
  /// *      Constructor                                                      * /// 
  /// ************************************************************************* ///
  /////////////////////////////////////////////////////////////////////////////////
  GiGaRunManager( const std::string& Name         ,                             ///
		  ISvcLocator      * svcLocator   );                            ///
  /////////////////////////////////////////////////////////////////////////////////
  
  /////////////////////////////////////////////////////////////////////////////////
  /// ************************************************************************* ///
  /// *      (Virtual) Destructor                                             * /// 
  /// ************************************************************************* ///
  /////////////////////////////////////////////////////////////////////////////////
  virtual ~GiGaRunManager();                                                    ///
  /////////////////////////////////////////////////////////////////////////////////

 public:
  
  /////////////////////////////////////////////////////////////////////////////////
  /// ************************************************************************* ///
  /// *      configuration of Geant4                                          * /// 
  /// ************************************************************************* ///
  /////////////////////////////////////////////////////////////////////////////////
  virtual StatusCode declare( G4VUserPrimaryGeneratorAction  * ) ;              /// 
  virtual StatusCode declare( G4VPhysicalVolume              * ) ;              /// 
  virtual StatusCode declare( G4VUserDetectorConstruction    * ) ;              ///
  virtual StatusCode declare( G4VUserPhysicsList             * ) ;              /// 
  virtual StatusCode declare( G4UserRunAction                * ) ;              /// 
  virtual StatusCode declare( G4UserEventAction              * ) ;              ///
  virtual StatusCode declare( G4UserStackingAction           * ) ;              /// 
  virtual StatusCode declare( G4UserSteppingAction           * ) ;              ///
  virtual StatusCode declare( G4UserTrackingAction           * ) ;              ///
  virtual StatusCode declare( G4VisManager                   * ) ;              ///
  /////////////////////////////////////////////////////////////////////////////////
  
  /////////////////////////////////////////////////////////////////////////////////
  /// ************************************************************************* ///
  /// *      event management block                                           * /// 
  /// ************************************************************************* ///
  /////////////////////////////////////////////////////////////////////////////////
  virtual StatusCode  prepareTheEvent ( G4PrimaryVertex    * vertex = 0 ) ;     ///
  virtual StatusCode  processTheEvent (                                 ) ;     /// 
  virtual StatusCode  retrieveTheEvent( const G4Event      *& event     ) ;     /// 
  /////////////////////////////////////////////////////////////////////////////////

  /////////////////////////////////////////////////////////////////////////////////
  /// ************************************************************************* ///
  /// *      UImanager                                                        * /// 
  /// ************************************************************************* ///
  /////////////////////////////////////////////////////////////////////////////////
  void       set_UIsessions  ( const Strings& st ) { m_UIsessions = st; }       ///
  StatusCode createUIsession () ;                                               /// 
  ///                                                                           ///
  /////////////////////////////////////////////////////////////////////////////////
  /// ************************************************************************* ///
  /// *      GiGaRunManager states                                            * /// 
  /// ************************************************************************* ///
  /////////////////////////////////////////////////////////////////////////////////
  inline bool krn_Is_Initialized () const { return m_krn_st ; }                 ///
  inline bool run_Is_Initialized () const { return m_run_st ; }                 ///
  inline bool evt_Is_Prepared    () const { return m_pre_st ; }                 ///
  inline bool evt_Is_Processed   () const { return m_pro_st ; }                 ///
  inline bool vis_Is_Initialized () const { return m_vis_st ; }                 ///
  inline bool uis_Is_Started     () const { return m_uis_st ; }                 ///
  /////////////////////////////////////////////////////////////////////////////////

  /////////////////////////////////////////////////////////////////////////////////
  inline const std::string& name      () const { return m_name      ; } ;       ///
  inline IMessageSvc*       msgSvc    () const { return m_msgSvc    ; } ;       ///
  inline IChronoStatSvc*    chronoSvc () const { return m_chronoSvc ; } ;       ///
  inline ISvcLocator*       svcLoc    () const { return m_svcLoc    ; } ;       ///
  /////////////////////////////////////////////////////////////////////////////////

  /////////////////////////////////////////////////////////////////////////////////
  /// ************************************************************************* ///
  /// *    Internal public    functions   (UI commands)                       * ///
  /// ************************************************************************* /// 
  /////////////////////////////////////////////////////////////////////////////////
  ///                                                                           ///
  /// UI commands to be executed at start                                       ///
  inline const Strings&  startUIcommands      () const { return m_s  ; } ;      ///
  /// UI commands to be executed at start of each Event                         ///
  inline const Strings&  startOfEvtUIcommands () const { return m_sE ; } ;      ///
  /// UI commands to be executed at end   of each Event                         ///
  inline const Strings&  endOfEvtUIcommands   () const { return m_eE ; } ;      ///
  /// UI commands to be executed at start of each Run                           ///
  inline const Strings&  startOfRunUIcommands () const { return m_sR ; } ;      ///
  /// UI commands to be executed at end   of each Run                           ///
  inline const Strings&  endOfRunUIcommands   () const { return m_eR ; } ;      ///
  /// UI commands to be executed at end                                         ///
  inline const Strings&  endUIcommands        () const { return m_e  ; } ;      ///
  /// defined UI sessions:                                                      ///
  inline const Strings&  UIsessions           () const { return m_UIsessions ;} ///
  ///                                                                           ///
  /////////////////////////////////////////////////////////////////////////////////

 protected:

  /////////////////////////////////////////////////////////////////////////////////
  /// ************************************************************************* ///
  /// *  Redefinition of some virtual methods from G4RunManager               * ///
  /// ************************************************************************* /// 
  /////////////////////////////////////////////////////////////////////////////////
  ///                                                                           ///
  virtual  void BeamOn( int         n_event        ,                            ///
			const char* macroFile =  0 ,                            /// 
			int         n_select  = -1 );                           ///
  ///                                                                           ///
  void       InitializeGeometry() ;                                             /// 
  void       Initialize()         ;                                             /// 
  /////////////////////////////////////////////////////////////////////////////////
  
 protected:

  /////////////////////////////////////////////////////////////////////////////////
  /// ************************************************************************* ///
  /// *      GiGaRunManager management                                        * /// 
  /// ************************************************************************* ///
  /////////////////////////////////////////////////////////////////////////////////
  StatusCode initializeKernel   () ;                                            ///
  StatusCode initializeRun      () ;                                            ///
  StatusCode finalizeRunManager () ;                                            ///
  /////////////////////////////////////////////////////////////////////////////////
  
  /////////////////////////////////////////////////////////////////////////////////
  /// ************************************************************************* ///
  /// *    Internal protected functions   (UI commands)                       * ///
  /// ************************************************************************* /// 
  /////////////////////////////////////////////////////////////////////////////////
  /// UI commands to be executed at start                                       ///
  inline void set_startUIcommands     ( const Strings& c ) { m_s   = c ; } ;    /// 
  /// UI commands to be executed at start of each Event                         ///
  inline void set_startOfEvtUIcommands( const Strings& c ) { m_sE  = c ; } ;    ///
  /// UI commands to be executed at end   of each Event                         ///
  inline void set_endOfEvtUIcommands  ( const Strings& c ) { m_eE  = c ; } ;    ///
  /// UI commands to be executed at start of each Run                           ///
  inline void set_startOfRunUIcommands( const Strings& c ) { m_sR  = c ; } ;    ///
  /// UI commands to be executed at end   of each Run                           ///
  inline void set_endOfRunUIcommands  ( const Strings& c ) { m_eR  = c ; } ;    ///
  /// UI commands to be executed at end                                         ///
  inline void set_endUIcommands       ( const Strings& c ) { m_e   = c ; } ;    ///
  /////////////////////////////////////////////////////////////////////////////////

 private: 

  /////////////////////////////////////////////////////////////////////////////////
  /// ************************************************************************* ///
  /// *      GiGaRunManager states                                            * /// 
  /// ************************************************************************* ///
  /////////////////////////////////////////////////////////////////////////////////
  inline void set_krn_Is_Initialized ( bool st ) { m_krn_st = st ; }            ///
  inline void set_run_Is_Initialized ( bool st ) { m_run_st = st ; }            ///
  inline void set_evt_Is_Prepared    ( bool st ) { m_pre_st = st ; }            ///
  inline void set_evt_Is_Processed   ( bool st ) { m_pro_st = st ; }            ///
  inline void set_vis_Is_Initialized ( bool st ) { m_vis_st = st ; }            ///
  inline void set_uis_Is_Started     ( bool st ) { m_uis_st = st ; }            ///
  /////////////////////////////////////////////////////////////////////////////////
  
  /////////////////////////////////////////////////////////////////////////////////
  /// ************************************************************************* ///
  /// *    Internal private functions                                         * ///
  /// ************************************************************************* /// 
  /////////////////////////////////////////////////////////////////////////////////
  inline void Assert( bool  assertion                              ,            ///
		      const std::string& msg = "GiGaSvc::unknown"  ,            ///                  
		      const StatusCode&  sc = StatusCode::FAILURE  ) ;          ///
  /////////////////////////////////////////////////////////////////////////////////
  
 private: 

  /////////////////////////////////////////////////////////////////////////////////
  /// ************************************************************************* ///
  /// *    Service Locator  used to locate the needed services                * ///
  /// ************************************************************************* /// 
  /////////////////////////////////////////////////////////////////////////////////
  mutable  ISvcLocator   *   m_svcLoc       ;                                   ///
  /////////////////////////////////////////////////////////////////////////////////
  /// ************************************************************************* ///
  /// *    Root of Genat4 Geoemtry tree                                       * ///
  /// *    (if it is not created by G4VUserDetectorConstruction::Construct()  * ///
  /// ************************************************************************* /// 
  /////////////////////////////////////////////////////////////////////////////////
  G4VPhysicalVolume      *   m_rootGeo      ;                                   ///
  /////////////////////////////////////////////////////////////////////////////////
  /// ************************************************************************* ///
  /// *    Geant4 User Interface inetractive session                          * ///
  /// ************************************************************************* /// 
  /////////////////////////////////////////////////////////////////////////////////
  mutable  G4UIsession   *   m_g4UIsession  ;                                   ///
  /////////////////////////////////////////////////////////////////////////////////
  /// ************************************************************************* ///
  /// *    Geant4 visual manager used for visualisation                       * ///
  /// ************************************************************************* /// 
  /////////////////////////////////////////////////////////////////////////////////
  mutable  G4VisManager  *   m_g4VisManager ;                                   ///
  /////////////////////////////////////////////////////////////////////////////////

  /////////////////////////////////////////////////////////////////////////////////
  /// ************************************************************************* ///
  /// *    status variables                                                   * ///
  /// ************************************************************************* /// 
  /////////////////////////////////////////////////////////////////////////////////
  bool                       m_krn_st ;                                         ///  
  bool                       m_run_st ;                                         /// 
  bool                       m_pre_st ;                                         ///
  bool                       m_pro_st ;                                         /// 
  bool                       m_vis_st ;                                         ///
  bool                       m_uis_st ;                                         /// 
  /////////////////////////////////////////////////////////////////////////////////


  /////////////////////////////////////////////////////////////////////////////////
  /// ************************************************************************* ///
  /// *   Name of the Run Manager and "standard" services                    * ///
  /// ************************************************************************* /// 
  /////////////////////////////////////////////////////////////////////////////////
  std::string                m_name       ; 
  mutable   IMessageSvc*     m_msgSvc     ; 
  mutable   IChronoStatSvc*  m_chronoSvc  ;
  /////////////////////////////////////////////////////////////////////////////////

  /////////////////////////////////////////////////////////////////////////////////
  /// ************************************************************************* ///
  /// *    UI commands to be executed                                         * ///
  /// ************************************************************************* /// 
  /////////////////////////////////////////////////////////////////////////////////
  Strings                    m_s          ;                                     ///
  Strings                    m_sE         ;                                     ///
  Strings                    m_eE         ;                                     ///
  Strings                    m_sR         ;                                     ///
  Strings                    m_eR         ;                                     ///
  Strings                    m_e          ;                                     ///
  /////////////////////////////////////////////////////////////////////////////////

  /////////////////////////////////////////////////////////////////////////////////
  /// ************************************************************************* ///
  /// *    List of user interfaces                                            * ///
  /// ************************************************************************* /// 
  /////////////////////////////////////////////////////////////////////////////////
  Strings                    m_UIsessions ;                                     ///
  /////////////////////////////////////////////////////////////////////////////////

}; 
///////////////////////////////////////////////////////////////////////////////////
/// *************************************************************************** ///
/// *************************************************************************** ///
/// *************************************************************************** /// 
///////////////////////////////////////////////////////////////////////////////////
inline void GiGaRunManager::Assert( bool  assertion        , 
				    const std::string& msg , 
				    const StatusCode &  sc ) 
{ if( !assertion ) { throw GiGaException("GiGaRunManager::"+msg , sc ) ; } };
///////////////////////////////////////////////////////////////////////////////////
/// *************************************************************************** ///
/// *************************************************************************** ///
/// *************************************************************************** /// 
///////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////
/// *************************************************************************** ///
///////////////////////////////////////////////////////////////////////////////////
///                                                                             ///
/// *************************************************************************** ///
/// *                                                                         * ///
/// * * GiGa * GiGa * GiGa * GiGa * GiGa * GiGa * GiGa * GiGa * GiGa * GiGa * * ///
/// *                                                                         * ///
/// *            Geant4 Interface for Gaudi  Applications                     * ///
/// *                                                                         * ///
/// * * GiGa * GiGa * GiGa * GiGa * GiGa * GiGa * GiGa * GiGa * GiGa * GiGa * * ///
/// *                                                                         * ///
/// *            Gaudi  Interface for Geant4 Applications                     * ///
/// *                                                                         * ///
/// * * GiGa * GiGa * GiGa * GiGa * GiGa * GiGa * GiGa * GiGa * GiGa * GiGa * * ///
/// *                                                                         * ///
/// *************************************************************************** ///
///                                                                             ///
///////////////////////////////////////////////////////////////////////////////////
/// *************************************************************************** ///
///////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////
/// *************************************************************************** ///
/// *************************************************************************** ///
/// *************************************************************************** /// 
///////////////////////////////////////////////////////////////////////////////////


#endif  //  __GIGA_GIGARUNMANAGER_GIGARUNMANAGER_H__






