#ifndef    GIGA_GIGATRAJECTORY_ICPP
#define    GIGA_GIGATRAJECTORY_ICPP 1 
/// STL 
#include <vector>
#include <algorithm>
#include <functional>
/// Geant4 
#include "G4Step.hh"
#include "G4Track.hh"
/// GiGa 
#include "GiGa/GiGaTrajectoryPoint.h"
#include "GiGa/GiGaTrajectory.h"
///

////////////////////////////////////////////////////////////////////////////////////
extern G4Allocator<GiGaTrajectory> s_GiGaTrajectoryAllocator;
////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////
inline int GiGaTrajectory::GetPointEntries() const 
{ return size(); } 
////////////////////////////////////////////////////////////////////////////////////
inline G4VTrajectoryPoint* GiGaTrajectory::GetPoint       ( int indx ) const  
{ return ( unsigned int ) indx < size() ? *(begin()+indx) : 0 ; }
////////////////////////////////////////////////////////////////////////////////////
inline void* GiGaTrajectory::operator new(size_t)
{ return (void*) s_GiGaTrajectoryAllocator.MallocSingle(); };
////////////////////////////////////////////////////////////////////////////////////
inline void  GiGaTrajectory::operator delete(void* aTrajectory)
{ s_GiGaTrajectoryAllocator.FreeSingle( (GiGaTrajectory*) aTrajectory ); };
////////////////////////////////////////////////////////////////////////////////////
inline void GiGaTrajectory::setStepMgr( const G4SteppingManager* mgr ) 
{ m_stepMgr = mgr ; } 
/////////////////////////////////////////////////////////////////////////////////// 
inline const G4SteppingManager* GiGaTrajectory::stepMgr() const  
{ return m_stepMgr; } 
/////////////////////////////////////////////////////////////////////////////////// 


#endif  // GIGA_GIGATRAJECTORY_ICPP








