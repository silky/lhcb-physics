/// ===========================================================================
/// CVS tag $Name: not supported by cvs2svn $ 
/// ===========================================================================
/// $Log: not supported by cvs2svn $
/// ===========================================================================
#ifndef     GIGA_GIGATRAJECTORYPOINT_ICPP
#define     GIGA_GIGATRAJECTORYPOINT_ICPP 1 
/// ===========================================================================


/// GiGa
#include "GiGa/GiGaTrajectoryPoint.h" 

/** implementation of inline methods for class GiGaTrajectoryPoint
 *
 *  @author Vanya Belyaev 
 */

/// ===========================================================================
/// allocator 
/// ===========================================================================
extern G4Allocator<GiGaTrajectoryPoint> s_GiGaTrajectoryPointAllocator;

/// ===========================================================================
/// constructor 
/// ===========================================================================
inline GiGaTrajectoryPoint::GiGaTrajectoryPoint()
  : G4TrajectoryPoint (   )
  , m_time            ( 0 )
{};

/// ===========================================================================
/// constructor 
/// ===========================================================================
inline GiGaTrajectoryPoint::GiGaTrajectoryPoint ( const Hep3Vector&  Pos  , 
                                                  const double& Time )
  : G4TrajectoryPoint ( Pos  )
  , m_time            ( Time )
{};

/// ===========================================================================
/// constructor 
/// ===========================================================================
inline GiGaTrajectoryPoint::GiGaTrajectoryPoint   
( const HepLorentzVector&     right )
  : G4TrajectoryPoint ( right     )  
  , m_time            ( right.t() ) 
{};

/// ===========================================================================
/// constructor 
/// ===========================================================================
inline GiGaTrajectoryPoint::GiGaTrajectoryPoint   
( const GiGaTrajectoryPoint& right ) 
  : G4TrajectoryPoint ( right        )  
  , m_time            ( right.time() ) 
{};

/// ===========================================================================
/// destructor 
/// ===========================================================================
inline GiGaTrajectoryPoint::~GiGaTrajectoryPoint(){};

/// ===========================================================================
/// clone 
/// ===========================================================================
inline GiGaTrajectoryPoint* GiGaTrajectoryPoint::clone () const 
{ return new GiGaTrajectoryPoint( *this ); }

/// ===========================================================================
/// new 
/// ===========================================================================
inline void* GiGaTrajectoryPoint::operator new(size_t)
{ return (void *) s_GiGaTrajectoryPointAllocator.MallocSingle(); };

/// ===========================================================================
/// delete 
/// ===========================================================================
inline void GiGaTrajectoryPoint::operator delete(void *aTrajectoryPoint)
{ 
  s_GiGaTrajectoryPointAllocator.FreeSingle((GiGaTrajectoryPoint *) 
                                            aTrajectoryPoint); 
};

/// ===========================================================================
#endif  ///<  GIGA_GIGATRAJECTORYPOINT_ICPP
/// ===========================================================================












