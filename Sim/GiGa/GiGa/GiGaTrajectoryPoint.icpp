#ifndef     GIGA_GIGATRAJECTORYPOINT_ICPP
#define     GIGA_GIGATRAJECTORYPOINT_ICPP 1 


/// GiGa
#include "GiGa/GiGaTrajectoryPoint.h" 


/////////////////////////////////////////////////////////////////////////////////////////////////////////
extern G4Allocator<GiGaTrajectoryPoint> s_GiGaTrajectoryPointAllocator;
/////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////
inline GiGaTrajectoryPoint::GiGaTrajectoryPoint()
  : G4TrajectoryPoint (   )
  , m_time            ( 0 )
{};
/////////////////////////////////////////////////////////////////////////////////////////////////////////
inline GiGaTrajectoryPoint::GiGaTrajectoryPoint ( const Hep3Vector&  Pos  , const double& Time )
  : G4TrajectoryPoint ( Pos  )
  , m_time            ( Time )
{};
/////////////////////////////////////////////////////////////////////////////////////////////////////////
inline GiGaTrajectoryPoint::GiGaTrajectoryPoint   ( const HepLorentzVector&     right )
  : G4TrajectoryPoint ( right     )  
  , m_time            ( right.t() ) 
{};
/////////////////////////////////////////////////////////////////////////////////////////////////////////
inline GiGaTrajectoryPoint::GiGaTrajectoryPoint   ( const GiGaTrajectoryPoint& right ) 
  : G4TrajectoryPoint ( right        )  
  , m_time            ( right.time() ) 
{};
/////////////////////////////////////////////////////////////////////////////////////////////////////////
inline GiGaTrajectoryPoint* GiGaTrajectoryPoint::clone () const 
{ return new GiGaTrajectoryPoint( *this ); }
/////////////////////////////////////////////////////////////////////////////////////////////////////////
inline void* GiGaTrajectoryPoint::operator new(size_t)
{ return (void *) s_GiGaTrajectoryPointAllocator.MallocSingle(); };
/////////////////////////////////////////////////////////////////////////////////////////////////////////
inline void GiGaTrajectoryPoint::operator delete(void *aTrajectoryPoint)
{ s_GiGaTrajectoryPointAllocator.FreeSingle((GiGaTrajectoryPoint *) aTrajectoryPoint); }
/////////////////////////////////////////////////////////////////////////////////////////////////////////


#endif  //  GIGA_GIGATRAJECTORYPOINT_ICPP












