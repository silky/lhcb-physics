<?xml version="1.0" ?><!DOCTYPE extension  PUBLIC '-//QM/2.3/Extension//EN'  'http://www.codesourcery.com/qm/dtds/2.3/-//qm/2.3/extension//en.dtd'>
<extension class="GaudiTest.GaudiExeTest" kind="test">
  <argument name="program"><text>gaudirun.py</text></argument>
  <argument name="args"><set>
    <!-- <text>$GAUSSROOT/tests/options/testGauss-defaults.py</text> -->
    <text>$GAUSSOPTS/Gauss-2008.py</text>
    <text>$DECFILESROOT/options/30000000.opts</text>
    <text>$GAUSSOPTS/Gauss-Job.py</text>
  </set></argument>
  <argument name="options"><text>
from Gaudi.Configuration import *
from Gauss.Configuration import *
from Configurables import EvtGenDecay
EvtGenDecay = EvtGenDecay()
ToolSvc = ToolSvc()
ToolSvc.addTool(EvtGenDecay, name='EvtGenDecay')
ToolSvc.EvtGenDecay.DecayFile="/afs/cern.ch/lhcb/software/DEV/GAUSS/Gen/DecFiles/v17r0/dkfiles/DECAY.DEC"
ToolSvc.EvtGenDecay.OutputLevel = 2
  </text></argument>
  <argument name="timeout"><integer>1800</integer></argument>
  <argument name="reference"><text>$GAUSSROOT/tests/refs/testGauss-2008.ref</text></argument>
  <argument name="error_reference"><text>$GAUSSROOT/tests/refs/testGauss-2008-err.ref</text></argument>
  <argument name="validator"><text>
preprocessor = normalizeExamples + \
    RegexpReplacer(when = "Connected to database",
        orig = r"(\"sqlite_file:)(.*/)([\w.]+/[0-9A-Z_]{1,8}\")",
        repl = r"\1\3") + \
    LineSkipper(["INFO Using TAG", "TimingAuditor.T", "ToolSvc.SequencerTime", "Gauss-"]) + \
    LineSkipper(["SUCCESS  Add/Modify the particle", "WARNING Setting DECFILESROOT"]) + \
    LineSkipper(["Properties have beed redefined"]) + \
    LineSkipper(["Total CPU time elapsed for geometry optimisation"]) + \
    LineSkipper(["INFO Connected to database"]) + \
    LineSkipper(["INFO Disconnect from database after being idle"]) + \
    LineSkipper(["INFO Loading simulation attributes file", "UserDecayFile"]) + \
    LineSkipper(["ChronoStatSvc.f...   INFO  Service finalized succes"]) 
strippedOutput = []
skipping = False
firstLineToSkip = "Voxelisation: top CPU users:"
lastLineToSkip = "Start Run processing"
for l in stdout.splitlines():
    if skipping:
        print "skipped line", l
        preprocessor = preprocessor + LineSkipper([l])
        if lastLineToSkip in l:
            skipping = False
    else:
        if firstLineToSkip in l:
            skipping = True
validateWithReference(preproc = preprocessor)
</text></argument> 
</extension>
