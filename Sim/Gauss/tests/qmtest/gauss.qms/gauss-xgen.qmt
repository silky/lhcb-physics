<?xml version="1.0" ?>
<!DOCTYPE extension
  PUBLIC '-//QM/2.4.1/Extension//EN'
  'http://www.codesourcery.com/qm/dtds/2.4.1/-//qm/2.4.1/extension//en.dtd'>
<extension class="GaudiTest.GaudiExeTest" kind="test"><argument name="program"><text>gaudirun.py</text></argument><argument name="target_group"><text>.*</text></argument><argument name="timeout"><integer>1800</integer></argument><argument name="reference"><text>$GAUSSROOT/tests/refs/testGauss-XGEN.ref</text></argument><argument name="stdout"><text/></argument><argument name="prerequisites"><set/></argument><argument name="args"><set><text>$GAUSSOPTS/Gauss-DEV.py</text><text>$DECFILESROOT/options/11144103.py</text><text>$LBPYTHIAROOT/options/Pythia.py</text><text>$GAUSSROOT/tests/options/testGauss-XGen.py</text><text>$GAUSSROOT/tests/options/testGauss-gen-100evts-defaults.py</text></set></argument><argument name="exit_code"><integer>0</integer></argument><argument name="use_temp_dir"><enumeral>true</enumeral></argument><argument name="error_reference"><text>$GAUSSROOT/tests/refs/testGauss-XGEN-err.ref</text></argument><argument name="environment"><set/></argument><argument name="unsupported_platforms"><set/></argument><argument name="workdir"><text/></argument><argument name="stderr"><text/></argument><argument name="options"><text/></argument><argument name="validator"><text>preprocessor = normalizeExamples + \
    RegexpReplacer(when = &quot;Connected to database&quot;,
        orig = r&quot;(\&quot;sqlite_file:)(.*/)([\w.]+/[0-9A-Z_]{1,8}\&quot;)&quot;,
        repl = r&quot;\1\3&quot;) + \
    LineSkipper([&quot;INFO Using TAG&quot;, &quot;TimingAuditor.T&quot;, &quot;ToolSvc.SequencerTime&quot;, &quot;Gauss-&quot;]) + \
    LineSkipper([&quot;SUCCESS  Add/Modify the particle&quot;, &quot;WARNING Setting DECFILESROOT&quot;]) + \
    LineSkipper([&quot;Properties have beed redefined&quot;]) + \
    LineSkipper([&quot;Total CPU time elapsed for geometry optimisation&quot;]) + \
    LineSkipper([&quot;INFO Connected to database&quot;]) + \
    LineSkipper([&quot;INFO Disconnect from database after being idle&quot;]) + \
    LineSkipper([&quot;INFO Loading simulation attributes file&quot;, &quot;UserDecayFile&quot;]) + \
    LineSkipper([&quot;INFO Opened magnetic field file&quot;,&quot;EvtGen:In readDecayFile&quot;]) + \
    LineSkipper([&quot;ChronoStatSvc.f...   INFO  Service finalized succes&quot;]) 
strippedOutput = []
skipping = False
firstLineToSkip = &quot;Voxelisation: top CPU users:&quot;
lastLineToSkip = &quot;Start Run processing&quot;
for l in stdout.splitlines():
    if skipping:
        print &quot;skipped line&quot;, l
        preprocessor = preprocessor + LineSkipper([l])
        if lastLineToSkip in l:
            skipping = False
    else:
        if firstLineToSkip in l:
            skipping = True
validateWithReference(preproc = preprocessor)
</text></argument><argument name="resources"><set/></argument><argument name="stdin"><text/></argument></extension>