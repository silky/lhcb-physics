// jobOptions to run Pythia and then feed the output into G4

#include "$STDOPTIONS"

// remove SicbCnv 
ApplicationMgr.ExtSvc            = 
{ "ParticlePropertySvc" ,
  "EventSelector"       };
EventPersistencySvc.CnvServices  = {};  

#include "$STDOPTS/DetDesc.opts"

EventDataSvc.ForceLeaves = true ;

ApplicationMgr.DLLs       += { "GeneratorModules" };
ApplicationMgr.DLLs       += { "GaudiDb" };
ApplicationMgr.DLLs   += { "GiGa" , "GiGaCnv" } ;
ApplicationMgr.DLLs       += {"GaudiRootDb"};

ApplicationMgr.ExtSvc += 
{ "ParticlePropertySvc" , 
  "MagneticFieldSvc"    ,   
  "GiGaSvc"             ,          
  "GiGaKineCnvSvc"      ,  
  "GiGaGeomCnvSvc"      ,   
  "GiGaHitsCnvSvc"      } ;

// Set output level threshold (2=DEBUG, 3=INFO, 4=WARNING, 5=ERROR, 6=FATAL )

MessageSvc.OutputLevel     = 3 ;
XmlPartserSvc.OutputLevel  = 5 ;
GiGaSvc.EmptyStack.OutputLevel =3 ;
GiGaSvc.DrawStep.OutputLevel =6 ;
GiGaSvc.EventCommand.OutputLevel = 1 ;
GiGaSvc.RunCommand.OutputLevel    = 2 ;

// Set number of events

ApplicationMgr.EvtMax    = 1      ;
ApplicationMgr.EvtSel    = "NONE" ;

// Algorithms Private Options

ParticlePropertySvc.ParticlePropertiesFile = "particle.cdf";
PythiaModule.PythiaCommand = {"pysubs msel 5", "pyinit dumpr 1 15", "pyinit pylistf 1"};

// Use GiGa Conversion services as event persistency conversion services 

EventPersistencySvc.CnvServices = { "GiGaKineCnvSvc" ,  "GiGaHitsCnvSvc" } ;

//ApplicationMgr.ExtSvc     += {"DbEventCnvSvc/RootEvtCnvSvc"};
//ApplicationMgr.OutStream   = {"GenDst"};
//EventPersistencySvc.CnvServices += { "RootEvtCnvSvc" };
//RootEvtCnvSvc.DbType = "ROOT";
//GenDst.ItemList      = {"/Event#999"};
//GenDst.Output        = "DATAFILE='G4Dst.root' TYP='ROOT'";

ApplicationMgr.TopAlg          =  
{ "PythiaModule","DumpMC",	
  "GiGaDataStoreAlgorithm/GiGaStore" , 
  "GiGaInputStream/Geo"              ,
  "GiGaInputStream/Kine" ,	 
  "GiGaMiscGetEventAlg/GetEvent"     } ;

// configuration of GiGa Data Store 

GiGaStore.ConversionServices   = { "GiGaKineCnvSvc" , "GiGaHitsCnvSvc" };

// configuration of kinematics event data stream 

Kine.ConversionSvcName         = "GiGaKineCnvSvc"                 ; 
Kine.DataProviderSvcName       = "EventDataSvc"                   ; 
Kine.StreamItems               = { "/Event/Gen/HepMCEvents" } ;

// configuration of geometry data stream 

Geo.ExecuteOnce                = true                           ;  
Geo.ConversionSvcName          = "GiGaGeomCnvSvc"               ; 
Geo.DataProviderSvcName        = "DetectorDataSvc"              ; 
//Geo.StreamItems                =  { "/dd/Structure/LHCb/Velo" } ; 
Geo.StreamItems               +=  { "/dd/Structure/LHCb/Pipe" } ; 
// Geo.StreamItems               +=  { "/dd/Structure/LHCb/Rich1" } ; 
//Geo.StreamItems               +=  { "/dd/Structure/LHCb/Ecal" } ; 
//Geo.StreamItems               +=  { "/dd/Structure/LHCb/Hcal" } ; 
//Geo.StreamItems               +=  { "/dd/Structure/LHCb/Spd"  } ; 
//Geo.StreamItems               +=  { "/dd/Structure/LHCb/Prs"  } ; 

// GiGa configuration 
//      Physics List  to be used and its configuration  

GiGaSvc.PhysicsList            = "GiGaPhysListEm/EmPhysList" ; 
GiGaSvc.EmPhysList.Cut         = 5.0                         ;

//      Stacking action to be used and its configuration  

GiGaSvc.StackingAction         = "GiGaStackActionEmpty/EmptyStack" ;

//      Tracking action to be used and its configuration  

GiGaSvc.TrackingAction         =   "GiGaTrackActionSequence/TrackSeq"    ;
GiGaSvc.TrackSeq.Members       = { "GiGaTrackActionSimple/SimpleTrack" } ;
SimpleTrack.StoreAll           = true                                    ; 
SimpleTrack.StoreByOwnEnergy   = true                                    ; 
SimpleTrack.OwnEnergyThreshold = 1000.0                                  ; 
// SimpleTrack.StoreByChildEnergy   = true ; 
// SimpleTrack.ChildEnergyThreshold = 50.0 ; 
// SimpleTrack.StoreByOwnType       = true; 
// SimpleTrack.StoredOwnTypes       = { "e+" , "e-" };
// SimpleTrack.StoreByChildType     = true; 
// SimpleTrack.StoredChildTypes     = { "e+"};

//      Stepping action to be used and its configuration  

GiGaSvc.SteppingAction            =   "GiGaStepActionSequence/StepSeq"  ;
GiGaSvc.StepSeq.Members           = { "GiGaStepActionDraw/DrawStep"   } ;

//      Event action to be used and its configuration  

GiGaSvc.EventAction               =   "GiGaEventActionSequence/EventSeq"      ;
GiGaSvc.EventSeq.Members          = { "GiGaEventActionCommand/EventCommand" } ;
//EventSeq.Members                 += { "GiGaEventActionDraw/EventDraw" } ;
GiGaSvc.EventCommand.EndOfEventCommands   = 
{ "/vis/scene/add/volume"               , 
  "/vis/scene/add/trajectories"         ,
  "/vis/viewer/update"                  } ;
#ifdef WIN32
GiGaSvc.EventCommand.BeginOfEventCommands = 
{ "/vis/scene/create"                   , 
  "/vis/sceneHandler/create OIWIN32"    ,
  "/vis/viewer/create"                  ,
  "/vis/scene/add/volume"               , 
  "/vis/scene/add/trajectories"         ,
  "/vis/scene/notifyHandlers   "        ,
  "/vis/viewer/set/culling off"         } ;
#else 
EventCommand.BeginOfEventCommands = 
{ 
  "/vis/scene/create"                   , 
  "/vis/sceneHandler/create VRML1FILE"  ,
  // "/vis/sceneHandler/create Xo"  ,
  // "/vis/sceneHandler/create OGLIXm"      ,
  "/vis/sceneHandler/create DAWNFILE"  ,
  "/vis/viewer/create"                  ,
  "/vis/scene/add/volume"               , 
  "/vis/scene/add/trajectories"         ,
  "/vis/scene/notifyHandlers   "        ,
  "/vis/viewer/set/culling off"         ,
  // "/vis/drawTree ! ATree" 
} ;
#endif 

//      Run Action to be used and its consficgurations  

GiGaSvc.RunAction                 =   "GiGaRunActionSequence/RunSeq"      ;
GiGaSvc.RunSeq.Members            = { "GiGaRunActionCommand/RunCommand" } ;

GiGaSvc.RunCommand.BeginOfRunCommands     = 
{ "/control/saveHistory "           ,
  "/run/verbose 0 "                 ,
  "/tracking/storeTrajectory  1"    } ;

//      List of user interface sessions 

GiGaSvc.UIsessions           =  { "tcsh" };
// , "Xm" , "Wo" , "GAG", "Xaw"  , "terminal" } ;

//      Global(world) magnetic field 

//GiGaGeomCnvSvc.WorldMagneticField = "GiGaMagFieldGlobal/GlobalField";

//      flag for instantiation and usage of visual manager 

GiGaSvc.UseVisManager          = true;











