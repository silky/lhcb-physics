// $Id: sing.opts,v 1.5 2002-05-10 10:29:10 ranjard Exp $ 

//  jobOptions to run SingleParticleGun and then feed the output into G4

#include "$STDOPTIONS"

// remove SicbCnv 
ApplicationMgr.ExtSvc            = 
{ "ParticlePropertySvc" ,
  "EventSelector"       };

EventPersistencySvc.CnvServices  = {};  

#include "$STDOPTS/DetDesc.opts"

EventDataSvc.ForceLeaves = true ;

ApplicationMgr.DLLs += { "GeneratorModules" } ;
ApplicationMgr.DLLs += { "GaudiDb"          } ;
ApplicationMgr.DLLs += { "GaudiAlg"         } ;
ApplicationMgr.DLLs += { "GiGa" , "GiGaCnv" } ;
ApplicationMgr.DLLs += {"GaudiRootDb"};


ApplicationMgr.ExtSvc += 
{ "ParticlePropertySvc" , 
  "MagneticFieldSvc"    ,   
  "GiGaSvc"             ,          
  "GiGaKineCnvSvc"      ,  
  "GiGaGeomCnvSvc"      ,   
  "GiGaHitsCnvSvc"      } ;

// Set output level threshold (2=DEBUG, 3=INFO, 4=WARNING, 5=ERROR, 6=FATAL )

MessageSvc.OutputLevel     = 3 ;
XmlPartserSvc.OutputLevel  = 5 ;
//GiGaGeomCnvSvc.UniformField.OutputLevel = 1 ;
//GiGaCnvSvc.RunCommand.OutputLevel = 2 ;

// Number of events to be processed (default is 10)
ApplicationMgr.EvtMax = 3;
ParticlePropertySvc.ParticlePropertiesFile = "particle.cdf";

// Algorithms Private Options

SingleParticleGun.Pt = 50.0;
SingleParticleGun.Phi = 1.;
SingleParticleGun.Eta =3.;

SingleParticleGun.ModePt = 1;
SingleParticleGun.ModeEta =1; 
SingleParticleGun.ModePhi =1;
SingleParticleGun.PdgCode=211;

// Use GiGa Conversion services as event persistency conversion services 

EventPersistencySvc.CnvServices += { "GiGaKineCnvSvc" ,  "GiGaHitsCnvSvc" } ;
ApplicationMgr.ExtSvc     += {"DbEventCnvSvc/RootEvtCnvSvc"};
ApplicationMgr.OutStream   = {"GenDst"};
EventPersistencySvc.CnvServices += { "RootEvtCnvSvc" };
RootEvtCnvSvc.DbType = "ROOT";
GenDst.ItemList      = {"/Event#999"};
GenDst.Output        = "DATAFILE='G4Dst.root' TYP='ROOT'";


ApplicationMgr.EvtSel    = "NONE" ;

// List of top algorithms : 3 separated phases:

ApplicationMgr.TopAlg          =  
{ "Sequencer/Generator"    , 
  "Sequencer/Simulation"   
  //, 
  // "Sequencer/Digitisation" 
} ;

Generator.Members += 
{ "SingleParticleGun" , 
  "DumpMC"            };

Simulation.Members += 
{	"GiGaDataStoreAlgorithm/GiGaStore" ,   // data store configuration
  "GiGaInputStream/Geo"              ,   // load the geometry 
  "GiGaInputStream/Kine"             ,   // load the kinematics 
  "GiGaFlushAlgorithm/GiGaFlush"     };   // flush the event 
//  "GiGaMiscGetEventAlg/GetEvent"     } ; // convert MCPartcile/MCVertices

// configuration of GiGa Data Store 

GiGaStore.ConversionServices   = { "GiGaKineCnvSvc" , "GiGaHitsCnvSvc" };

// configuration of kinematics event data stream 

Kine.ConversionSvcName         = "GiGaKineCnvSvc"                 ; 
Kine.DataProviderSvcName       = "EventDataSvc"                   ; 
Kine.StreamItems               = { "/Event/Gen/HepMCEvents" } ;

// configuration of geometry data stream 

Geo.ExecuteOnce                = true                           ;  
Geo.ConversionSvcName          = "GiGaGeomCnvSvc"               ; 
Geo.DataProviderSvcName        = "DetectorDataSvc"              ; 
Geo.StreamItems               +=  { "/dd/Structure/LHCb/Pipe" } ; 
//Geo.StreamItems               +=  { "/dd/Structure/LHCb/Rich1" } ;
//Geo.StreamItems               +=  { "/dd/Structure/LHCb/Hcal" } ;

// Physics List  to be used and its configuration  

GiGaSvc.PhysicsList            = "GiGaPhysListEm/EmPhysList" ; 
GiGaSvc.EmPhysList.Cut         = 5.0                         ;

// Stacking action to be used and its configuration  

GiGaSvc.StackingAction         = "GiGaStackActionEmpty/EmptyStack" ;

// Tracking action to be used and its configuration  

GiGaSvc.TrackingAction         =   "GiGaTrackActionSequence/TrackSeq"    ;
GiGaSvc.TrackSeq.Members       = { "GiGaTrackActionSimple/SimpleTrack" } ;
GiGaSvc.SimpleTrack.StoreAll   = true ; 
GiGaSvc.SimpleTrack.StoreByOwnEnergy   = true ; 
// GiGaSvc.SimpleTrack.OwnEnergyThreshold = 1000.0 ; 
// GiGaSvc.SimpleTrack.StoreByChildEnergy   = true ; 
// GiGaSvc.SimpleTrack.ChildEnergyThreshold = 50.0 ; 
// GiGaSvc.SimpleTrack.StoreByOwnType       = true; 
// GiGaSvc.SimpleTrack.StoredOwnTypes       = { "e+" , "e-" };
// GiGaSvc.SimpleTrack.StoreByChildType     = true; 
// GiGaSvc.SimpleTrack.StoredChildTypes     = { "e+"};

// Stepping action to be used and its configuration  

GiGaSvc.SteppingAction            =   "GiGaStepActionSequence/StepSeq"  ;
GiGaSvc.StepSeq.Members           = { "GiGaStepActionDraw/DrawStep"   } ;

// Event action to be used and its configuration  

GiGaSvc.EventAction               =   "GiGaEventActionSequence/EventSeq"      ;
GiGaSvc.EventSeq.Members          = { "GiGaEventActionCommand/EventCommand" ,
                                      "GiGaEventActionDraw/EventDraw" } ;     
GiGaSvc.EventCommand.EndOfEventCommands   = 
{ "/vis/scene/add/volume"               , 
  "/vis/scene/add/trajectories"         ,
  "/vis/viewer/update"                  } ;
#ifdef WIN32
GiGaSvc.EventCommand.BeginOfEventCommands = 
{ "/vis/scene/create"                   , 
  "/vis/sceneHandler/create OIWIN32"    ,
  "/vis/viewer/create"                  ,
  "/vis/scene/add/volume"               , 
  "/vis/scene/add/trajectories"         ,
  "/vis/scene/notifyHandlers   "        ,
  "/vis/viewer/set/culling off"         } ;
#else 
GiGaSvc.EventCommand.BeginOfEventCommands = 
{ 
  "/vis/scene/create"                   , 
  "/vis/sceneHandler/create VRML1FILE"  ,
  "/vis/sceneHandler/create DAWNFILE"   ,
  "/vis/viewer/create"                  ,
  "/vis/scene/add/volume"               , 
  "/vis/scene/add/trajectories"         ,
  "/vis/scene/notifyHandlers   "        ,
  "/vis/viewer/set/culling off"         
} ;
#endif 

// Run Action to be used and its consficgurations  

GiGaSvc.RunAction                 =   "GiGaRunActionSequence/RunSeq"      ;
GiGaSvc.RunSeq.Members            = { "GiGaRunActionCommand/RunCommand" } ;
GiGaSvc.RunCommand.BeginOfRunCommands     = 
{ "/control/saveHistory "           ,
  "/run/verbose 0 "                 ,
  "/tracking/storeTrajectory  1"    ,
  "/tracking/verbose 0" } ;

// List of user interface sessions 

GiGaSvc.UIsessions           =  { "tcsh" };
// , "Xm" , "Wo" , "GAG", "Xaw"  , "terminal" } ;

// Global(world) magnetic field 

//GiGaGeomCnvSvc.WorldMagneticField = "GiGaMagFieldGlobal/GlobalField";
//GlobalField.MagneticFieldService = "MagneticFieldSvc" ;
GiGaGeomCnvSvc.WorldMagneticField = "GiGaMagFieldUniform/UniformField";
GiGaGeomCnvSvc.UniformField.Bx =   0.01 ; 
GiGaGeomCnvSvc.UniformField.By =   0.0  ; 
GiGaGeomCnvSvc.UniformField.Bz =   0.     ; 

// flag for instantiation and usage of visual manager 

GiGaSvc.UseVisManager          = true;




