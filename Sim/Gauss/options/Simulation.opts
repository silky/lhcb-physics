// $Id: Simulation.opts,v 1.6 2002-05-02 11:57:24 ibelyaev Exp $ 
// ============================================================================
// CVS tag $Name: not supported by cvs2svn $ 
// ============================================================================
// $Log: not supported by cvs2svn $
// Revision 1.3  2002/04/09 17:19:40  ibelyaev
//  fix problems with event-drawing and magnetic field
//
// Revision 1.2  2002/04/05 16:41:29  witoldp
// uses restructured GeneratorModules
//
// Revision 1.1  2002/03/13 12:56:11  ibelyaev
//  small restructurusation of job-options
// 
// ============================================================================
//  jobOptions to run Gauss program in 3 steps 
// ============================================================================
ApplicationMgr.DLLs += { "GiGa" , "GiGaCnv" } ;

// ============================================================================
// declare external services needed for GiGa 
// ============================================================================
ApplicationMgr.ExtSvc += 
{ "GiGaSvc"             ,          
  "GiGaKineCnvSvc"      ,  
  "GiGaGeomCnvSvc"      ,   
  "GiGaHitsCnvSvc"      } ;

// ============================================================================
// Use GiGa Conversion services as event persistency conversion services 
// ============================================================================
EventPersistencySvc.CnvServices += 
{ "GiGaKineCnvSvc" ,  
  "GiGaHitsCnvSvc" } ;

// ============================================================================
// Detector Simulation (tracking os particles through apparatus) phase 
// ============================================================================
Simulation.Members += 
{	"GiGaDataStoreAlgorithm/GiGaStore" ,   // data store configuration
  "GiGaInputStream/Geo"              ,   // load the geometry 
  "GiGaInputStream/Kine"             ,   // load the kinematics 
  "GiGaFlushAlgorithm/GiGaFlush"     ,   // flush the event 
  "GiGaMiscGetEventAlg/GetEvent"     } ; // convert MCParticles/MCVertices

// ============================================================================
// configuration of GiGa Data Store 
// ============================================================================
GiGaStore.ConversionServices   = 
{ "GiGaKineCnvSvc" , 
  "GiGaHitsCnvSvc" };

GiGaSvc.OutputLevel = 1 ;
// ============================================================================
// configuration of kinematics event "Kine" data stream 
// ============================================================================
Kine.ConversionSvcName         = "GiGaKineCnvSvc" ; 
Kine.DataProviderSvcName       = "EventDataSvc"   ; 
Kine.StreamItems              += 
{ 
  "/Event/Gen/HepMCEvents" 
  ,"/Event/Gen/Vertices"   
};

// ============================================================================
// configuration of geometry "Geo" data stream 
// ============================================================================
Geo.ExecuteOnce          = true ;  
Geo.ConversionSvcName    = "GiGaGeomCnvSvc"  ; 
Geo.DataProviderSvcName  = "DetectorDataSvc" ; 
Geo.StreamItems         += { "/dd/Structure/LHCb/Pipe"   } ; 
Geo.StreamItems         += { "/dd/Structure/LHCb/Magnet" } ; 
// Geo.StreamItems         += { "/dd/Structure/LHCb/Rich1"  } ; 

// ============================================================================
// Physics List  to be used and its configuration  
// ============================================================================
GiGaSvc.PhysicsList            = "GiGaPhysListEm/EmPhysList" ; 
EmPhysList.Cut                 = 5.0                        ;

// ============================================================================
// Stacking action to be used and its configuration  
// ============================================================================
GiGaSvc.StackingAction         = "GiGaStackActionEmpty/EmptyStack" ;
EmptyStack.OutputLevel         = 3                                 ;

// ============================================================================
// Tracking action to be used and its configuration  
// ============================================================================
GiGaSvc.TrackingAction         =   "GiGaTrackActionSequence/TrackSeq"    ;
TrackSeq.Members              += { "GiGaTrackActionSimple/SimpleTrack" } ;
SimpleTrack.StoreAll           = true                                    ; 
// SimpleTrack.StoreByOwnEnergy   = true                                    ; 
// SimpleTrack.OwnEnergyThreshold = 1000.0                                  ; 
// SimpleTrack.StoreByChildEnergy   = true ; 
// SimpleTrack.ChildEnergyThreshold = 50.0 ; 
// SimpleTrack.StoreByOwnType       = true; 
// SimpleTrack.StoredOwnTypes       = { "e+" , "e-" };
// SimpleTrack.StoreByChildType     = true; 
// SimpleTrack.StoredChildTypes     = { "e+"};


// ============================================================================
// Stepping action to be used and its configuration  
// ============================================================================
GiGaSvc.SteppingAction            =   "GiGaStepActionSequence/StepSeq"  ;
StepSeq.Members                  += { "GiGaStepActionDraw/DrawStep"   } ;
DrawStep.OutputLevel              = 6;


// ============================================================================
// Event action to be used and its configuration  
// ============================================================================
GiGaSvc.EventAction               =   "GiGaEventActionSequence/EventSeq"      ;
EventSeq.Members                 += { "GiGaEventActionDraw/EventDraw" } ;
EventDraw.OutputLevel = 1 ;
EventSeq.Members                 += { "GiGaEventActionCommand/EventCommand" } ;
EventCommand.OutputLevel          = 1                                         ;
EventCommand.EndOfEventCommands   = 
{ "/vis/scene/add/volume"               , 
  "/vis/scene/add/trajectories"         ,
  "/vis/viewer/update"                  } ;
#ifdef WIN32
EventCommand.BeginOfEventCommands = 
{ "/vis/scene/create"                   , 
  "/vis/sceneHandler/create OIWIN32"    ,
  "/vis/viewer/create"                  ,
  "/vis/scene/add/volume"               , 
  "/vis/scene/add/trajectories"         ,
  "/vis/scene/notifyHandlers   "        } ;
#else 
EventCommand.BeginOfEventCommands = 
{ 
  "/vis/scene/create"                   , 
  "/vis/sceneHandler/create DAWNFILE"   ,
  "/vis/viewer/create"                  ,
  "/vis/scene/add/volume"               , 
  "/vis/scene/add/trajectories"         ,
  "/vis/scene/notifyHandlers   "        
} ;
#endif 

// ============================================================================
// Run Action to be used and its consficgurations  
// ============================================================================
GiGaSvc.RunAction                 =   "GiGaRunActionSequence/RunSeq"      ;
RunSeq.Members                    += 
{ "GiGaRunActionCommand/RunCommand" } ;
RunCommand.OutputLevel            = 2                                     ;
RunCommand.BeginOfRunCommands     = 
{ "/control/saveHistory "           ,
  "/run/verbose 0 "                 ,
  "/vis/verbose 0"                 ,
  "/tracking/storeTrajectory  1"    } ;

// ============================================================================
// List of user interface sessions (with priorities)
// ============================================================================
// GiGaSvc.UIsessions =  { "tcsh" , "Xm" , "Wo" , "GAG", "Xaw"  , "terminal" } ;

// ============================================================================
// Global(world) magnetic field 
// ============================================================================
// GiGaGeomCnvSvc.WorldMagneticField = "GiGaMagFieldGlobal/GlobalField";
GlobalField.MagneticFieldService = "MagneticFieldSvc" ;
// GiGaGeomCnvSvc.WorldMagneticField = "GiGaMagFieldUniform/UniformField";
UniformField.Bx =   0.     ; 
UniformField.By =   0.005  ; 
UniformField.Bz =   0.     ; 
UniformField.OutputLevel = 1 ;

// ============================================================================
// flag for instantiation and usage of visual manager 
// ============================================================================
GiGaSvc.UseVisManager          = true;

// ============================================================================
// The end of Simulation's job-options file 
// ============================================================================

