// $Id: Simulation.opts,v 1.22 2002-12-07 14:47:29 ibelyaev Exp $ 
// ============================================================================
// CVS tag $Name: not supported by cvs2svn $
// ============================================================================
// $Log: not supported by cvs2svn $ 
// ============================================================================

/** @file 
 *  The main job-option file for configuration of 
 *  different component for simulation phase of Gauss
 */

ApplicationMgr.DLLs += 
{ "GiGa"          , 
  "GiGaCnv"       , 
  "GaussTools"    ,
  "Magnet"        , 
  "CaloDetXmlCnv" } ;

ApplicationMgr.ExtSvc += 
{ 
  "GiGa"         ,    /// interface to Geant4 engine 
  "GiGaKine"     ,    /// conversion service for HepMC, particles & vertices 
  "GiGaGeo"      ,   
  "GiGaHits"     }; 

EventPersistencySvc.CnvServices += 
{ "GiGaKine" , "GiGaHits" } ;

Simulation.Members += 
{	"GiGaDataStoreAlgorithm/GiGaStore" ,  /// Gaudi TES configuration/mapping
  "GiGaInputStream/Geo"              ,  /// Load the geometry 
  "GiGaInputStream/Kine"             ,  /// Load the kinematics 
  "GiGaFlushAlgorithm/GiGaFlush"        /// Flush the event 
  //"GiGaMiscGetEventAlg/GetEvent"     ,  /// convert MCParticles/MCVertices
  //"GetGiGaHitsAlg/GetHits"           
}; /// convert MCHits

/// configuration of kinematics event "Kine" data stream 
Kine.ConversionSvcName      = "GiGaKine"     ; 
Kine.DataProviderSvcName    = "EventDataSvc" ; 
Kine.StreamItems           += 
{  "/Event/Gen/HepMCEvents"     /*, "/Event/Gen/Vertices" */ };

/// configuration of geometry "Geo" data stream
Geo.ExecuteOnce             = true ;  
Geo.ConversionSvcName       = "GiGaGeo"         ; 
Geo.DataProviderSvcName     = "DetectorDataSvc" ; 

Geo.StreamItems         += { "/dd/Structure/LHCb/Pipe"   } ; 
//Geo.StreamItems         += { "/dd/Structure/LHCb/Velo"  } ; 
//Geo.StreamItems         += { "/dd/Structure/LHCb/Velo2Rich1"};
//Geo.StreamItems         += { "/dd/Structure/LHCb/Rich1"   } ; 
//Geo.StreamItems         += { "/dd/Structure/LHCb/Rich2"   } ; 
//Geo.StreamItems         += { "/dd/Geometry/Rich1/Rich1Surfaces" };
//Geo.StreamItems         += { "/dd/Geometry/Rich1/RichHPDSurfaces" };
//Geo.StreamItems         += { "/dd/Structure/LHCb/Magnet" } ; 
//Geo.StreamItems         += { "/dd/Structure/LHCb/Tracker"   } ; 
//Geo.StreamItems         += { "/dd/Structure/LHCb/Spd"  };
//Geo.StreamItems         += { "/dd/Structure/LHCb/Prs"  };
Geo.StreamItems         += { "/dd/Structure/LHCb/Ecal"  };
//Geo.StreamItems         += { "/dd/Structure/LHCb/Hcal"  };
//Geo.StreamItems         += { "/dd/Structure/LHCb/Muon"  };


// Physics List  to be used and its configuration  
GiGa.PhysicsList           = "GiGaPhysListModular/ModularPL";
GiGa.ModularPL.Cut         = 0.7;

GiGa.ModularPL.PhysicsConstructors += { "GeneralPhysics"        } ;
GiGa.ModularPL.PhysicsConstructors += { "EM_GNPhysics"          } ;
GiGa.ModularPL.PhysicsConstructors += { "MuonPhysics"           } ;
GiGa.ModularPL.PhysicsConstructors += { "HadronPhysicsLHEP_GN"  } ;
GiGa.ModularPL.PhysicsConstructors += { "IonPhysics"            } ;
//GiGaSvc.ModularPL.PhysicsConstructors += {"GiGaPhysConstructorOp"};

/// Stacking action to be used and its configuration  
GiGa.StackingAction         = "GiGaStackActionEmpty/EmptyStack" ;

/// Tracking action to be used and its configuration  
GiGa.TrackingAction         =   "GiGaTrackActionSequence/TrackSeq"    ;
GiGa.TrackSeq.Members      += { "GiGaTrackActionSimple/SimpleTrack" } ;

GiGa.TrackSeq.SimpleTrack.StoreAll           = false    ; 
GiGa.TrackSeq.SimpleTrack.StorePrimaries     = true     ;
GiGa.TrackSeq.SimpleTrack.StoreMarkedTracks  = false    ;
GiGa.TrackSeq.SimpleTrack.StoreHitTracks     = false    ; 
GiGa.TrackSeq.SimpleTrack.StoreByOwnEnergy   = true     ; 
GiGa.TrackSeq.SimpleTrack.OwnEnergyThreshold = 1 * GeV  ;        
// GiGa.TrackSeq.SimpleTrack.StoreByChildEnergy   = true ; 
// GiGa.TrackSeq.SimpleTrack.ChildEnergyThreshold = 50.0 ; 
// GiGa.TrackSeq.SimpleTrack.StoreByOwnType       = true; 
// GiGa.TrackSeq.SimpleTrack.StoredOwnTypes       = { "e+" , "e-" };
// GiGa.TrackSeq.SimpleTrack.StoreByChildType     = true; 
// GiGa.TrackSeq.SimpleTrack.StoredChildTypes     = { "e+"};

/// Stepping action to be used and its configuration  
GiGa.SteppingAction               =   "GiGaStepActionSequence/StepSeq"  ;
GiGa.StepSeq.Members             += { "GaussStepAction/GaussStep" } ;

/// Event action to be used and its configuration  
GiGa.EventAction           =   "GiGaEventActionSequence/EventSeq"      ;

/// Run Action to be used and its configurations  
GiGa.RunAction                 =   "GiGaRunActionSequence/RunSeq"      ;
GiGa.RunSeq.Members           += { "GiGaRunActionCommand/RunCommand" } ;
GiGa.RunSeq.RunCommand.BeginOfRunCommands     = 
{ "/control/saveHistory "          ,
  "/run/verbose 0 "                ,
  "/tracking/verbose 0"            ,
  "/tracking/storeTrajectory  1"   } ;

/// "Global Magnetifc field" (using Magnetic Field Service)
GiGaGeo.WorldMagneticField = "GiGaMagFieldGlobal/GlobalField";
GiGaGeo.GlobalField.MagneticFieldService = "MagneticFieldSvc" ;

/// Interactive session?
// GiGa.UIsession  =  "GiGaUIsession/UIsession" ;

/// Visualization?
// GiGa.VisManager =  "GiGaVisManager/VisMgr"   ;

/// sensdet paths
GiGaGeo.ITSDet.DetectorPath   = "/Tracker/IT";
GiGaGeo.VeloSDet.DetectorPath = "/Velo";
GiGaGeo.OTSDet.DetectorPath   = "/Tracker/OT";

/// specific configuration of calorimeter stuff 
#include "$GAUSSOPTS/Calo.opts"

// ============================================================================
// The END 
// ============================================================================
