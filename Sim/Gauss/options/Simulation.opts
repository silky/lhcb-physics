// $Id: Simulation.opts,v 1.29 2003-03-14 17:32:03 ranjard Exp $ 

////////////////////////////////////////////////////////
// Services:

ApplicationMgr.DLLs  += { "SimSvc" };
//SimulationSvc.SimulationDbLocation =
//"$XMLDDDBROOT/DDDB/Simulation/simulation.xml";
// below is the temporary location of the xml file 
//SimulationSvc.SimulationDbLocation =
//"$GAUSSROOT/data/simulation.xml";

#include "$STDOPTS/DetDesc.opts"
DetectorDataSvc.DetDbLocation = "$XMLDDDBROOT/DDDB/v252r0G.xml";
 
// declare external services needed MAGNETIC FIELD 
ApplicationMgr.ExtSvc +=  
{ "MagneticFieldSvc"  };  
MagneticFieldSvc.FieldMapFile = 
"$LHCb_release_area/DBASE/SICB/dbase/v254r1/cdf/field043.cdf";

///////////////////////////////////////////////////////

ApplicationMgr.DLLs += 
{ "GiGa"         , 
  "GiGaCnv"      , 
  "GaussTracker" ,
  "GaussRICH"    ,
  "GaussCalo"    ,
  "GaussPhysics" ,   
  "Magnet"       ,
  "CaloEvent"    ,  
  "CaloDetXmlCnv"} ;

ApplicationMgr.ExtSvc += 
{ "GiGaKine" ,          
  "GiGaGeo"  ,   
  "GiGaHits" ,
  "GiGa" } ;

EventPersistencySvc.CnvServices += 
{ "GiGaKine" ,  
  "GiGaHits" } ;

Simulation.Members += 
{	"GiGaDataStoreAlgorithm/GiGaStore" ,   // data store configuration
  "GiGaInputStream/Geo"              ,   // load the geometry 
  "GiGaInputStream/Kine"             ,   // load the kinematics 
  //  "GiGaFlushAlgorithm/GiGaFlush"     ,  // flush the event 
  "PrintEventAlg"                    ,   // get MCParticles/MCVertices
  "GetGiGaHitsAlg/GetHits"           };  // get MCHits

// configuration of GiGa Data Store 
GiGaStore.ConversionServices   = 
{ "GiGaKine" , 
  "GiGaHits" };

// configuration of kinematics event "Kine" data stream 
Kine.ConversionSvcName         = "GiGaKine" ; 
Kine.DataProviderSvcName       = "EventDataSvc"   ; 
Kine.StreamItems              += 
{  "/Event/Gen/HepMCEvents" 
// uncomment the line below if you want to use EvGen
//  ,"/Event/Gen/Vertices"   
};

// configuration of geometry "Geo" data stream

Geo.ExecuteOnce          = true ;  
Geo.ConversionSvcName    = "GiGaGeo"  ; 
Geo.DataProviderSvcName  = "DetectorDataSvc" ; 

Geo.StreamItems         += { "/dd/Structure/LHCb/Pipe"   } ; 
Geo.StreamItems         += { "/dd/Structure/LHCb/Velo"  } ; 
Geo.StreamItems         += { "/dd/Structure/LHCb/Velo2Rich1"};
Geo.StreamItems         += { "/dd/Structure/LHCb/Rich1"   } ; 
Geo.StreamItems         += { "/dd/Structure/LHCb/Rich2"   } ; 
Geo.StreamItems         += { "/dd/Geometry/Rich1/Rich1Surfaces" };
Geo.StreamItems         += { "/dd/Geometry/Rich1/RichHPDSurfaces" };
Geo.StreamItems         += { "/dd/Structure/LHCb/Magnet" } ; 
Geo.StreamItems         += { "/dd/Structure/LHCb/Tracker"   } ; 
//Geo.StreamItems         += { "/dd/Structure/LHCb/Muon"  };
//Geo.StreamItems         += { "/dd/Structure/LHCb/Hcal"  };
//Geo.StreamItems         += { "/dd/Structure/LHCb/Ecal"  };
//Geo.StreamItems         += { "/dd/Structure/LHCb/Spd"  };
//Geo.StreamItems         += { "/dd/Structure/LHCb/Prs"  };

// Physics List  to be used and its configuration  
GiGa.PhysicsList            = "GiGaPhysListModular/ModularPL";
GiGa.ModularPL.Cut           = 4.0 * mm;

GiGa.ModularPL.PhysicsConstructors += {"GeneralPhysics"};
GiGa.ModularPL.PhysicsConstructors += {"EMPhysics"};
GiGa.ModularPL.PhysicsConstructors += {"MuonPhysics"};
GiGa.ModularPL.PhysicsConstructors += {"HadronPhysicsLHEP"};
//GiGa.ModularPL.PhysicsConstructors += {"HadronPhysicsQGSP"};
GiGa.ModularPL.PhysicsConstructors += {"IonPhysics"};
//GiGa.ModularPL.PhysicsConstructors += {"GiGaPhysConstructorOp"};

// Tracking action to be used and its configuration  
GiGa.TrackingAction         =   "GiGaTrackActionSequence/TrackSeq"    ;
GiGa.TrackSeq.Members      += { "GiGaTrackActionSimple/SimpleTrack" } ;

GiGa.TrackSeq.SimpleTrack.StoreAll  = false; 
GiGa.TrackSeq.SimpleTrack.StorePrimaries = true;
GiGa.TrackSeq.SimpleTrack.StoreMarkedTracks = true;
GiGa.TrackSeq.SimpleTrack.StoreByOwnEnergy   = true; 
GiGa.TrackSeq.SimpleTrack.OwnEnergyThreshold = 10.0 * MeV   ;        
// GiGa.TrackSeq.SimpleTrack.StoreByChildEnergy   = true ; 
// GiGa.TrackSeq.SimpleTrack.ChildEnergyThreshold = 50.0 ; 
GiGa.TrackSeq.SimpleTrack.StoreByOwnType       = true; 
GiGa.TrackSeq.SimpleTrack.StoredOwnTypes       = { "pi+" , "pi-" };

// GiGa.TrackSeq.SimpleTrack.StoredChildTypes     = { "e+"};

// Stepping action to be used and its configuration  
GiGa.SteppingAction               =   "GiGaStepActionSequence/StepSeq"  ;
GiGa.StepSeq.Members             += { "GaussStepAction/GaussStep" } ;
// tracking cuts
GiGa.StepSeq.Members             += { "CutsStepAction/GaussCuts" } ;

// Event action to be used and its configuration  
GiGa.EventAction           =   "GiGaEventActionSequence/EventSeq"      ;

// Run Action to be used and its configurations  
GiGa.RunAction                 =   "GiGaRunActionSequence/RunSeq"      ;
GiGa.RunSeq.Members           += { "GiGaRunActionCommand/RunCommand" } ;
GiGa.RunSeq.RunCommand.BeginOfRunCommands     = 
{ "/control/saveHistory "           ,
  "/run/verbose 1 "               ,
  "/tracking/verbose 0"            ,
  "/tracking/storeTrajectory  1"    } ;

//   "Global Magnetifc field" (usisng Magnetic Field Service)
GiGaGeo.WorldMagneticField = "GiGaMagFieldGlobal/GlobalField";
GiGaGeo.GlobalField.MagneticFieldService = "MagneticFieldSvc" ;

// Material Budget  - optional tool

// GiGaGeo.GlobalSensitivity  = "GiGaSensDetBudget/Budget" ;
// GiGaGeo.Budget.OutputLevel = 1 ;

// sensdet paths
GiGaGeo.ITSDet.DetectorPath    = "/Tracker/IT";
GiGaGeo.VeloSDet.DetectorPath  = "/Velo";
GiGaGeo.OTSDet.DetectorPath    = "/Tracker/OT";

GetHits.CaloHits   = { "MC/Ecal/Hits" };

// specific configuration of calorimeter stuff 
#include "$GAUSSOPTS/Calo.opts"

// ============================================================================
// The END 
// ============================================================================
