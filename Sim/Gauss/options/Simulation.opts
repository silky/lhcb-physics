// $Id: Simulation.opts,v 1.58 2005-02-07 09:12:17 ranjard Exp $ 

/** @file 
 * 
 *  File containing all the steps in the simulation phase of
 *  a Gauss job. The general Dlls and services are defined here.
 *
 *  @author G.Corti
 *  @date 2004-11-18
 */

// DLLs necessary for any simulation phase
ApplicationMgr.DLLs  += { "SimSvc" };
ApplicationMgr.DLLs  += { "GiGa", "GiGaCnv" };

// Services necessary for any simulation phase
ApplicationMgr.ExtSvc += { 
  "GiGa"
};
EventPersistencySvc.CnvServices += { "GiGaKine" , "GiGaHits" };

// Data store configuration: request GiGaKine and GiGaHits (IGiGaCnvSvc) at
// initialization and register leaves in store for each event,
// Keep default configuration for 
// GiGaStore.ConversionServices   =  { "GiGaKine" , "GiGaHits" };
Simulation.Members += { "GiGaDataStoreAlgorithm/GiGaStore" };

// Define the geometrical setup to simulate, including the magnetic field
// simulation
Simulation.Members += { "GiGaInputStream/Geo" };
#include "$GAUSSOPTS/SimGeometry.opts"

// Load the initial kinematics
// In initialize retrieve the GiGaKine service
// It is executed for each event
Simulation.Members += { "GiGaInputStream/Kine" };
// configuration of kinematics event "Kine" data stream = default
Kine.ConversionSvcName    = "GiGaKine" ; 
Kine.DataProviderSvcName  = "EventDataSvc"   ; 
// Where in the TES the INITIAL kinematic is located
Kine.StreamItems         += {"/Event/Gen/HepMCEvents"};

// Perform the Geant4 simulation
Simulation.Members += { "GiGaFlushAlgorithm" };
// Populate the MCParticles/MCVertices in the TES
Simulation.Members += { "GiGaGetEventAlg" };
// Populate sensitive hits in the TES
Simulation.Members += { "GiGaGetHitsAlg" };

// Simulation configuration: Geant4 control
// Physics list and the production cuts  
ApplicationMgr.DLLs += { "GaussPhysics" }; 
GiGa.PhysicsList              = "GiGaPhysListModular/ModularPL";
GiGa.ModularPL.CutForElectron = 10000.0 * m;
GiGa.ModularPL.CutForPositron = 5.0 * mm; 
GiGa.ModularPL.CutForGamma    = 10.0 * mm;
//GiGa.ModularPL.DumpCutsTable = true;

GiGa.ModularPL.PhysicsConstructors += 
  { "GiGaExtPhysics<GeneralPhysics>/GeneralPhysics" } ;
GiGa.ModularPL.PhysicsConstructors += 
  { "GiGaExtPhysics<EMPhysics>/EMPhysics"           } ;
GiGa.ModularPL.PhysicsConstructors += 
  { "GiGaExtPhysics<MuonPhysics>/MuonPhysics"       } ;
GiGa.ModularPL.PhysicsConstructors += 
  { "GiGaExtPhysics<HadronPhysicsLHEP>/LHEPPhysics" } ;
GiGa.ModularPL.PhysicsConstructors += 
  { "GiGaExtPhysics<IonPhysics>/IonPhysics"         } ;
GiGa.ModularPL.PhysicsConstructors += 
  { "GiGaPhysConstructorOp"                         } ;
GiGa.ModularPL.PhysicsConstructors += 
  { "GiGaPhysConstructorHpd"                        } ;

// Mandatory run action  
GiGa.RunAction                 =   "GiGaRunActionSequence/RunSeq"      ;
GiGa.RunSeq.Members           += { "TrCutsRunAction/TrCuts"};
GiGa.RunSeq.Members           += { "GiGaRunActionCommand/RunCommand" } ;
GiGa.RunSeq.RunCommand.BeginOfRunCommands     = 
{ "/tracking/verbose 0",
  "/tracking/storeTrajectory  1",
  "/process/eLoss/verbose -1",
 } ;

// Mandatory event action  
GiGa.EventAction           =   "GiGaEventActionSequence/EventSeq"      ;

// Mandatory tracking action (1/2)
// Must be in two steps, when a trajectory is created
GiGa.TrackingAction         =   "GiGaTrackActionSequence/TrackSeq"    ;
GiGa.TrackSeq.Members      += { "GaussPreTrackAction/PreTrack" }; 


///////////////////////////////////////////////////////////////////////
// all the subdetector specific actions should be added here:

// specific RICH options
#include "$GAUSSRICHROOT/options/Rich.opts"
GiGa.ModularPL.GiGaPhysConstructorOp.RichMaxNumPhotPerCherenkovStep=40;
GiGaGetHitsAlg.RichOpticalPhotons = "";
GiGaGetHitsAlg.RichSegments       = "";
GiGaGetHitsAlg.RichTracks         = "";

// specific configuration of calorimeter stuff 
#include "$GAUSSCALOROOT/options/Calo.opts"

//////////////////////////////////////////////////////////////////////

// mandatory tracking action (2/2)
// ... and when a trajectory ends
GiGa.TrackSeq.Members      += { "GaussPostTrackAction/PostTrack" } ;
GiGa.TrackSeq.PostTrack.StoreAll  = false; 
GiGa.TrackSeq.PostTrack.StorePrimaries = true;
GiGa.TrackSeq.PostTrack.StoreMarkedTracks = true;
GiGa.TrackSeq.PostTrack.StoreForcedDecays = true;
// Store particle with Energy > 100 MeV, this include all
// particles in any process that satisfy this, this is applied
// only to particles which origin is before z=11290mm (i.e.PRS/SPD)
GiGa.TrackSeq.PostTrack.StoreByOwnEnergy   = true; 
GiGa.TrackSeq.PostTrack.OwnEnergyThreshold = 100 * MeV;        
// For particles producing a cerenkov photon just store it
GiGa.TrackSeq.PostTrack.StoreByChildProcess  = true; 
GiGa.TrackSeq.PostTrack.StoredChildProcesses = {"RichG4Cerenkov"}; 

// mandatory stepping action   
GiGa.SteppingAction               =   "GiGaStepActionSequence/StepSeq"  ;
GiGa.StepSeq.Members             += { "GaussStepAction/GaussStep" } ;

// setting simulation attributes
GiGa.GiGaMgr.RunTools += { "GiGaSetSimAttributes" };
GiGa.GiGaMgr.GiGaSetSimAttributes.OutputLevel = 4;


