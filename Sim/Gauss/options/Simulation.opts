// $Id: Simulation.opts,v 1.51 2004-03-24 09:46:26 ranjard Exp $ 

////////////////////////////////////////////////////////////////////
// configuration of services

ApplicationMgr.DLLs  += { "SimSvc" };

#include "$STDOPTS/DetDesc.opts"
DetectorDataSvc.DetDbLocation = "$XMLDDDBROOT/DDDB/lhcb.xml";

// declare external services needed MAGNETIC FIELD 
ApplicationMgr.ExtSvc +=  { "MagneticFieldSvc"  };  
MagneticFieldSvc.FieldMapFile = "$FIELDMAP";

///////////////////////////////////////////////////////////////////


ApplicationMgr.DLLs += 
{ "GiGa"         , 
  "GiGaCnv"      , 
  "GaussTracker" ,
  "GaussRICH"    ,
  "GaussCalo"    ,
  "GaussPhysics" ,   
  "Magnet"       ,
  "CaloEvent"    ,  
  "CaloDetXmlCnv"} ;

ApplicationMgr.ExtSvc += 
{ "GiGa" , 
  "GiGaKine" ,          
  "GiGaGeo"  ,   
  "GiGaHits" } ;

EventPersistencySvc.CnvServices += 
{ "GiGaKine" ,  
  "GiGaHits" } ;

Simulation.Members += 
{ "GiGaDataStoreAlgorithm/GiGaStore" ,   // data store configuration
  "GiGaInputStream/Geo"              ,   // load the geometry 
  "GiGaInputStream/Kine"                 // load the kinematics 
//, "GiGaFlushAlgorithm/GiGaFlush"         // flush the event 
//, "PrintEventAlg"                        // get MCParticles/MCVertices
, "GiGaGetHitsAlg/GetHits"               // get MCHits
};

// configuration of GiGa Data Store 
GiGaStore.ConversionServices   = 
{ "GiGaKine" , 
  "GiGaHits" };

// configuration of kinematics event "Kine" data stream 
Kine.ConversionSvcName         = "GiGaKine" ; 
Kine.DataProviderSvcName       = "EventDataSvc"   ; 
Kine.StreamItems              += 
{  "/Event/Gen/HepMCEvents" };

// configuration of geometry "Geo" data stream
Geo.ExecuteOnce          = true ;   
Geo.ConversionSvcName    = "GiGaGeo"  ; 
Geo.DataProviderSvcName  = "DetectorDataSvc" ; 

Geo.StreamItems         += {"/dd/Structure/LHCb/Pipe"}; 
Geo.StreamItems         += {"/dd/Structure/LHCb/Magnet"}; 
Geo.StreamItems         += {"/dd/Structure/LHCb/Velo"}; 
Geo.StreamItems         += {"/dd/Structure/LHCb/Velo2Rich1"};
Geo.StreamItems         += {"/dd/Structure/LHCb/Rich1"}; 
Geo.StreamItems         += {"/dd/Geometry/Rich1/Rich1Surfaces"};
Geo.StreamItems         += {"/dd/Geometry/Rich1/RichHPDSurfaces"};
Geo.StreamItems         += {"/dd/Structure/LHCb/OT"}; 
Geo.StreamItems         += {"/dd/Structure/LHCb/IT"};
Geo.StreamItems         += {"/dd/Structure/LHCb/Rich2"}; 
Geo.StreamItems         += {"/dd/Geometry/Rich2/Rich2Surfaces"};
Geo.StreamItems         += {"/dd/Structure/LHCb/Spd"};  
Geo.StreamItems         += {"/dd/Structure/LHCb/Converter"};
Geo.StreamItems         += {"/dd/Structure/LHCb/Prs"};
Geo.StreamItems         += {"/dd/Structure/LHCb/Ecal"};
Geo.StreamItems         += {"/dd/Structure/LHCb/Hcal"};
Geo.StreamItems         += {"/dd/Structure/LHCb/Muon"};

// physics list  and the production cuts  
GiGa.PhysicsList              = "GiGaPhysListModular/ModularPL";
GiGa.ModularPL.CutForElectron = 10000.0 * m;
GiGa.ModularPL.CutForPositron = 5.0 * mm; 
GiGa.ModularPL.CutForGamma    = 10.0 * mm;
//GiGa.ModularPL.DumpCutsTable = true;

GiGa.ModularPL.PhysicsConstructors += 
  { "GiGaExtPhysics<GeneralPhysics>/GeneralPhysics" } ;
GiGa.ModularPL.PhysicsConstructors += 
  { "GiGaExtPhysics<EMPhysics>/EMPhysics"           } ;
GiGa.ModularPL.PhysicsConstructors += 
  { "GiGaExtPhysics<MuonPhysics>/MuonPhysics"       } ;
GiGa.ModularPL.PhysicsConstructors += 
  { "GiGaExtPhysics<HadronPhysicsLHEP>/LHEPPhysics" } ;
GiGa.ModularPL.PhysicsConstructors += 
  { "GiGaExtPhysics<IonPhysics>/IonPhysics"         } ;
GiGa.ModularPL.PhysicsConstructors += 
  { "GiGaPhysConstructorOp"                         } ;
GiGa.ModularPL.PhysicsConstructors += 
  { "GiGaPhysConstructorHpd"                        } ;


// mandatory run action  
GiGa.RunAction                 =   "GiGaRunActionSequence/RunSeq"      ;
GiGa.RunSeq.Members           += { "TrCutsRunAction/TrCuts"};
GiGa.RunSeq.Members           += { "GiGaRunActionCommand/RunCommand" } ;
GiGa.RunSeq.RunCommand.BeginOfRunCommands     = 
{ "/tracking/verbose 0",
  "/tracking/storeTrajectory  1"} ;

// mandatory event action  
GiGa.EventAction           =   "GiGaEventActionSequence/EventSeq"      ;

// mandatory tracking action (1/2)
GiGa.TrackingAction         =   "GiGaTrackActionSequence/TrackSeq"    ;
GiGa.TrackSeq.Members      += { "GaussPreTrackAction/PreTrack" }; 


///////////////////////////////////////////////////////////////////////
// all the subdetector specific actions should be added here:

// specific RICH options
#include "$GAUSSRICHROOT/options/Rich.opts"

// specific configuration of calorimeter stuff 
#include "$GAUSSCALOROOT/options/Calo.opts"

//////////////////////////////////////////////////////////////////////

// mandatory tracking action (2/2)
GiGa.TrackSeq.Members      += { "GaussPostTrackAction/PostTrack" } ;
GiGa.TrackSeq.PostTrack.StoreAll  = false; 
GiGa.TrackSeq.PostTrack.StorePrimaries = true;
GiGa.TrackSeq.PostTrack.StoreMarkedTracks = true;
GiGa.TrackSeq.PostTrack.StoreForcedDecays = true;
//GiGa.TrackSeq.PostTrack.StoreByOwnEnergy   = true; 
//GiGa.TrackSeq.PostTrack.OwnEnergyThreshold = 2.2 * GeV;        
//GiGa.TrackSeq.PostTrack.StoreByChildProcess = true; 
//GiGa.TrackSeq.PostTrack.StoredChildProcesses = {"Decay"}; 

// mandatory stepping action   
GiGa.SteppingAction               =   "GiGaStepActionSequence/StepSeq"  ;
GiGa.StepSeq.Members             += { "GaussStepAction/GaussStep" } ;

// "Global Field Manager" 
GiGaGeo.FieldManager           = "GiGaFieldMgr/FieldMgr";
GiGaGeo.FieldMgr.Stepper       = "ClassicalRK4"; 
GiGaGeo.FieldMgr.Global        = true;
GiGaGeo.FieldMgr.MagneticField = "GiGaMagFieldGlobal/LHCbField";
GiGaGeo.LHCbField.MagneticFieldService = "MagneticFieldSvc";

// setting simulation attributes
GiGa.GiGaMgr.RunTools += { "GiGaSetSimAttributes" };

// sensdet paths (to be moved away at some stage...)
GiGaGeo.ITSDet.DetectorPath    = "/Tracker/IT";
GiGaGeo.VeloSDet.DetectorPath  = "/Velo";
GiGaGeo.OTSDet.DetectorPath    = "/Tracker/OT";


