// $Id: $
#ifndef SENSDET_CKVG4HIT_H 
#define SENSDET_CKVG4HIT_H 1
#include "GaussTools/GaussHitBase.h"
#include "G4VHit.hh"
#include "G4THitsCollection.hh"
#include "G4Allocator.hh"
#include "G4ThreeVector.hh"
#include <vector>
#include <bitset>
#include "RichG4Hit.h"

// This is the Geant4 Auxiliary hit class for the LHCb-RICH-Upgrade with PMTs.
// This contains info not stored in RichG4HitClass.


// Include files

/** @class CkvG4Hit CkvG4Hit.h SensDet/CkvG4Hit.h
 *  
 *
 *  @author Sajan Easo
 *  @date   2011-03-18
 */
class CkvG4Hit: public GaussHitBase {
public: 
  /// Standard constructor
  CkvG4Hit( ); 

  virtual ~CkvG4Hit( ); ///< Destructor
  CkvG4Hit(const CkvG4Hit &right);

  const CkvG4Hit& operator=(const CkvG4Hit &right);
  int operator==(const CkvG4Hit  &right) const;

  inline void *operator new(size_t);
  inline void operator delete(void *aHit);

  void Print();
  void Draw();
  void DrawPEOrigin();

  inline bool operator< ( const CkvG4Hit & hit ) const
  {
    // sort by z coord of emission point
    // doesn't really matter what, as long as it is predictable
    return ( this->GetRichG4Hit()->GetPhotEmisPt().z() < hit.GetRichG4Hit()->GetPhotEmisPt().z() );
  }


protected:

private:

  G4int m_CurModuleNum;  // Current PMT Module number .
  G4int m_CurHitInPixelGap;   // if 1 the hit is in the gap between the PMT pixels.
                         // if 0 the hits is at the active region of the PMT pixels.
  G4int m_CurPmtNum;   // Current Pmt number. 
  RichG4Hit* m_RichG4Hit; 
  
public:
  inline void SetCurModuleNum(const G4int cm) 
  {m_CurModuleNum=cm;}
  inline void SetCurHitInPixelGap(const G4int hp ) 
  {m_CurHitInPixelGap=hp;}
  inline void SetCurPmtNum (const G4int ap ) {
   m_CurPmtNum = ap;
  }
  inline void SetRichG4Hit( RichG4Hit* aHit) {
    m_RichG4Hit= aHit;
  }
  
  inline G4int  CurModuleNum() const  {  return m_CurModuleNum;}
  inline G4int  CurHitInPixelGap()  const   {  return  m_CurHitInPixelGap;}
  inline RichG4Hit* GetRichG4Hit() const {return m_RichG4Hit;}
  inline G4int CurPmtNum() const {return m_CurPmtNum; }
//private:

};
  typedef   G4THitsCollection<CkvG4Hit> CkvG4HitsCollection;
  extern G4Allocator<CkvG4Hit> CkvG4HitAllocator;
  inline void* CkvG4Hit::operator new (size_t)
  {
    return static_cast<void*>(CkvG4HitAllocator.MallocSingle()   );  
  }
  inline void CkvG4Hit::operator delete (void *aHit )
  {
    CkvG4HitAllocator.FreeSingle(static_cast<CkvG4Hit*>(aHit));
  }
  
   
#endif // SENSDET_CKVG4HIT_H
