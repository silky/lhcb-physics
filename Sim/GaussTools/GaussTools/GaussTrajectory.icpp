// ============================================================================
/// CVS tag $Name: not supported by cvs2svn $ 
// ============================================================================

// ============================================================================
#ifndef    GAUSSTOOLS_GAUSSTRAJECTORY_ICPP
#define    GAUSSTOOLS_GAUSSTRAJECTORY_ICPP 1 
// ============================================================================

/// Geant4 
#include "G4Track.hh"
///

// ============================================================================
/// allocator 
// ============================================================================
extern G4Allocator<GaussTrajectory> s_GaussTrajectoryAllocator;

// ============================================================================
/// constructor 
// ============================================================================
inline GaussTrajectory::GaussTrajectory (   )
  : GiGaTrajectory                      (   ) 
{};

// ============================================================================
/// constructor 
// ============================================================================
inline GaussTrajectory::GaussTrajectory   ( const G4Track* aTrack )
  : GiGaTrajectory(aTrack) 
{
};

// ============================================================================
/// constructor 
// ============================================================================
inline GaussTrajectory::GaussTrajectory ( const GaussTrajectory & right )
  : GiGaTrajectory(right)
{
};

// ============================================================================
/// destructor 
// ============================================================================
inline GaussTrajectory::~GaussTrajectory()
{
};

// ============================================================================
/// new 
// ============================================================================
inline void* GaussTrajectory::operator new(size_t)
{ return (void*) s_GaussTrajectoryAllocator.MallocSingle(); };

// ============================================================================
/// delete 
// ============================================================================
inline void  GaussTrajectory::operator delete(void* aTrajectory)
{ s_GaussTrajectoryAllocator.FreeSingle( (GaussTrajectory*) aTrajectory ); };


// ============================================================================
#endif  ///< GaussTools_GaussTrajectory_ICPP
// ============================================================================








