<?xml version='1.0' encoding='ISO-8859-1' standalone='yes'?>
<tagfile>
  <compound kind="page">
    <name>index</name>
    <title>notitle</title>
    <filename>index</filename>
    <docanchor file="index">bruneldoxygenmain</docanchor>
  </compound>
  <compound kind="file">
    <name>CaloClusterMatchMonitor.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloMoniDst/v1r0/src/</path>
    <filename>_calo_cluster_match_monitor_8cpp</filename>
    <includes id="_calo_cluster_match_monitor_8h" name="CaloClusterMatchMonitor.h" local="yes" imported="no">CaloClusterMatchMonitor.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>CaloClusterMatchMonitorFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloClusterMatchMonitor.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloMoniDst/v1r0/src/</path>
    <filename>_calo_cluster_match_monitor_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CALOEX_CAloClusterMatchMonitor_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloClusterMCTruthMonitor.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloMoniDst/v1r0/src/</path>
    <filename>_calo_cluster_m_c_truth_monitor_8cpp</filename>
    <includes id="_calo_cluster_m_c_truth_monitor_8h" name="CaloClusterMCTruthMonitor.h" local="yes" imported="no">CaloClusterMCTruthMonitor.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>CaloClusterMCTruthMonitorFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloClusterMCTruthMonitor.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloMoniDst/v1r0/src/</path>
    <filename>_calo_cluster_m_c_truth_monitor_8h</filename>
    <includes id="_calo_moni_alg_8h" name="CaloMoniAlg.h" local="yes" imported="no">CaloMoniAlg.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>CALOEX_CAloClusterMCTruthMonitor_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloClusterMonitor.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloMoniDst/v1r0/src/</path>
    <filename>_calo_cluster_monitor_8cpp</filename>
    <includes id="_calo_cluster_monitor_8h" name="CaloClusterMonitor.h" local="yes" imported="no">CaloClusterMonitor.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>CaloClusterMonitorFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloClusterMonitor.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloMoniDst/v1r0/src/</path>
    <filename>_calo_cluster_monitor_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CALOEX_CALOClusterMonitor_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloHypoMatchMonitor.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloMoniDst/v1r0/src/</path>
    <filename>_calo_hypo_match_monitor_8cpp</filename>
    <includes id="_calo_hypo_match_monitor_8h" name="CaloHypoMatchMonitor.h" local="yes" imported="no">CaloHypoMatchMonitor.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>CaloHypoMatchMonitorFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloHypoMatchMonitor.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloMoniDst/v1r0/src/</path>
    <filename>_calo_hypo_match_monitor_8h</filename>
    <includes id="_calo_moni_alg_8h" name="CaloMoniAlg.h" local="yes" imported="no">CaloMoniAlg.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>CALOEX_CAloHypoMatchMonitor_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloHypoMonitor.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloMoniDst/v1r0/src/</path>
    <filename>_calo_hypo_monitor_8cpp</filename>
    <includes id="_calo_hypo_monitor_8h" name="CaloHypoMonitor.h" local="yes" imported="no">CaloHypoMonitor.h</includes>
    <namespace>Local</namespace>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>CaloHypoMonitorFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloHypoMonitor.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloMoniDst/v1r0/src/</path>
    <filename>_calo_hypo_monitor_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CALOEX_CALOHypoMonitor_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloMCPi0Monitor.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloMoniDst/v1r0/src/</path>
    <filename>_calo_m_c_pi0_monitor_8cpp</filename>
    <includes id="_calo_m_c_pi0_monitor_8h" name="CaloMCPi0Monitor.h" local="yes" imported="no">CaloMCPi0Monitor.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>CaloMCPi0MonitorFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloMCPi0Monitor.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloMoniDst/v1r0/src/</path>
    <filename>_calo_m_c_pi0_monitor_8h</filename>
    <includes id="_calo_moni_alg_8h" name="CaloMoniAlg.h" local="yes" imported="no">CaloMoniAlg.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>CALOEX_CAloMCPi0Monitor_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloMoniAlg.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloMoniDst/v1r0/src/</path>
    <filename>_calo_moni_alg_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CALOMONITOR_CALOMONIALG_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CaloHistoAlg</type>
      <name>CaloMoniAlg</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloMoniDst_dll.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloMoniDst/v1r0/src/</path>
    <filename>_calo_moni_dst__dll_8cpp</filename>
    <member kind="function">
      <type></type>
      <name>LOAD_FACTORY_ENTRIES</name>
      <anchor>a0</anchor>
      <arglist>(CaloMoniDst)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloMoniDst_load.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloMoniDst/v1r0/src/</path>
    <filename>_calo_moni_dst__load_8cpp</filename>
    <member kind="function">
      <type></type>
      <name>DECLARE_FACTORY_ENTRIES</name>
      <anchor>a0</anchor>
      <arglist>(CaloMoniDst)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloPhotonMonitor.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloMoniDst/v1r0/src/</path>
    <filename>_calo_photon_monitor_8cpp</filename>
    <includes id="_calo_photon_monitor_8h" name="CaloPhotonMonitor.h" local="yes" imported="no">CaloPhotonMonitor.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>CaloPhotonMonitorFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloPhotonMonitor.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloMoniDst/v1r0/src/</path>
    <filename>_calo_photon_monitor_8h</filename>
    <includes id="_calo_moni_alg_8h" name="CaloMoniAlg.h" local="yes" imported="no">CaloMoniAlg.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>CALOPHOTONMONITOR_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloPi0Monitor.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloMoniDst/v1r0/src/</path>
    <filename>_calo_pi0_monitor_8cpp</filename>
    <includes id="_calo_pi0_monitor_8h" name="CaloPi0Monitor.h" local="yes" imported="no">CaloPi0Monitor.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>CaloPi0MonitorFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloPi0Monitor.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloMoniDst/v1r0/src/</path>
    <filename>_calo_pi0_monitor_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CALOEX_CALOPi0Monitor_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloPIDsMonitor.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloMoniDst/v1r0/src/</path>
    <filename>_calo_p_i_ds_monitor_8cpp</filename>
    <includes id="_calo_p_i_ds_monitor_8h" name="CaloPIDsMonitor.h" local="yes" imported="no">CaloPIDsMonitor.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>CaloPIDsMonitorFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloPIDsMonitor.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloMoniDst/v1r0/src/</path>
    <filename>_calo_p_i_ds_monitor_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CALOMONITOR_CALOPIDSMONITOR_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloPhotonEstimatorTool.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloPIDs/v2r4/src/</path>
    <filename>_calo_photon_estimator_tool_8cpp</filename>
    <includes id="_calo_photon_estimator_tool_8h" name="CaloPhotonEstimatorTool.h" local="yes" imported="no">CaloPhotonEstimatorTool.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>CaloPhotonEstimatorToolFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloPhotonEstimatorTool.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloPIDs/v2r4/src/</path>
    <filename>_calo_photon_estimator_tool_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CALOPHOTONESTIMATORTOOL_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloPIDs_dll.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloPIDs/v2r4/src/</path>
    <filename>_calo_p_i_ds__dll_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>CaloPIDs_load.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloPIDs/v2r4/src/</path>
    <filename>_calo_p_i_ds__load_8cpp</filename>
    <member kind="function">
      <type></type>
      <name>DECLARE_FACTORY_ENTRIES</name>
      <anchor>a0</anchor>
      <arglist>(CaloPIDs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloPIDsData.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloPIDs/v2r4/src/</path>
    <filename>_calo_p_i_ds_data_8cpp</filename>
    <includes id="_calo_p_i_ds_data_8h" name="CaloPIDsData.h" local="yes" imported="no">CaloPIDsData.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>CaloPIDsDataFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloPIDsData.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloPIDs/v2r4/src/</path>
    <filename>_calo_p_i_ds_data_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CALOPIDS_CALOPIDSDATA_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloTrack2EstimatorAlg.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloPIDs/v2r4/src/</path>
    <filename>_calo_track2_estimator_alg_8cpp</filename>
    <includes id="_calo_track2_estimator_alg_8h" name="CaloTrack2EstimatorAlg.h" local="yes" imported="no">CaloTrack2EstimatorAlg.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>CaloTrack2EstimatorAlgFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloTrack2EstimatorAlg.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloPIDs/v2r4/src/</path>
    <filename>_calo_track2_estimator_alg_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CALOTRACK2ESTIMATORALG_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloTrack2IdAlg.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloPIDs/v2r4/src/</path>
    <filename>_calo_track2_id_alg_8cpp</filename>
    <includes id="_calo_track2_id_alg_8h" name="CaloTrack2IdAlg.h" local="yes" imported="no">CaloTrack2IdAlg.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>CaloTrack2IdAlgFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloTrack2IdAlg.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloPIDs/v2r4/src/</path>
    <filename>_calo_track2_id_alg_8h</filename>
    <namespace>AIDA</namespace>
    <member kind="define">
      <type>#define</type>
      <name>CALOTRACK2IdALG_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloTrackEcalEval.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloPIDs/v2r4/src/</path>
    <filename>_calo_track_ecal_eval_8cpp</filename>
    <includes id="_calo_track_ecal_eval_8h" name="CaloTrackEcalEval.h" local="yes" imported="no">CaloTrackEcalEval.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>CaloTrackEcalEvalFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloTrackEcalEval.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloPIDs/v2r4/src/</path>
    <filename>_calo_track_ecal_eval_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CALOTRACKEcalEval_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloTrackEval.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloPIDs/v2r4/src/</path>
    <filename>_calo_track_eval_8cpp</filename>
    <includes id="_calo_track_eval_8h" name="CaloTrackEval.h" local="yes" imported="no">CaloTrackEval.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>CaloTrackEvalFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloTrackEval.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloPIDs/v2r4/src/</path>
    <filename>_calo_track_eval_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CaloTrackEval_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloTrackHcalEval.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloPIDs/v2r4/src/</path>
    <filename>_calo_track_hcal_eval_8cpp</filename>
    <includes id="_calo_track_hcal_eval_8h" name="CaloTrackHcalEval.h" local="yes" imported="no">CaloTrackHcalEval.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>CaloTrackHcalEvalFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloTrackHcalEval.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloPIDs/v2r4/src/</path>
    <filename>_calo_track_hcal_eval_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CALOTRACKHcalEval_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloTrackPrsEval.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloPIDs/v2r4/src/</path>
    <filename>_calo_track_prs_eval_8cpp</filename>
    <includes id="_calo_track_prs_eval_8h" name="CaloTrackPrsEval.h" local="yes" imported="no">CaloTrackPrsEval.h</includes>
    <namespace>Local</namespace>
    <member kind="function">
      <type>OutputIterator</type>
      <name>transform_ref</name>
      <anchor>a0</anchor>
      <arglist>(InputIterator first, InputIterator last, OutputIterator result, UnaryOperation &amp;op)</arglist>
    </member>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>CaloTrackPrsEvalFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloTrackPrsEval.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloPIDs/v2r4/src/</path>
    <filename>_calo_track_prs_eval_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CALOTRACKPrsEval_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Calo04ECorrection.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo04_e_correction_8cpp</filename>
    <includes id="_calo04_e_correction_8h" name="Calo04ECorrection.h" local="yes" imported="no">Calo04ECorrection.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>Calo04ECorrectionFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Calo04ECorrection.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo04_e_correction_8h</filename>
    <namespace>Calo04ECorrection_Local</namespace>
    <member kind="define">
      <type>#define</type>
      <name>CALOTEST_CALOE04ECORRECTION_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Calo04LCorrection.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo04_l_correction_8cpp</filename>
    <includes id="_calo04_l_correction_8h" name="Calo04LCorrection.h" local="yes" imported="no">Calo04LCorrection.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>Calo04LCorrectionFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Calo04LCorrection.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo04_l_correction_8h</filename>
    <namespace>Calo04LCorrection_Local</namespace>
    <member kind="define">
      <type>#define</type>
      <name>CALOTEST_CALOE04LCORRECTION_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Calo04SCorrection.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo04_s_correction_8cpp</filename>
    <includes id="_calo04_s_correction_8h" name="Calo04SCorrection.h" local="yes" imported="no">Calo04SCorrection.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>Calo04SCorrectionFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Calo04SCorrection.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo04_s_correction_8h</filename>
    <namespace>Calo04SCorrection_Local</namespace>
    <member kind="define">
      <type>#define</type>
      <name>CALOTEST_CALOE04SCORRECTION_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloCluster2TrackAlg.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_cluster2_track_alg_8cpp</filename>
    <includes id="_calo_cluster2_track_alg_8h" name="CaloCluster2TrackAlg.h" local="yes" imported="no">CaloCluster2TrackAlg.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>CaloCluster2TrackAlgFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloCluster2TrackAlg.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_cluster2_track_alg_8h</filename>
    <includes id="_calo_track_alg_8h" name="CaloTrackAlg.h" local="yes" imported="no">CaloTrackAlg.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>CALOREC_CALOCluster2TrackAlg_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloCluster2TrgTrackAlg.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_cluster2_trg_track_alg_8cpp</filename>
    <includes id="_calo_cluster2_trg_track_alg_8h" name="CaloCluster2TrgTrackAlg.h" local="yes" imported="no">CaloCluster2TrgTrackAlg.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>CaloCluster2TrgTrackAlgFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloCluster2TrgTrackAlg.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_cluster2_trg_track_alg_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CALORECO_CALOCLUSTER2TRGTRACKALG_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloClusterCorrect3x3Position.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_cluster_correct3x3_position_8cpp</filename>
    <includes id="_calo_cluster_correct3x3_position_8h" name="CaloClusterCorrect3x3Position.h" local="yes" imported="no">CaloClusterCorrect3x3Position.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>CaloClusterCorrect3x3PositionFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloClusterCorrect3x3Position.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_cluster_correct3x3_position_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CALOEX_CaloClusterCorrect3x3Position_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloClusterCovarianceAlg.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_cluster_covariance_alg_8cpp</filename>
    <includes id="_calo_cluster_covariance_alg_8h" name="CaloClusterCovarianceAlg.h" local="yes" imported="no">CaloClusterCovarianceAlg.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>CALOALGS_CALOCLUSTERCOVARIANCEALG_CPP</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>CaloClusterCovarianceAlgFactory</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloClusterCovarianceAlg.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_cluster_covariance_alg_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>COMPONENT_CALOCLUSTERCOVARIANCEALG_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloClusterisationAlg.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_clusterisation_alg_8cpp</filename>
    <includes id="_calo_clusterisation_alg_8h" name="CaloClusterisationAlg.h" local="yes" imported="no">CaloClusterisationAlg.h</includes>
    <includes id="_clusterisation_functors_8h" name="ClusterisationFunctors.h" local="yes" imported="no">ClusterisationFunctors.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>CALOALGS_CALOCLUSTERISATIONALG_CPP</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>CaloClusterisationAlgFactory</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloClusterisationAlg.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_clusterisation_alg_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CALOCLUSTERISATIONALG_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloClusterResetFractions.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_cluster_reset_fractions_8cpp</filename>
    <includes id="_calo_cluster_reset_fractions_8h" name="CaloClusterResetFractions.h" local="yes" imported="no">CaloClusterResetFractions.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>CaloClusterResetFractionsFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloClusterResetFractions.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_cluster_reset_fractions_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CALOTOOLS_CALOCLUSTERRESETFRACTIONS_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloClusterSOMSelector.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_cluster_s_o_m_selector_8cpp</filename>
    <includes id="_calo_cluster_s_o_m_selector_8h" name="CaloClusterSOMSelector.h" local="yes" imported="no">CaloClusterSOMSelector.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>CaloClusterSOMSelectorFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloClusterSOMSelector.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_cluster_s_o_m_selector_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CALOEX_CALOClusterSOMSelector_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloClusterToolSequence.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_cluster_tool_sequence_8cpp</filename>
    <includes id="_calo_cluster_tool_sequence_8h" name="CaloClusterToolSequence.h" local="yes" imported="no">CaloClusterToolSequence.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>CaloClusterToolSequenceFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloClusterToolSequence.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_cluster_tool_sequence_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CALOTOOLS_CALOCLUSTERTOOLSEQUENCE_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloCorr2TANH.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_corr2_t_a_n_h_8cpp</filename>
    <includes id="_calo_corr2_t_a_n_h_8h" name="CaloCorr2TANH.h" local="yes" imported="no">CaloCorr2TANH.h</includes>
    <namespace>DoubleTanh</namespace>
    <member kind="function">
      <type>double</type>
      <name>doubleTanh</name>
      <anchor>a0</anchor>
      <arglist>(const double cluster, const double seed, const double size, const CaloCorrection::Parameters &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>doubleTanhPrime</name>
      <anchor>a1</anchor>
      <arglist>(const double cluster, const double seed, const double size, const CaloCorrection::Parameters &amp;parameters)</arglist>
    </member>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>CaloCorr2TANHFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloCorr2TANH.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_corr2_t_a_n_h_8h</filename>
    <includes id="_calo_correction_8h" name="CaloCorrection.h" local="yes" imported="no">CaloCorrection.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>CALOTOOLS_CALOCORR2TANH_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloCorrASINH.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_corr_a_s_i_n_h_8cpp</filename>
    <includes id="_calo_corr_a_s_i_n_h_8h" name="CaloCorrASINH.h" local="yes" imported="no">CaloCorrASINH.h</includes>
    <namespace>Hollebeek</namespace>
    <member kind="function">
      <type>long double</type>
      <name>Asinh</name>
      <anchor>a0</anchor>
      <arglist>(long double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>hollebeek</name>
      <anchor>a1</anchor>
      <arglist>(const double cluster, const double seed, const double size, const CaloCorrection::Parameters &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>hollebeekPrime</name>
      <anchor>a2</anchor>
      <arglist>(const double cluster, const double seed, const double size, const CaloCorrection::Parameters &amp;parameters)</arglist>
    </member>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>CaloCorrASINHFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloCorrASINH.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_corr_a_s_i_n_h_8h</filename>
    <includes id="_calo_correction_8h" name="CaloCorrection.h" local="yes" imported="no">CaloCorrection.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>CALOTOOLS_CALOCORRASINH_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloCorrection.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_correction_8cpp</filename>
    <includes id="_calo_correction_8h" name="CaloCorrection.h" local="yes" imported="no">CaloCorrection.h</includes>
  </compound>
  <compound kind="file">
    <name>CaloCorrection.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_correction_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CALOTOLLS_CALOCORRECTION_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloDigitisation.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_digitisation_8h</filename>
    <namespace>CaloDigitisation</namespace>
    <member kind="typedef">
      <type>std::unary_function&lt; MCCaloSummedDeposit *, MCCaloDigit * &gt;</type>
      <name>Digitisation</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloDigitsFilterAlg.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_digits_filter_alg_8cpp</filename>
    <includes id="_calo_digits_filter_alg_8h" name="CaloDigitsFilterAlg.h" local="yes" imported="no">CaloDigitsFilterAlg.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>CaloDigitsFilterAlgFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloDigitsFilterAlg.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_digits_filter_alg_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CALOALGS_CALODIGITSFILTERALG_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloElectronAlg.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_electron_alg_8cpp</filename>
    <includes id="_calo_electron_alg_8h" name="CaloElectronAlg.h" local="yes" imported="no">CaloElectronAlg.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>CaloElectronAlgFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloElectronAlg.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_electron_alg_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CALOALGS_CALOElectronALG_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloExtraDigits.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_extra_digits_8cpp</filename>
    <includes id="_calo_extra_digits_8h" name="CaloExtraDigits.h" local="yes" imported="no">CaloExtraDigits.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>CaloExtraDigitsFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloExtraDigits.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_extra_digits_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CALOTOOLS_CALOEXTRADIGITS_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloHypo2TrackAlg.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_hypo2_track_alg_8cpp</filename>
    <includes id="_calo_hypo2_track_alg_8h" name="CaloHypo2TrackAlg.h" local="yes" imported="no">CaloHypo2TrackAlg.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>CaloHypo2TrackAlgFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloHypo2TrackAlg.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_hypo2_track_alg_8h</filename>
    <includes id="_calo_track_alg_8h" name="CaloTrackAlg.h" local="yes" imported="no">CaloTrackAlg.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>CALOREC_CALOHypo2TrackAlg_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloHypo2TrgTrackAlg.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_hypo2_trg_track_alg_8cpp</filename>
    <includes id="_calo_hypo2_trg_track_alg_8h" name="CaloHypo2TrgTrackAlg.h" local="yes" imported="no">CaloHypo2TrgTrackAlg.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>CaloHypo2TrgTrackAlgFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloHypo2TrgTrackAlg.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_hypo2_trg_track_alg_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CALOREC_CALOHypo2TrgTrackAlg_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloHypoAlg.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_hypo_alg_8cpp</filename>
    <includes id="_calo_hypo_alg_8h" name="CaloHypoAlg.h" local="yes" imported="no">CaloHypoAlg.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>CaloHypoAlgFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloHypoAlg.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_hypo_alg_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CaloAlgs_CaloHypoAlg_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloHypoReShuffleAlg.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_hypo_re_shuffle_alg_8cpp</filename>
    <includes id="_calo_hypo_re_shuffle_alg_8h" name="CaloHypoReShuffleAlg.h" local="yes" imported="no">CaloHypoReShuffleAlg.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>CaloHypoReShuffleAlgFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloHypoReShuffleAlg.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_hypo_re_shuffle_alg_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CALORECO_CALOHYPORESHUFFLEALG_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloHyposMerge.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_hypos_merge_8cpp</filename>
    <includes id="_calo_hypos_merge_8h" name="CaloHyposMerge.h" local="yes" imported="no">CaloHyposMerge.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>CaloHyposMergeFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloHyposMerge.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_hypos_merge_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CALOHYPOSMERGE_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloHypoToolSequence.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_hypo_tool_sequence_8cpp</filename>
    <includes id="_calo_hypo_tool_sequence_8h" name="CaloHypoToolSequence.h" local="yes" imported="no">CaloHypoToolSequence.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>CaloHypoToolSequenceFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloHypoToolSequence.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_hypo_tool_sequence_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CALOTOOLS_CALOHYPOTOOLSEQUENCE_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloLCorrection.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_l_correction_8cpp</filename>
    <includes id="_calo_l_correction_8h" name="CaloLCorrection.h" local="yes" imported="no">CaloLCorrection.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>CaloLCorrectionFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloLCorrection.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_l_correction_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CALOEX_CALOLCorrection_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloLCorrectionSimple.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_l_correction_simple_8cpp</filename>
    <includes id="_calo_l_correction_simple_8h" name="CaloLCorrectionSimple.h" local="yes" imported="no">CaloLCorrectionSimple.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>CaloLCorrectionSimpleFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloLCorrectionSimple.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_l_correction_simple_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CALOTOOLS_CALOLCORRECTIONSIMPLE_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloMergedPi0Alg.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_merged_pi0_alg_8cpp</filename>
    <includes id="_calo_merged_pi0_alg_8h" name="CaloMergedPi0Alg.h" local="yes" imported="no">CaloMergedPi0Alg.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>CaloMergedPi0AlgFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloMergedPi0Alg.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_merged_pi0_alg_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CALOEX_CaloMergedPi0Alg_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloNewECorrection.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_new_e_correction_8cpp</filename>
    <includes id="_calo_new_e_correction_8h" name="CaloNewECorrection.h" local="yes" imported="no">CaloNewECorrection.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>CaloNewECorrectionFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloNewECorrection.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_new_e_correction_8h</filename>
    <namespace>CaloNewECorrection_Local</namespace>
    <member kind="define">
      <type>#define</type>
      <name>CALOTEST_CALOENEWECORRECTION_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloNewLCorrection.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_new_l_correction_8cpp</filename>
    <includes id="_calo_new_l_correction_8h" name="CaloNewLCorrection.h" local="yes" imported="no">CaloNewLCorrection.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>CaloNewLCorrectionFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloNewLCorrection.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_new_l_correction_8h</filename>
    <namespace>CaloNewLCorrection_Local</namespace>
    <member kind="define">
      <type>#define</type>
      <name>CALOTEST_CALOENEWLCORRECTION_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloNewSCorrection.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_new_s_correction_8cpp</filename>
    <includes id="_calo_new_s_correction_8h" name="CaloNewSCorrection.h" local="yes" imported="no">CaloNewSCorrection.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>CaloNewSCorrectionFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloNewSCorrection.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_new_s_correction_8h</filename>
    <namespace>CaloNewSCorrection_Local</namespace>
    <member kind="define">
      <type>#define</type>
      <name>CALOTEST_CALOENEWSCORRECTION_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloPhotonMomentumTool.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_photon_momentum_tool_8cpp</filename>
    <includes id="_calo_photon_momentum_tool_8h" name="CaloPhotonMomentumTool.h" local="yes" imported="no">CaloPhotonMomentumTool.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>CaloPhotonMomentumToolFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloPhotonMomentumTool.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_photon_momentum_tool_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CALOPHOTONMOMENTUMTOOL_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloPrsCorrection.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_prs_correction_8cpp</filename>
    <includes id="_calo_prs_correction_8h" name="CaloPrsCorrection.h" local="yes" imported="no">CaloPrsCorrection.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>CaloPrsCorrectionFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloPrsCorrection.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_prs_correction_8h</filename>
    <namespace>Local</namespace>
    <class kind="class">Local::DigitFromCalo</class>
    <member kind="define">
      <type>#define</type>
      <name>CALOEX_CALOPrsCorrection_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloReco_dll.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_reco__dll_8cpp</filename>
    <member kind="function">
      <type></type>
      <name>LOAD_FACTORY_ENTRIES</name>
      <anchor>a0</anchor>
      <arglist>(CaloReco)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloReco_load.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_reco__load_8cpp</filename>
    <member kind="function">
      <type></type>
      <name>DECLARE_FACTORY_ENTRIES</name>
      <anchor>a0</anchor>
      <arglist>(CaloReco)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloRemoveMomentum.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_remove_momentum_8cpp</filename>
    <includes id="_calo_remove_momentum_8h" name="CaloRemoveMomentum.h" local="yes" imported="no">CaloRemoveMomentum.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>CaloRemoveMomentumFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloRemoveMomentum.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_remove_momentum_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CALOEX_CALORemoveMomentum_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloSCorrectionArcSinh.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_s_correction_arc_sinh_8cpp</filename>
    <includes id="_calo_s_correction_arc_sinh_8h" name="CaloSCorrectionArcSinh.h" local="yes" imported="no">CaloSCorrectionArcSinh.h</includes>
    <member kind="function">
      <type>long double</type>
      <name>Asinh</name>
      <anchor>a2</anchor>
      <arglist>(const long double x)</arglist>
    </member>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>CaloSCorrectionArcSinhFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloSCorrectionArcSinh.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_s_correction_arc_sinh_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CALOTOOLS_CALOSCORRECTIONARCSINH_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloSCorrectionBarycentre.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_s_correction_barycentre_8cpp</filename>
    <includes id="_calo_s_correction_barycentre_8h" name="CaloSCorrectionBarycentre.h" local="yes" imported="no">CaloSCorrectionBarycentre.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>CaloSCorrectionBarycentreFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloSCorrectionBarycentre.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_s_correction_barycentre_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CALOTOOLS_CALOSCORRECTIONBARYCENTRE_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloSCorrectionCellCenter.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_s_correction_cell_center_8cpp</filename>
    <includes id="_calo_s_correction_cell_center_8h" name="CaloSCorrectionCellCenter.h" local="yes" imported="no">CaloSCorrectionCellCenter.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>CaloSCorrectionCellCenterFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloSCorrectionCellCenter.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_s_correction_cell_center_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CALOTOOLS_CALOSCORRECTIONCELLCENTER_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloSCorrectionComplex.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_s_correction_complex_8cpp</filename>
    <includes id="_calo_s_correction_complex_8h" name="CaloSCorrectionComplex.h" local="yes" imported="no">CaloSCorrectionComplex.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>CaloSCorrectionComplexFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloSCorrectionComplex.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_s_correction_complex_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CALOTOOLS_CALOSCORRECTIONCOMPLEX_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloSCorrectionDoubleTanh.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_s_correction_double_tanh_8cpp</filename>
    <includes id="_calo_s_correction_double_tanh_8h" name="CaloSCorrectionDoubleTanh.h" local="yes" imported="no">CaloSCorrectionDoubleTanh.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>CaloSCorrectionDoubleTanhFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloSCorrectionDoubleTanh.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_s_correction_double_tanh_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CALOTOOLS_CALOSCORRECTIONDOUBLETANH_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloSCorrectionFinal.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_s_correction_final_8cpp</filename>
    <includes id="_calo_s_correction_final_8h" name="CaloSCorrectionFinal.h" local="yes" imported="no">CaloSCorrectionFinal.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>CaloSCorrectionFinalFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloSCorrectionFinal.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_s_correction_final_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CALOTOOLS_CALOSCORRECTIONFINAL_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloSCorrectionLinear.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_s_correction_linear_8cpp</filename>
    <includes id="_calo_s_correction_linear_8h" name="CaloSCorrectionLinear.h" local="yes" imported="no">CaloSCorrectionLinear.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>CaloSCorrectionLinearFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloSCorrectionLinear.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_s_correction_linear_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CALOTOOLS_CALOSCORRECTIONLINEAR_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloSCorrectionSequence.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_s_correction_sequence_8cpp</filename>
    <includes id="_calo_s_correction_sequence_8h" name="CaloSCorrectionSequence.h" local="yes" imported="no">CaloSCorrectionSequence.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>CaloSCorrectionSequenceFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloSCorrectionSequence.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_s_correction_sequence_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CALOTOOLS_CALOSCORRECTIONSEQUENCE_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloSelectNeutralCluster.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_select_neutral_cluster_8cpp</filename>
    <includes id="_calo_select_neutral_cluster_8h" name="CaloSelectNeutralCluster.h" local="yes" imported="no">CaloSelectNeutralCluster.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>CaloSelectNeutralClusterFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloSelectNeutralCluster.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_select_neutral_cluster_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CALOREC_CALOSELECTNeutralCLUSTER_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloSelector.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_selector_8cpp</filename>
    <includes id="_calo_selector_8h" name="CaloSelector.h" local="yes" imported="no">CaloSelector.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>CaloSelectorFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloSelector.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_selector_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CALOTOOLS_CALOSELECTOR_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloSelectorAND.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_selector_a_n_d_8cpp</filename>
    <includes id="_calo_selector_a_n_d_8h" name="CaloSelectorAND.h" local="yes" imported="no">CaloSelectorAND.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>CaloSelectorANDFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloSelectorAND.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_selector_a_n_d_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CALOTOOLS_CALOSELECTORAND_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloSelectorNOT.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_selector_n_o_t_8cpp</filename>
    <includes id="_calo_selector_n_o_t_8h" name="CaloSelectorNOT.h" local="yes" imported="no">CaloSelectorNOT.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>CaloSelectorNOTFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloSelectorNOT.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_selector_n_o_t_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CALOTOOLS_CALOSELECTORNOT_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloSelectorOR.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_selector_o_r_8cpp</filename>
    <includes id="_calo_selector_o_r_8h" name="CaloSelectorOR.h" local="yes" imported="no">CaloSelectorOR.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>CaloSelectorORFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloSelectorOR.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_selector_o_r_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CALOTOOLS_CALOSELECTOROR_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloSharedCellAlg.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_shared_cell_alg_8cpp</filename>
    <includes id="_calo_shared_cell_alg_8h" name="CaloSharedCellAlg.h" local="yes" imported="no">CaloSharedCellAlg.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>CALOALGS_CALOSHAREDECELLALG_CPP</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>CaloSharedCellAlgFactory</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloSharedCellAlg.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_shared_cell_alg_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CALOALGS_CALOSHAREDCELLALG_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloSingleGammaTool.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_single_gamma_tool_8cpp</filename>
    <includes id="_calo_single_gamma_tool_8h" name="CaloSingleGammaTool.h" local="yes" imported="no">CaloSingleGammaTool.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>CaloSingleGammaToolFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloSingleGammaTool.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_single_gamma_tool_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CALOSINGLEGAMMATOOL_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloSinglePhotonAlg.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_single_photon_alg_8cpp</filename>
    <includes id="_calo_single_photon_alg_8h" name="CaloSinglePhotonAlg.h" local="yes" imported="no">CaloSinglePhotonAlg.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>CaloSinglePhotonAlgFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloSinglePhotonAlg.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_single_photon_alg_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CALOALGS_CALOSINGLEPHOTONALG_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloSShape.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_s_shape_8cpp</filename>
    <includes id="_calo_s_shape_8h" name="CaloSShape.h" local="yes" imported="no">CaloSShape.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>CaloSShapeFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloSShape.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_s_shape_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CALOSSHAPE_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloTrackAlg.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_track_alg_8cpp</filename>
    <includes id="_calo_track_alg_8h" name="CaloTrackAlg.h" local="yes" imported="no">CaloTrackAlg.h</includes>
  </compound>
  <compound kind="file">
    <name>CaloTrackAlg.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_track_alg_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CALOREC_CALOTrackAlg_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloTrackMatchBase.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_track_match_base_8cpp</filename>
    <includes id="_calo_track_match_base_8h" name="CaloTrackMatchBase.h" local="yes" imported="no">CaloTrackMatchBase.h</includes>
  </compound>
  <compound kind="file">
    <name>CaloTrackMatchBase.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_track_match_base_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CALOTRACKTOOLS_CALOTRACKMATCHBASE_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloTrackMatchBrem2.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_track_match_brem2_8cpp</filename>
    <includes id="_calo_track_match_brem2_8h" name="CaloTrackMatchBrem2.h" local="yes" imported="no">CaloTrackMatchBrem2.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>CaloTrackMatchBrem2Factory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloTrackMatchBrem2.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_track_match_brem2_8h</filename>
    <includes id="_calo_track_match_base_8h" name="CaloTrackMatchBase.h" local="yes" imported="no">CaloTrackMatchBase.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>CALOTRACKTOOLS_CALOTRACKMATCHBremm_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloTrackMatchBremm.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_track_match_bremm_8cpp</filename>
    <includes id="_calo_track_match_bremm_8h" name="CaloTrackMatchBremm.h" local="yes" imported="no">CaloTrackMatchBremm.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>CaloTrackMatchBremmFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloTrackMatchBremm.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_track_match_bremm_8h</filename>
    <includes id="_calo_track_match_base_8h" name="CaloTrackMatchBase.h" local="yes" imported="no">CaloTrackMatchBase.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>CALOTRACKTOOLS_CALOTRACKMATCHBremm_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloTrackMatchElectron.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_track_match_electron_8cpp</filename>
    <includes id="_calo_track_match_electron_8h" name="CaloTrackMatchElectron.h" local="yes" imported="no">CaloTrackMatchElectron.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>CaloTrackMatchElectronFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloTrackMatchElectron.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_track_match_electron_8h</filename>
    <includes id="_calo_track_match_base_8h" name="CaloTrackMatchBase.h" local="yes" imported="no">CaloTrackMatchBase.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>CALOTRACKTOOLS_CALOTRACKMATCHELECTRON_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloTrackMatchPhoton.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_track_match_photon_8cpp</filename>
    <includes id="_calo_track_match_photon_8h" name="CaloTrackMatchPhoton.h" local="yes" imported="no">CaloTrackMatchPhoton.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>CaloTrackMatchPhotonFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloTrackMatchPhoton.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_track_match_photon_8h</filename>
    <includes id="_calo_track_match_base_8h" name="CaloTrackMatchBase.h" local="yes" imported="no">CaloTrackMatchBase.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>CALOTRACKTOOLS_CALOTRACKMATCHPHOTON_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloTrgSelectNeutralCluster.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_trg_select_neutral_cluster_8cpp</filename>
    <includes id="_calo_trg_select_neutral_cluster_8h" name="CaloTrgSelectNeutralCluster.h" local="yes" imported="no">CaloTrgSelectNeutralCluster.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>CaloTrgSelectNeutralClusterFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaloTrgSelectNeutralCluster.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_calo_trg_select_neutral_cluster_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CALOREC_CALOTRGSELECTNeutralCLUSTER_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CelAutoTaggedCell.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_cel_auto_tagged_cell_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CALOCA_CELAUTOTAGGEDCEL_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CellularAutomaton.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_cellular_automaton_8cpp</filename>
    <includes id="_cellular_automaton_8h" name="CellularAutomaton.h" local="yes" imported="no">CellularAutomaton.h</includes>
    <includes id="_tagged_cell_functor_8h" name="TaggedCellFunctor.h" local="yes" imported="no">TaggedCellFunctor.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>CALOCA_CELLULARAUTOMATON_CPP</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>CellularAutomatonFactory</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CellularAutomaton.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_cellular_automaton_8h</filename>
    <includes id="_cel_auto_tagged_cell_8h" name="CelAutoTaggedCell.h" local="yes" imported="no">CelAutoTaggedCell.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>CALOCA_CELLULARAUTOMATON_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ClusterCovarianceMatrixTool.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_cluster_covariance_matrix_tool_8cpp</filename>
    <includes id="_cluster_covariance_matrix_tool_8h" name="ClusterCovarianceMatrixTool.h" local="yes" imported="no">ClusterCovarianceMatrixTool.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>ClusterCovarianceMatrixToolFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ClusterCovarianceMatrixTool.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_cluster_covariance_matrix_tool_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CLUSTERCOVARIANCEMATRIXTOOL_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ClusterisationFunctors.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_clusterisation_functors_8h</filename>
    <namespace>ClusterisationFunctors</namespace>
    <member kind="define">
      <type>#define</type>
      <name>CALOALGS_CLUSTERISATIONFUNCTORS_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>OutputIterator</type>
      <name>transform_ref</name>
      <anchor>a1</anchor>
      <arglist>(InputIterator first, InputIterator last, OutputIterator result, UnaryOperation &amp;op)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ClusterSpreadTool.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_cluster_spread_tool_8cpp</filename>
    <includes id="_cluster_spread_tool_8h" name="ClusterSpreadTool.h" local="yes" imported="no">ClusterSpreadTool.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>ClusterSpreadToolFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ClusterSpreadTool.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_cluster_spread_tool_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CALOTOOLS_CLUSTERSPREADTOOL_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SubClusterSelector3x3.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_sub_cluster_selector3x3_8cpp</filename>
    <includes id="_sub_cluster_selector3x3_8h" name="SubClusterSelector3x3.h" local="yes" imported="no">SubClusterSelector3x3.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>SubClusterSelector3x3Factory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SubClusterSelector3x3.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_sub_cluster_selector3x3_8h</filename>
    <includes id="_sub_cluster_selector_base_8h" name="SubClusterSelectorBase.h" local="yes" imported="no">SubClusterSelectorBase.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>CALOTOOLS_SUBCLUSTERSELECTOR3x3_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SubClusterSelectorAll.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_sub_cluster_selector_all_8cpp</filename>
    <includes id="_sub_cluster_selector_all_8h" name="SubClusterSelectorAll.h" local="yes" imported="no">SubClusterSelectorAll.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>SubClusterSelectorAllFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SubClusterSelectorAll.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_sub_cluster_selector_all_8h</filename>
    <includes id="_sub_cluster_selector_base_8h" name="SubClusterSelectorBase.h" local="yes" imported="no">SubClusterSelectorBase.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>CALOTOOLS_SUBCLUSTERSELECTORALL_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SubClusterSelectorBase.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_sub_cluster_selector_base_8cpp</filename>
    <includes id="_sub_cluster_selector_base_8h" name="SubClusterSelectorBase.h" local="yes" imported="no">SubClusterSelectorBase.h</includes>
  </compound>
  <compound kind="file">
    <name>SubClusterSelectorBase.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_sub_cluster_selector_base_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CALOTOOLS_SUBCLUSTERSELECTORBASE_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SubClusterSelectorMax2x2.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_sub_cluster_selector_max2x2_8cpp</filename>
    <includes id="_sub_cluster_selector_max2x2_8h" name="SubClusterSelectorMax2x2.h" local="yes" imported="no">SubClusterSelectorMax2x2.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>SubClusterSelectorMax2x2Factory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SubClusterSelectorMax2x2.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_sub_cluster_selector_max2x2_8h</filename>
    <includes id="_sub_cluster_selector_base_8h" name="SubClusterSelectorBase.h" local="yes" imported="no">SubClusterSelectorBase.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>CALOTOOLS_SUBCLUSTERSELECTORMAX2X2_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SubClusterSelectorNeighbors.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_sub_cluster_selector_neighbors_8cpp</filename>
    <includes id="_sub_cluster_selector_neighbors_8h" name="SubClusterSelectorNeighbors.h" local="yes" imported="no">SubClusterSelectorNeighbors.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>SubClusterSelectorNeighborsFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SubClusterSelectorNeighbors.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_sub_cluster_selector_neighbors_8h</filename>
    <includes id="_sub_cluster_selector_base_8h" name="SubClusterSelectorBase.h" local="yes" imported="no">SubClusterSelectorBase.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>CALOTOOLS_SUBCLUSTERSELECTORNEIGHBORS_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SubClusterSelectorSwissCross.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_sub_cluster_selector_swiss_cross_8cpp</filename>
    <includes id="_sub_cluster_selector_swiss_cross_8h" name="SubClusterSelectorSwissCross.h" local="yes" imported="no">SubClusterSelectorSwissCross.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>SubClusterSelectorSwissCrossFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SubClusterSelectorSwissCross.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_sub_cluster_selector_swiss_cross_8h</filename>
    <includes id="_sub_cluster_selector_base_8h" name="SubClusterSelectorBase.h" local="yes" imported="no">SubClusterSelectorBase.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>CALOTOOLS_SUBCLUSTERSELECTORSwissCross_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TaggedCellFunctor.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>_tagged_cell_functor_8h</filename>
    <includes id="_cel_auto_tagged_cell_8h" name="CelAutoTaggedCell.h" local="yes" imported="no">CelAutoTaggedCell.h</includes>
    <namespace>TaggedCellFunctor</namespace>
    <member kind="define">
      <type>#define</type>
      <name>CALOCA_TAGGEDCELLFUNCTOR_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IITAmplifierResponse.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITAlgorithms/v14r4/ITAlgorithms/</path>
    <filename>_i_i_t_amplifier_response_8h</filename>
  </compound>
  <compound kind="file">
    <name>IITBaryCentreEstimator.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITAlgorithms/v14r4/ITAlgorithms/</path>
    <filename>_i_i_t_bary_centre_estimator_8h</filename>
  </compound>
  <compound kind="file">
    <name>IITChargeSharingTool.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITAlgorithms/v14r4/ITAlgorithms/</path>
    <filename>_i_i_t_charge_sharing_tool_8h</filename>
  </compound>
  <compound kind="file">
    <name>IITClusterErrorEstimator.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITAlgorithms/v14r4/ITAlgorithms/</path>
    <filename>_i_i_t_cluster_error_estimator_8h</filename>
  </compound>
  <compound kind="file">
    <name>IITCrossTalk.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITAlgorithms/v14r4/ITAlgorithms/</path>
    <filename>_i_i_t_cross_talk_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>ITALGORITHMS_IITCrossTalk_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IITDepositedCharge.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITAlgorithms/v14r4/ITAlgorithms/</path>
    <filename>_i_i_t_deposited_charge_8h</filename>
  </compound>
  <compound kind="file">
    <name>IITEffCalculator.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITAlgorithms/v14r4/ITAlgorithms/</path>
    <filename>_i_i_t_eff_calculator_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>ITALGORITHMS_IITEFFCALCULATOR_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IITSignalToNoiseTool.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITAlgorithms/v14r4/ITAlgorithms/</path>
    <filename>_i_i_t_signal_to_noise_tool_8h</filename>
  </compound>
  <compound kind="file">
    <name>ITAmplifierResponse.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITAlgorithms/v14r4/ITAlgorithms/</path>
    <filename>_i_t_amplifier_response_8h</filename>
    <includes id="_i_i_t_amplifier_response_8h" name="IITAmplifierResponse.h" local="yes" imported="no">ITAlgorithms/IITAmplifierResponse.h</includes>
  </compound>
  <compound kind="file">
    <name>ITChargeSharingTool.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITAlgorithms/v14r4/ITAlgorithms/</path>
    <filename>_i_t_charge_sharing_tool_8h</filename>
    <includes id="_i_i_t_charge_sharing_tool_8h" name="IITChargeSharingTool.h" local="yes" imported="no">ITAlgorithms/IITChargeSharingTool.h</includes>
  </compound>
  <compound kind="file">
    <name>ITClusterErrorEstimator.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITAlgorithms/v14r4/ITAlgorithms/</path>
    <filename>_i_t_cluster_error_estimator_8h</filename>
    <includes id="_i_i_t_cluster_error_estimator_8h" name="IITClusterErrorEstimator.h" local="yes" imported="no">ITAlgorithms/IITClusterErrorEstimator.h</includes>
  </compound>
  <compound kind="file">
    <name>ITCrossTalk.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITAlgorithms/v14r4/ITAlgorithms/</path>
    <filename>_i_t_cross_talk_8h</filename>
    <includes id="_i_i_t_cross_talk_8h" name="IITCrossTalk.h" local="yes" imported="no">ITAlgorithms/IITCrossTalk.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>_ITDepositedCharge_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ITDepositedCharge.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITAlgorithms/v14r4/ITAlgorithms/</path>
    <filename>_i_t_deposited_charge_8h</filename>
    <includes id="_i_i_t_deposited_charge_8h" name="IITDepositedCharge.h" local="yes" imported="no">ITAlgorithms/IITDepositedCharge.h</includes>
  </compound>
  <compound kind="file">
    <name>ITGeantDepositedCharge.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITAlgorithms/v14r4/ITAlgorithms/</path>
    <filename>_i_t_geant_deposited_charge_8h</filename>
    <includes id="_i_i_t_deposited_charge_8h" name="IITDepositedCharge.h" local="yes" imported="no">ITAlgorithms/IITDepositedCharge.h</includes>
  </compound>
  <compound kind="file">
    <name>ITSignalToNoiseTool.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITAlgorithms/v14r4/ITAlgorithms/</path>
    <filename>_i_t_signal_to_noise_tool_8h</filename>
    <includes id="_i_i_t_signal_to_noise_tool_8h" name="IITSignalToNoiseTool.h" local="yes" imported="no">ITAlgorithms/IITSignalToNoiseTool.h</includes>
  </compound>
  <compound kind="file">
    <name>ITWeightedMean.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITAlgorithms/v14r4/ITAlgorithms/</path>
    <filename>_i_t_weighted_mean_8h</filename>
    <includes id="_i_i_t_bary_centre_estimator_8h" name="IITBaryCentreEstimator.h" local="yes" imported="no">ITAlgorithms/IITBaryCentreEstimator.h</includes>
  </compound>
  <compound kind="file">
    <name>GSLSpline.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITAlgorithms/v14r4/src/</path>
    <filename>_g_s_l_spline_8cpp</filename>
    <includes id="_g_s_l_spline_8h" name="GSLSpline.h" local="yes" imported="no">GSLSpline.h</includes>
  </compound>
  <compound kind="file">
    <name>GSLSpline.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITAlgorithms/v14r4/src/</path>
    <filename>_g_s_l_spline_8h</filename>
  </compound>
  <compound kind="file">
    <name>ITAlgorithms_dll.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITAlgorithms/v14r4/src/</path>
    <filename>_i_t_algorithms__dll_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>ITAlgorithms_load.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITAlgorithms/v14r4/src/</path>
    <filename>_i_t_algorithms__load_8cpp</filename>
    <member kind="define">
      <type>#define</type>
      <name>DLL_DECL_SERVICE</name>
      <anchor>a0</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DLL_DECL_CONVERTER</name>
      <anchor>a1</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DLL_DECL_ALGORITHM</name>
      <anchor>a2</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DLL_DECL_TOOL</name>
      <anchor>a3</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ITAlgorithms_load</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ITAlgorithms_loadRef</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ITAmplifierResponse.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITAlgorithms/v14r4/src/</path>
    <filename>_i_t_amplifier_response_8cpp</filename>
    <includes id="_i_t_amplifier_response_8h" name="ITAmplifierResponse.h" local="yes" imported="no">ITAlgorithms/ITAmplifierResponse.h</includes>
    <includes id="_g_s_l_spline_8h" name="GSLSpline.h" local="yes" imported="no">GSLSpline.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>ITAmplifierResponseFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ITChargeSharingTool.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITAlgorithms/v14r4/src/</path>
    <filename>_i_t_charge_sharing_tool_8cpp</filename>
    <includes id="_i_t_charge_sharing_tool_8h" name="ITChargeSharingTool.h" local="yes" imported="no">ITAlgorithms/ITChargeSharingTool.h</includes>
    <includes id="_g_s_l_spline_8h" name="GSLSpline.h" local="yes" imported="no">GSLSpline.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>ITChargeSharingToolFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ITClusterCreator.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITAlgorithms/v14r4/src/</path>
    <filename>_i_t_cluster_creator_8cpp</filename>
    <includes id="_i_t_cluster_creator_8h" name="ITClusterCreator.h" local="yes" imported="no">ITClusterCreator.h</includes>
    <includes id="_i_i_t_signal_to_noise_tool_8h" name="IITSignalToNoiseTool.h" local="yes" imported="no">ITAlgorithms/IITSignalToNoiseTool.h</includes>
    <includes id="_i_i_t_bary_centre_estimator_8h" name="IITBaryCentreEstimator.h" local="yes" imported="no">ITAlgorithms/IITBaryCentreEstimator.h</includes>
    <includes id="_i_i_t_cluster_error_estimator_8h" name="IITClusterErrorEstimator.h" local="yes" imported="no">ITAlgorithms/IITClusterErrorEstimator.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>ITClusterCreatorFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ITClusterCreator.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITAlgorithms/v14r4/src/</path>
    <filename>_i_t_cluster_creator_8h</filename>
  </compound>
  <compound kind="file">
    <name>ITClusterErrorEstimator.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITAlgorithms/v14r4/src/</path>
    <filename>_i_t_cluster_error_estimator_8cpp</filename>
    <includes id="_i_t_cluster_error_estimator_8h" name="ITClusterErrorEstimator.h" local="yes" imported="no">ITAlgorithms/ITClusterErrorEstimator.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>ITClusterErrorEstimatorFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ITClusterSmearer.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITAlgorithms/v14r4/src/</path>
    <filename>_i_t_cluster_smearer_8cpp</filename>
    <includes id="_i_t_cluster_smearer_8h" name="ITClusterSmearer.h" local="yes" imported="no">ITClusterSmearer.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>ITClusterSmearerFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ITClusterSmearer.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITAlgorithms/v14r4/src/</path>
    <filename>_i_t_cluster_smearer_8h</filename>
  </compound>
  <compound kind="file">
    <name>ITCrossTalk.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITAlgorithms/v14r4/src/</path>
    <filename>_i_t_cross_talk_8cpp</filename>
    <includes id="_i_t_cross_talk_8h" name="ITCrossTalk.h" local="yes" imported="no">ITAlgorithms/ITCrossTalk.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>ITCrossTalkFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ITDepositedCharge.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITAlgorithms/v14r4/src/</path>
    <filename>_i_t_deposited_charge_8cpp</filename>
    <includes id="_i_t_deposited_charge_8h" name="ITDepositedCharge.h" local="yes" imported="no">ITAlgorithms/ITDepositedCharge.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>ITDepositedChargeFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ITDigitCreator.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITAlgorithms/v14r4/src/</path>
    <filename>_i_t_digit_creator_8cpp</filename>
    <includes id="_i_i_t_eff_calculator_8h" name="IITEffCalculator.h" local="yes" imported="no">ITAlgorithms/IITEffCalculator.h</includes>
    <includes id="_i_i_t_cross_talk_8h" name="IITCrossTalk.h" local="yes" imported="no">ITAlgorithms/IITCrossTalk.h</includes>
    <includes id="_i_i_t_signal_to_noise_tool_8h" name="IITSignalToNoiseTool.h" local="yes" imported="no">ITAlgorithms/IITSignalToNoiseTool.h</includes>
    <includes id="_i_t_digit_creator_8h" name="ITDigitCreator.h" local="yes" imported="no">ITDigitCreator.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>ITDigitCreatorFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ITDigitCreator.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITAlgorithms/v14r4/src/</path>
    <filename>_i_t_digit_creator_8h</filename>
  </compound>
  <compound kind="file">
    <name>ITDigitInPool.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITAlgorithms/v14r4/src/</path>
    <filename>_i_t_digit_in_pool_8h</filename>
    <member kind="typedef">
      <type>std::vector&lt; ITDigitInPool &gt;</type>
      <name>ITDigitPool</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ITEffCalculator.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITAlgorithms/v14r4/src/</path>
    <filename>_i_t_eff_calculator_8cpp</filename>
    <includes id="_i_t_eff_calculator_8h" name="ITEffCalculator.h" local="yes" imported="no">ITEffCalculator.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>ITEffCalculatorFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ITEffCalculator.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITAlgorithms/v14r4/src/</path>
    <filename>_i_t_eff_calculator_8h</filename>
    <includes id="_i_i_t_eff_calculator_8h" name="IITEffCalculator.h" local="yes" imported="no">ITAlgorithms/IITEffCalculator.h</includes>
  </compound>
  <compound kind="file">
    <name>ITGeantDepositedCharge.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITAlgorithms/v14r4/src/</path>
    <filename>_i_t_geant_deposited_charge_8cpp</filename>
    <includes id="_i_t_geant_deposited_charge_8h" name="ITGeantDepositedCharge.h" local="yes" imported="no">ITAlgorithms/ITGeantDepositedCharge.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>ITGeantDepositedChargeFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ITInitialization.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITAlgorithms/v14r4/src/</path>
    <filename>_i_t_initialization_8cpp</filename>
    <includes id="_i_t_initialization_8h" name="ITInitialization.h" local="yes" imported="no">ITInitialization.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>ITInitializationFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ITInitialization.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITAlgorithms/v14r4/src/</path>
    <filename>_i_t_initialization_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>ITINITIALISATION_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ITSignalToNoiseTool.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITAlgorithms/v14r4/src/</path>
    <filename>_i_t_signal_to_noise_tool_8cpp</filename>
    <includes id="_i_t_signal_to_noise_tool_8h" name="ITSignalToNoiseTool.h" local="yes" imported="no">ITAlgorithms/ITSignalToNoiseTool.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>ITSignalToNoiseToolFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ITSummaryCreator.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITAlgorithms/v14r4/src/</path>
    <filename>_i_t_summary_creator_8cpp</filename>
    <includes id="_i_t_summary_creator_8h" name="ITSummaryCreator.h" local="yes" imported="no">ITSummaryCreator.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>ITSummaryCreatorFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ITSummaryCreator.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITAlgorithms/v14r4/src/</path>
    <filename>_i_t_summary_creator_8h</filename>
  </compound>
  <compound kind="file">
    <name>ITWeightedMean.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITAlgorithms/v14r4/src/</path>
    <filename>_i_t_weighted_mean_8cpp</filename>
    <includes id="_i_t_weighted_mean_8h" name="ITWeightedMean.h" local="yes" imported="no">ITAlgorithms/ITWeightedMean.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>ITWeightedMeanFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MCITDepositCreator.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITAlgorithms/v14r4/src/</path>
    <filename>_m_c_i_t_deposit_creator_8cpp</filename>
    <includes id="_m_c_i_t_deposit_creator_8h" name="MCITDepositCreator.h" local="yes" imported="no">MCITDepositCreator.h</includes>
    <includes id="_i_i_t_charge_sharing_tool_8h" name="IITChargeSharingTool.h" local="yes" imported="no">ITAlgorithms/IITChargeSharingTool.h</includes>
    <includes id="_i_i_t_amplifier_response_8h" name="IITAmplifierResponse.h" local="yes" imported="no">ITAlgorithms/IITAmplifierResponse.h</includes>
    <includes id="_i_i_t_deposited_charge_8h" name="IITDepositedCharge.h" local="yes" imported="no">ITAlgorithms/IITDepositedCharge.h</includes>
    <includes id="_i_i_t_signal_to_noise_tool_8h" name="IITSignalToNoiseTool.h" local="yes" imported="no">ITAlgorithms/IITSignalToNoiseTool.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>MCITDepositCreatorFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MCITDepositCreator.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITAlgorithms/v14r4/src/</path>
    <filename>_m_c_i_t_deposit_creator_8h</filename>
  </compound>
  <compound kind="file">
    <name>MCITDigitCreator.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITAlgorithms/v14r4/src/</path>
    <filename>_m_c_i_t_digit_creator_8cpp</filename>
    <includes id="_m_c_i_t_digit_creator_8h" name="MCITDigitCreator.h" local="yes" imported="no">MCITDigitCreator.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>MCITDigitCreatorFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MCITDigitCreator.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITAlgorithms/v14r4/src/</path>
    <filename>_m_c_i_t_digit_creator_8h</filename>
  </compound>
  <compound kind="file">
    <name>STL1ClusterCreator.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITAlgorithms/v14r4/src/</path>
    <filename>_s_t_l1_cluster_creator_8cpp</filename>
    <includes id="_s_t_l1_cluster_creator_8h" name="STL1ClusterCreator.h" local="yes" imported="no">STL1ClusterCreator.h</includes>
    <includes id="_i_i_t_signal_to_noise_tool_8h" name="IITSignalToNoiseTool.h" local="yes" imported="no">ITAlgorithms/IITSignalToNoiseTool.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>STL1ClusterCreatorFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>STL1ClusterCreator.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITAlgorithms/v14r4/src/</path>
    <filename>_s_t_l1_cluster_creator_8h</filename>
    <includes id="_i_t_digit_in_pool_8h" name="ITDigitInPool.h" local="yes" imported="no">ITDigitInPool.h</includes>
  </compound>
  <compound kind="file">
    <name>HistFun.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITCheckers/v2r3/src/</path>
    <filename>_hist_fun_8h</filename>
    <namespace>HistFun</namespace>
    <member kind="function">
      <type>void</type>
      <name>unBookVector</name>
      <anchor>a0</anchor>
      <arglist>(std::vector&lt; TYPE &gt; &amp;histoVector, IHistogramSvc *hSvc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eraseVector</name>
      <anchor>a1</anchor>
      <arglist>(std::vector&lt; TYPE &gt; &amp;histoVector)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ITCheckers_dll.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITCheckers/v2r3/src/</path>
    <filename>_i_t_checkers__dll_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>ITCheckers_load.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITCheckers/v2r3/src/</path>
    <filename>_i_t_checkers__load_8cpp</filename>
    <member kind="define">
      <type>#define</type>
      <name>DLL_DECL_SERVICE</name>
      <anchor>a0</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DLL_DECL_CONVERTER</name>
      <anchor>a1</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DLL_DECL_ALGORITHM</name>
      <anchor>a2</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DLL_DECL_TOOL</name>
      <anchor>a3</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ITCheckers_load</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ITCheckers_loadRef</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ITClusterChecker.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITCheckers/v2r3/src/</path>
    <filename>_i_t_cluster_checker_8cpp</filename>
    <includes id="_i_t_cluster_checker_8h" name="ITClusterChecker.h" local="yes" imported="no">ITClusterChecker.h</includes>
    <includes id="_i_i_t_signal_to_noise_tool_8h" name="IITSignalToNoiseTool.h" local="yes" imported="no">ITAlgorithms/IITSignalToNoiseTool.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>ITClusterCheckerFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ITClusterChecker.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITCheckers/v2r3/src/</path>
    <filename>_i_t_cluster_checker_8h</filename>
  </compound>
  <compound kind="file">
    <name>ITClusterResolution.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITCheckers/v2r3/src/</path>
    <filename>_i_t_cluster_resolution_8cpp</filename>
    <includes id="_i_t_cluster_resolution_8h" name="ITClusterResolution.h" local="yes" imported="no">ITClusterResolution.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>ITClusterResolutionFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ITClusterResolution.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITCheckers/v2r3/src/</path>
    <filename>_i_t_cluster_resolution_8h</filename>
  </compound>
  <compound kind="file">
    <name>ITDigitChecker.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITCheckers/v2r3/src/</path>
    <filename>_i_t_digit_checker_8cpp</filename>
    <includes id="_i_t_digit_checker_8h" name="ITDigitChecker.h" local="yes" imported="no">ITDigitChecker.h</includes>
    <includes id="_i_i_t_signal_to_noise_tool_8h" name="IITSignalToNoiseTool.h" local="yes" imported="no">ITAlgorithms/IITSignalToNoiseTool.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>ITDigitCheckerFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ITDigitChecker.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITCheckers/v2r3/src/</path>
    <filename>_i_t_digit_checker_8h</filename>
  </compound>
  <compound kind="file">
    <name>ITDigitConsistencyMonitor.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITCheckers/v2r3/src/</path>
    <filename>_i_t_digit_consistency_monitor_8cpp</filename>
    <includes id="_i_t_digit_consistency_monitor_8h" name="ITDigitConsistencyMonitor.h" local="yes" imported="no">ITDigitConsistencyMonitor.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>ITDigitConsistencyMonitorFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ITDigitConsistencyMonitor.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITCheckers/v2r3/src/</path>
    <filename>_i_t_digit_consistency_monitor_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>_ITDigitConsisitencyMonitor_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ITDumpGeom.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITCheckers/v2r3/src/</path>
    <filename>_i_t_dump_geom_8cpp</filename>
    <includes id="_i_t_dump_geom_8h" name="ITDumpGeom.h" local="yes" imported="no">ITDumpGeom.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>ITDumpGeomFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ITDumpGeom.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITCheckers/v2r3/src/</path>
    <filename>_i_t_dump_geom_8h</filename>
  </compound>
  <compound kind="file">
    <name>ITEffMonitor.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITCheckers/v2r3/src/</path>
    <filename>_i_t_eff_monitor_8cpp</filename>
    <includes id="_i_t_eff_monitor_8h" name="ITEffMonitor.h" local="yes" imported="no">ITEffMonitor.h</includes>
    <includes id="_hist_fun_8h" name="HistFun.h" local="yes" imported="no">HistFun.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>ITEffMonitorFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ITEffMonitor.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITCheckers/v2r3/src/</path>
    <filename>_i_t_eff_monitor_8h</filename>
  </compound>
  <compound kind="file">
    <name>ITMCTuner.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITCheckers/v2r3/src/</path>
    <filename>_i_t_m_c_tuner_8cpp</filename>
    <includes id="_i_t_m_c_tuner_8h" name="ITMCTuner.h" local="yes" imported="no">ITMCTuner.h</includes>
    <includes id="_i_i_t_signal_to_noise_tool_8h" name="IITSignalToNoiseTool.h" local="yes" imported="no">ITAlgorithms/IITSignalToNoiseTool.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>ITMCTunerFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ITMCTuner.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITCheckers/v2r3/src/</path>
    <filename>_i_t_m_c_tuner_8h</filename>
  </compound>
  <compound kind="file">
    <name>ITNoiseClusterMonitor.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITCheckers/v2r3/src/</path>
    <filename>_i_t_noise_cluster_monitor_8cpp</filename>
    <includes id="_i_t_noise_cluster_monitor_8h" name="ITNoiseClusterMonitor.h" local="yes" imported="no">ITNoiseClusterMonitor.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>ITNoiseClusterMonitorFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ITNoiseClusterMonitor.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITCheckers/v2r3/src/</path>
    <filename>_i_t_noise_cluster_monitor_8h</filename>
  </compound>
  <compound kind="file">
    <name>ITOccupancy.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITCheckers/v2r3/src/</path>
    <filename>_i_t_occupancy_8cpp</filename>
    <includes id="_i_t_occupancy_8h" name="ITOccupancy.h" local="yes" imported="no">ITOccupancy.h</includes>
    <includes id="_i_i_t_signal_to_noise_tool_8h" name="IITSignalToNoiseTool.h" local="yes" imported="no">ITAlgorithms/IITSignalToNoiseTool.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>ITOccupancyFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ITOccupancy.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITCheckers/v2r3/src/</path>
    <filename>_i_t_occupancy_8h</filename>
  </compound>
  <compound kind="file">
    <name>LandauTest.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITCheckers/v2r3/src/</path>
    <filename>_landau_test_8cpp</filename>
    <includes id="_landau_test_8h" name="LandauTest.h" local="yes" imported="no">LandauTest.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>LandauTestFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LandauTest.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITCheckers/v2r3/src/</path>
    <filename>_landau_test_8h</filename>
  </compound>
  <compound kind="file">
    <name>MCHitMonitor.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITCheckers/v2r3/src/</path>
    <filename>_m_c_hit_monitor_8cpp</filename>
    <includes id="_m_c_hit_monitor_8h" name="MCHitMonitor.h" local="yes" imported="no">MCHitMonitor.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>MCHitMonitorFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MCHitMonitor.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITCheckers/v2r3/src/</path>
    <filename>_m_c_hit_monitor_8h</filename>
  </compound>
  <compound kind="file">
    <name>MCITDepositChecker.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITCheckers/v2r3/src/</path>
    <filename>_m_c_i_t_deposit_checker_8cpp</filename>
    <includes id="_m_c_i_t_deposit_checker_8h" name="MCITDepositChecker.h" local="yes" imported="no">MCITDepositChecker.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>MCITDepositCheckerFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MCITDepositChecker.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITCheckers/v2r3/src/</path>
    <filename>_m_c_i_t_deposit_checker_8h</filename>
  </compound>
  <compound kind="file">
    <name>MCITDigitChecker.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITCheckers/v2r3/src/</path>
    <filename>_m_c_i_t_digit_checker_8cpp</filename>
    <includes id="_m_c_i_t_digit_checker_8h" name="MCITDigitChecker.h" local="yes" imported="no">MCITDigitChecker.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>MCITDigitCheckerFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MCITDigitChecker.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITCheckers/v2r3/src/</path>
    <filename>_m_c_i_t_digit_checker_8h</filename>
  </compound>
  <compound kind="file">
    <name>STL1BufferMonitor.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITCheckers/v2r3/src/</path>
    <filename>_s_t_l1_buffer_monitor_8cpp</filename>
    <includes id="_s_t_l1_buffer_monitor_8h" name="STL1BufferMonitor.h" local="yes" imported="no">STL1BufferMonitor.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>STL1BufferMonitorFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>STL1BufferMonitor.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITCheckers/v2r3/src/</path>
    <filename>_s_t_l1_buffer_monitor_8h</filename>
  </compound>
  <compound kind="file">
    <name>STL1ClusterChecker.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITCheckers/v2r3/src/</path>
    <filename>_s_t_l1_cluster_checker_8cpp</filename>
    <includes id="_s_t_l1_cluster_checker_8h" name="STL1ClusterChecker.h" local="yes" imported="no">STL1ClusterChecker.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>STL1ClusterCheckerFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>STL1ClusterChecker.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITCheckers/v2r3/src/</path>
    <filename>_s_t_l1_cluster_checker_8h</filename>
  </compound>
  <compound kind="file">
    <name>STRawBufferMonitor.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITCheckers/v2r3/src/</path>
    <filename>_s_t_raw_buffer_monitor_8cpp</filename>
    <includes id="_s_t_raw_buffer_monitor_8h" name="STRawBufferMonitor.h" local="yes" imported="no">STRawBufferMonitor.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>STRawBufferMonitorFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>STRawBufferMonitor.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITCheckers/v2r3/src/</path>
    <filename>_s_t_raw_buffer_monitor_8h</filename>
  </compound>
  <compound kind="file">
    <name>IMuonIDDLLTool.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Muon/MuonID/v3r7p1/MuonID/</path>
    <filename>_i_muon_i_d_d_l_l_tool_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>DAVINCITOOLS_IMUONIDDLLTOOL_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MuonDSTPrepare.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Muon/MuonID/v3r7p1/src/</path>
    <filename>_muon_d_s_t_prepare_8cpp</filename>
    <includes id="_muon_d_s_t_prepare_8h" name="MuonDSTPrepare.h" local="yes" imported="no">MuonDSTPrepare.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>MuonDSTPrepareFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MuonDSTPrepare.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Muon/MuonID/v3r7p1/src/</path>
    <filename>_muon_d_s_t_prepare_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>MUONDSTPREPARE_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MuonID_dll.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Muon/MuonID/v3r7p1/src/</path>
    <filename>_muon_i_d__dll_8cpp</filename>
    <member kind="function">
      <type></type>
      <name>LOAD_FACTORY_ENTRIES</name>
      <anchor>a0</anchor>
      <arglist>(MuonID)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MuonID_load.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Muon/MuonID/v3r7p1/src/</path>
    <filename>_muon_i_d__load_8cpp</filename>
    <member kind="function">
      <type></type>
      <name>DECLARE_FACTORY_ENTRIES</name>
      <anchor>a0</anchor>
      <arglist>(MuonID)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MuonIDDLLTool.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Muon/MuonID/v3r7p1/src/</path>
    <filename>_muon_i_d_d_l_l_tool_8cpp</filename>
    <includes id="_muon_i_d_d_l_l_tool_8h" name="MuonIDDLLTool.h" local="yes" imported="no">MuonIDDLLTool.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>MuonIDDLLToolFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MuonIDDLLTool.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Muon/MuonID/v3r7p1/src/</path>
    <filename>_muon_i_d_d_l_l_tool_8h</filename>
    <includes id="_i_muon_i_d_d_l_l_tool_8h" name="IMuonIDDLLTool.h" local="yes" imported="no">MuonID/IMuonIDDLLTool.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MUONIDDLLTOOL_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MuonIDFOI.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Muon/MuonID/v3r7p1/src/</path>
    <filename>_muon_i_d_f_o_i_8cpp</filename>
    <includes id="_muon_i_d_f_o_i_8h" name="MuonIDFOI.h" local="yes" imported="no">MuonIDFOI.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>MuonIDFOIFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MuonIDFOI.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Muon/MuonID/v3r7p1/src/</path>
    <filename>_muon_i_d_f_o_i_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>MUONIDFOI_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MuonRec.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Muon/MuonRec/v2r4/MuonRec/</path>
    <filename>_muon_rec_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>MUONREC_MUONREC_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MuonRec.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Muon/MuonRec/v2r4/src/</path>
    <filename>_muon_rec_8cpp</filename>
    <includes id="_muon_rec_8h" name="MuonRec.h" local="yes" imported="no">MuonRec/MuonRec.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>MuonRecFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MuonRec_dll.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Muon/MuonRec/v2r4/src/</path>
    <filename>_muon_rec__dll_8cpp</filename>
    <member kind="function">
      <type></type>
      <name>LOAD_FACTORY_ENTRIES</name>
      <anchor>a0</anchor>
      <arglist>(MuonRec)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MuonRec_load.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Muon/MuonRec/v2r4/src/</path>
    <filename>_muon_rec__load_8cpp</filename>
    <member kind="function">
      <type></type>
      <name>DECLARE_FACTORY_ENTRIES</name>
      <anchor>a0</anchor>
      <arglist>(MuonRec)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MuonGeometryStore.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Muon/MuonUtils/v1r0/MuonUtils/</path>
    <filename>_muon_geometry_store_8h</filename>
    <namespace>MuonGeometryStore</namespace>
    <member kind="define">
      <type>#define</type>
      <name>MUONUTILS_MUONGEOMETRYSTORE_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MuonGeometryStore.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Muon/MuonUtils/v1r0/src/</path>
    <filename>_muon_geometry_store_8cpp</filename>
    <includes id="_muon_geometry_store_8h" name="MuonGeometryStore.h" local="yes" imported="no">MuonUtils/MuonGeometryStore.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MUONUTILS_MUONGEOMETRYSTORE_CPP</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MCOTDepositMonitor.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/OT/OTMonitor/v1r1/src/</path>
    <filename>_m_c_o_t_deposit_monitor_8cpp</filename>
    <includes id="_m_c_o_t_deposit_monitor_8h" name="MCOTDepositMonitor.h" local="yes" imported="no">MCOTDepositMonitor.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>MCOTDepositMonitorFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MCOTDepositMonitor.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/OT/OTMonitor/v1r1/src/</path>
    <filename>_m_c_o_t_deposit_monitor_8h</filename>
    <includes id="_o_t_monitor_algorithm_8h" name="OTMonitorAlgorithm.h" local="yes" imported="no">OTMonitorAlgorithm.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>OTMONITOR_MCOTDEPOSITMONITOR_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OTMonitor_dll.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/OT/OTMonitor/v1r1/src/</path>
    <filename>_o_t_monitor__dll_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>OTMonitor_load.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/OT/OTMonitor/v1r1/src/</path>
    <filename>_o_t_monitor__load_8cpp</filename>
    <member kind="function">
      <type></type>
      <name>DECLARE_FACTORY_ENTRIES</name>
      <anchor>a0</anchor>
      <arglist>(OTMonitor)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OTMonitorAlgorithm.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/OT/OTMonitor/v1r1/src/</path>
    <filename>_o_t_monitor_algorithm_8cpp</filename>
    <includes id="_o_t_monitor_algorithm_8h" name="OTMonitorAlgorithm.h" local="yes" imported="no">OTMonitorAlgorithm.h</includes>
  </compound>
  <compound kind="file">
    <name>OTMonitorAlgorithm.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/OT/OTMonitor/v1r1/src/</path>
    <filename>_o_t_monitor_algorithm_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>OTMONITOR_OTMONITORALGORITHM_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OTTimeChecker.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/OT/OTMonitor/v1r1/src/</path>
    <filename>_o_t_time_checker_8cpp</filename>
    <includes id="_o_t_time_checker_8h" name="OTTimeChecker.h" local="yes" imported="no">OTTimeChecker.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>OTTimeCheckerFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OTTimeChecker.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/OT/OTMonitor/v1r1/src/</path>
    <filename>_o_t_time_checker_8h</filename>
    <includes id="_o_t_monitor_algorithm_8h" name="OTMonitorAlgorithm.h" local="yes" imported="no">OTMonitorAlgorithm.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>OTMONITOR_OTTIMECHECKER_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OTTimeMonitor.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/OT/OTMonitor/v1r1/src/</path>
    <filename>_o_t_time_monitor_8cpp</filename>
    <includes id="_o_t_time_monitor_8h" name="OTTimeMonitor.h" local="yes" imported="no">OTTimeMonitor.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>OTTimeMonitorFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OTTimeMonitor.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/OT/OTMonitor/v1r1/src/</path>
    <filename>_o_t_time_monitor_8h</filename>
    <includes id="_o_t_monitor_algorithm_8h" name="OTMonitorAlgorithm.h" local="yes" imported="no">OTMonitorAlgorithm.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>OTMONITOR_OTTIMEMONITOR_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AsctToLinker_dll.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rec/AsctToLinker/v1r3/src/</path>
    <filename>_asct_to_linker__dll_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>AsctToLinker_load.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rec/AsctToLinker/v1r3/src/</path>
    <filename>_asct_to_linker__load_8cpp</filename>
    <member kind="function">
      <type></type>
      <name>DECLARE_FACTORY_ENTRIES</name>
      <anchor>a0</anchor>
      <arglist>(AsctToLinker)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConvertToLinker.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rec/AsctToLinker/v1r3/src/</path>
    <filename>_convert_to_linker_8cpp</filename>
    <includes id="_convert_to_linker_8h" name="ConvertToLinker.h" local="yes" imported="no">ConvertToLinker.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>ConvertToLinkerFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConvertToLinker.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rec/AsctToLinker/v1r3/src/</path>
    <filename>_convert_to_linker_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CONVERTTOLINKER_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ITTruthFromDigit.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rec/AsctToLinker/v1r3/src/</path>
    <filename>_i_t_truth_from_digit_8cpp</filename>
    <includes id="_i_t_truth_from_digit_8h" name="ITTruthFromDigit.h" local="yes" imported="no">ITTruthFromDigit.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>ITTruthFromDigitFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ITTruthFromDigit.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rec/AsctToLinker/v1r3/src/</path>
    <filename>_i_t_truth_from_digit_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>ITTRUTHFROMDIGIT_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OTTruthFromOTTime.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rec/AsctToLinker/v1r3/src/</path>
    <filename>_o_t_truth_from_o_t_time_8cpp</filename>
    <includes id="_o_t_truth_from_o_t_time_8h" name="OTTruthFromOTTime.h" local="yes" imported="no">OTTruthFromOTTime.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>OTTruthFromOTTimeFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OTTruthFromOTTime.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rec/AsctToLinker/v1r3/src/</path>
    <filename>_o_t_truth_from_o_t_time_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>OTTRUTHFROMOTTIME_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VeloTruthFromCluster.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rec/AsctToLinker/v1r3/src/</path>
    <filename>_velo_truth_from_cluster_8cpp</filename>
    <includes id="_velo_truth_from_cluster_8h" name="VeloTruthFromCluster.h" local="yes" imported="no">VeloTruthFromCluster.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>VeloTruthFromClusterFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VeloTruthFromCluster.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rec/AsctToLinker/v1r3/src/</path>
    <filename>_velo_truth_from_cluster_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>VELOTRUTHFROMCLUSTER_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichGlobalPID.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichGlobalPID/v1r8/Event/</path>
    <filename>_rich_global_p_i_d_8h</filename>
    <namespace>RichGlobalPIDLocation</namespace>
    <member kind="define">
      <type>#define</type>
      <name>RichGlobalPID_RichGlobalPID_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KeyedContainer&lt; RichGlobalPID, Containers::HashMap &gt;</type>
      <name>RichGlobalPIDs</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; RichGlobalPID * &gt;</type>
      <name>RichGlobalPIDVector</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a5</anchor>
      <arglist>(std::ostream &amp;str, const RichGlobalPID &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichGlobalPIDSummary.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichGlobalPID/v1r8/Event/</path>
    <filename>_rich_global_p_i_d_summary_8h</filename>
    <namespace>RichGlobalPIDSummaryLocation</namespace>
    <member kind="define">
      <type>#define</type>
      <name>RichGlobalPID_RichGlobalPIDSummary_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KeyedContainer&lt; RichGlobalPIDSummary, Containers::HashMap &gt;</type>
      <name>RichGlobalPIDSummarys</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a4</anchor>
      <arglist>(std::ostream &amp;str, const RichGlobalPIDSummary &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichGlobalPIDTrack.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichGlobalPID/v1r8/Event/</path>
    <filename>_rich_global_p_i_d_track_8h</filename>
    <includes id="_rich_rec_track_8h" name="RichRecTrack.h" local="yes" imported="no">Event/RichRecTrack.h</includes>
    <includes id="_rich_global_p_i_d_tk_quality_8h" name="RichGlobalPIDTkQuality.h" local="yes" imported="no">RichGlobalPID/RichGlobalPIDTkQuality.h</includes>
    <includes id="_rich_global_p_i_d_8h" name="RichGlobalPID.h" local="yes" imported="no">Event/RichGlobalPID.h</includes>
    <namespace>RichGlobalPIDTrackLocation</namespace>
    <member kind="define">
      <type>#define</type>
      <name>RichGlobalPID_RichGlobalPIDTrack_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KeyedContainer&lt; RichGlobalPIDTrack, Containers::HashMap &gt;</type>
      <name>RichGlobalPIDTracks</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; RichGlobalPIDTrack * &gt;</type>
      <name>RichGlobalPIDTrackVector</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a5</anchor>
      <arglist>(std::ostream &amp;str, const RichGlobalPIDTrack &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichGlobalPIDTkQuality.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichGlobalPID/v1r8/RichGlobalPID/</path>
    <filename>_rich_global_p_i_d_tk_quality_8h</filename>
    <namespace>Rich</namespace>
    <namespace>Rich::GlobalPID</namespace>
    <member kind="define">
      <type>#define</type>
      <name>RICHGLOBALPID_RICHGLOBALPIDTKQUALITY_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>TkQuality</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Unknown</name>
      <anchor>a4a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Unusable</name>
      <anchor>a4a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LikelihoodOnly</name>
      <anchor>a4a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Physics</name>
      <anchor>a4a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>text</name>
      <anchor>a0</anchor>
      <arglist>(const Rich::GlobalPID::TkQuality &amp;track)</arglist>
    </member>
    <member kind="function">
      <type>StreamBuffer &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchor>a6</anchor>
      <arglist>(StreamBuffer &amp;s, Rich::GlobalPID::TkQuality &amp;qual)</arglist>
    </member>
    <member kind="function">
      <type>StreamBuffer &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a7</anchor>
      <arglist>(StreamBuffer &amp;s, const Rich::GlobalPID::TkQuality &amp;qual)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a8</anchor>
      <arglist>(std::ostream &amp;s, const Rich::GlobalPID::TkQuality &amp;qual)</arglist>
    </member>
    <member kind="function">
      <type>MsgStream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a9</anchor>
      <arglist>(MsgStream &amp;s, const Rich::GlobalPID::TkQuality &amp;qual)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichGlobalPID_dll.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichGlobalPID/v1r8/src/</path>
    <filename>_rich_global_p_i_d__dll_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>RichGlobalPID_load.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichGlobalPID/v1r8/src/</path>
    <filename>_rich_global_p_i_d__load_8cpp</filename>
    <includes id="_rich_global_p_i_d_track_8h" name="RichGlobalPIDTrack.h" local="yes" imported="no">Event/RichGlobalPIDTrack.h</includes>
    <includes id="_rich_global_p_i_d_8h" name="RichGlobalPID.h" local="yes" imported="no">Event/RichGlobalPID.h</includes>
    <member kind="function">
      <type></type>
      <name>_ImplementContainedObjectFactory</name>
      <anchor>a0</anchor>
      <arglist>(RichGlobalPIDTrack) _ImplementDataObjectFactory(RichGlobalPIDTracks) _ImplementContainedObjectFactory(RichGlobalPID) _ImplementDataObjectFactory(RichGlobalPIDs) DECLARE_FACTORY_ENTRIES(RichGlobalPID)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichGlobalPIDAlg.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichGlobalPID/v1r8/src/</path>
    <filename>_rich_global_p_i_d_alg_8cpp</filename>
    <includes id="_rich_global_p_i_d_alg_8h" name="RichGlobalPIDAlg.h" local="yes" imported="no">RichGlobalPIDAlg.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>RichGlobalPIDAlgFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichGlobalPIDAlg.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichGlobalPID/v1r8/src/</path>
    <filename>_rich_global_p_i_d_alg_8h</filename>
    <includes id="_rich_global_p_i_d_alg_base_8h" name="RichGlobalPIDAlgBase.h" local="yes" imported="no">RichGlobalPIDAlgBase.h</includes>
    <includes id="_rich_rec_status_8h" name="RichRecStatus.h" local="yes" imported="no">Event/RichRecStatus.h</includes>
    <includes id="_i_rich_photon_signal_8h" name="IRichPhotonSignal.h" local="yes" imported="no">RichRecBase/IRichPhotonSignal.h</includes>
    <includes id="_i_rich_expected_track_signal_8h" name="IRichExpectedTrackSignal.h" local="yes" imported="no">RichRecBase/IRichExpectedTrackSignal.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECALGS_RICHGLOBALPIDALG_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichGlobalPIDAlgBase.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichGlobalPID/v1r8/src/</path>
    <filename>_rich_global_p_i_d_alg_base_8cpp</filename>
    <includes id="_rich_global_p_i_d_alg_base_8h" name="RichGlobalPIDAlgBase.h" local="yes" imported="no">RichGlobalPIDAlgBase.h</includes>
  </compound>
  <compound kind="file">
    <name>RichGlobalPIDAlgBase.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichGlobalPID/v1r8/src/</path>
    <filename>_rich_global_p_i_d_alg_base_8h</filename>
    <includes id="_rich_rec_alg_base_8h" name="RichRecAlgBase.h" local="yes" imported="no">RichRecBase/RichRecAlgBase.h</includes>
    <includes id="_rich_global_p_i_d_track_8h" name="RichGlobalPIDTrack.h" local="yes" imported="no">Event/RichGlobalPIDTrack.h</includes>
    <includes id="_rich_global_p_i_d_summary_8h" name="RichGlobalPIDSummary.h" local="yes" imported="no">Event/RichGlobalPIDSummary.h</includes>
    <includes id="_rich_global_p_i_d_8h" name="RichGlobalPID.h" local="yes" imported="no">Event/RichGlobalPID.h</includes>
    <includes id="_rich_global_p_i_d_tk_quality_8h" name="RichGlobalPIDTkQuality.h" local="yes" imported="no">RichGlobalPID/RichGlobalPIDTkQuality.h</includes>
    <includes id="_rich_track_i_d_8h" name="RichTrackID.h" local="yes" imported="no">RichRecBase/RichTrackID.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECALGS_RICHGLOBALPIDALGBASE_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichGlobalPIDDigitSel.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichGlobalPID/v1r8/src/</path>
    <filename>_rich_global_p_i_d_digit_sel_8cpp</filename>
    <includes id="_rich_global_p_i_d_digit_sel_8h" name="RichGlobalPIDDigitSel.h" local="yes" imported="no">RichGlobalPIDDigitSel.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>RichGlobalPIDDigitSelFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichGlobalPIDDigitSel.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichGlobalPID/v1r8/src/</path>
    <filename>_rich_global_p_i_d_digit_sel_8h</filename>
    <includes id="_rich_global_p_i_d_alg_base_8h" name="RichGlobalPIDAlgBase.h" local="yes" imported="no">RichGlobalPIDAlgBase.h</includes>
    <includes id="_rich_rec_proc_code_8h" name="RichRecProcCode.h" local="yes" imported="no">RichRecBase/RichRecProcCode.h</includes>
    <includes id="_rich_rec_status_8h" name="RichRecStatus.h" local="yes" imported="no">Event/RichRecStatus.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHGLOBALPID_RICHGLOBALPIDDIGITSEL_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichGlobalPIDFinalize.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichGlobalPID/v1r8/src/</path>
    <filename>_rich_global_p_i_d_finalize_8cpp</filename>
    <includes id="_rich_global_p_i_d_finalize_8h" name="RichGlobalPIDFinalize.h" local="yes" imported="no">RichGlobalPIDFinalize.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>RichGlobalPIDFinalizeFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichGlobalPIDFinalize.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichGlobalPID/v1r8/src/</path>
    <filename>_rich_global_p_i_d_finalize_8h</filename>
    <includes id="_rich_global_p_i_d_alg_base_8h" name="RichGlobalPIDAlgBase.h" local="yes" imported="no">RichGlobalPIDAlgBase.h</includes>
    <includes id="_rich_rec_status_8h" name="RichRecStatus.h" local="yes" imported="no">Event/RichRecStatus.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHGLOBALPID_RICHGLOBALPIDFINALIZE_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichGlobalPIDInitialize.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichGlobalPID/v1r8/src/</path>
    <filename>_rich_global_p_i_d_initialize_8cpp</filename>
    <includes id="_rich_global_p_i_d_initialize_8h" name="RichGlobalPIDInitialize.h" local="yes" imported="no">RichGlobalPIDInitialize.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>RichGlobalPIDInitializeFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichGlobalPIDInitialize.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichGlobalPID/v1r8/src/</path>
    <filename>_rich_global_p_i_d_initialize_8h</filename>
    <includes id="_rich_global_p_i_d_alg_base_8h" name="RichGlobalPIDAlgBase.h" local="yes" imported="no">RichGlobalPIDAlgBase.h</includes>
    <includes id="_rich_rec_status_8h" name="RichRecStatus.h" local="yes" imported="no">Event/RichRecStatus.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHGLOBALPID_RICHGLOBALPIDINITIALIZE_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichGlobalPIDMonitor.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichGlobalPID/v1r8/src/</path>
    <filename>_rich_global_p_i_d_monitor_8cpp</filename>
    <includes id="_rich_global_p_i_d_monitor_8h" name="RichGlobalPIDMonitor.h" local="yes" imported="no">RichGlobalPIDMonitor.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>RichGlobalPIDMonitorFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichGlobalPIDMonitor.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichGlobalPID/v1r8/src/</path>
    <filename>_rich_global_p_i_d_monitor_8h</filename>
    <includes id="_rich_global_p_i_d_alg_base_8h" name="RichGlobalPIDAlgBase.h" local="yes" imported="no">RichGlobalPIDAlgBase.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHGLOBALPID_RICHGLOBALPIDMONITOR_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichGlobalPIDTrTrackSel.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichGlobalPID/v1r8/src/</path>
    <filename>_rich_global_p_i_d_tr_track_sel_8cpp</filename>
    <includes id="_rich_global_p_i_d_tr_track_sel_8h" name="RichGlobalPIDTrTrackSel.h" local="yes" imported="no">RichGlobalPIDTrTrackSel.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>RichGlobalPIDTrTrackSelFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichGlobalPIDTrTrackSel.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichGlobalPID/v1r8/src/</path>
    <filename>_rich_global_p_i_d_tr_track_sel_8h</filename>
    <includes id="_rich_global_p_i_d_alg_base_8h" name="RichGlobalPIDAlgBase.h" local="yes" imported="no">RichGlobalPIDAlgBase.h</includes>
    <includes id="_rich_rec_proc_code_8h" name="RichRecProcCode.h" local="yes" imported="no">RichRecBase/RichRecProcCode.h</includes>
    <includes id="_rich_track_selector_8h" name="RichTrackSelector.h" local="yes" imported="no">RichRecBase/RichTrackSelector.h</includes>
    <includes id="_rich_rec_status_8h" name="RichRecStatus.h" local="yes" imported="no">Event/RichRecStatus.h</includes>
    <includes id="_i_rich_expected_track_signal_8h" name="IRichExpectedTrackSignal.h" local="yes" imported="no">RichRecBase/IRichExpectedTrackSignal.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHGLOBALPID_RICHGLOBALPIDTRTRACKSEL_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichLocalPID.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichLocalPID/v1r9p1/Event/</path>
    <filename>_rich_local_p_i_d_8h</filename>
    <includes id="_rich_local_p_i_d_8h" name="RichLocalPID.h" local="yes" imported="no">Event/RichLocalPID.h</includes>
    <namespace>RichLocalPIDLocation</namespace>
    <member kind="define">
      <type>#define</type>
      <name>RichLocalPID_RichLocalPID_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KeyedContainer&lt; RichLocalPID, Containers::HashMap &gt;</type>
      <name>RichLocalPIDs</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; RichLocalPID * &gt;</type>
      <name>RichLocalPIDVector</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a8</anchor>
      <arglist>(std::ostream &amp;str, const RichLocalPID &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IRichLocalPIDTool.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichLocalPID/v1r9p1/RichLocalPID/</path>
    <filename>_i_rich_local_p_i_d_tool_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECALGS_IRICHLOCALPIDTOOL_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichLocalPID_dll.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichLocalPID/v1r9p1/src/</path>
    <filename>_rich_local_p_i_d__dll_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>RichLocalPID_load.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichLocalPID/v1r9p1/src/</path>
    <filename>_rich_local_p_i_d__load_8cpp</filename>
    <includes id="_rich_local_p_i_d_8h" name="RichLocalPID.h" local="yes" imported="no">Event/RichLocalPID.h</includes>
    <member kind="function">
      <type></type>
      <name>_ImplementContainedObjectFactory</name>
      <anchor>a0</anchor>
      <arglist>(RichLocalPID) _ImplementDataObjectFactory(RichLocalPIDs) DECLARE_FACTORY_ENTRIES(RichLocalPID)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichLocalPIDAlg.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichLocalPID/v1r9p1/src/</path>
    <filename>_rich_local_p_i_d_alg_8cpp</filename>
    <includes id="_rich_local_p_i_d_alg_8h" name="RichLocalPIDAlg.h" local="yes" imported="no">RichLocalPIDAlg.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>RichLocalPIDAlgFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichLocalPIDAlg.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichLocalPID/v1r9p1/src/</path>
    <filename>_rich_local_p_i_d_alg_8h</filename>
    <includes id="_rich_rec_alg_base_8h" name="RichRecAlgBase.h" local="yes" imported="no">RichRecBase/RichRecAlgBase.h</includes>
    <includes id="_rich_track_selector_8h" name="RichTrackSelector.h" local="yes" imported="no">RichRecBase/RichTrackSelector.h</includes>
    <includes id="_rich_rec_proc_code_8h" name="RichRecProcCode.h" local="yes" imported="no">RichRecBase/RichRecProcCode.h</includes>
    <includes id="_rich_rec_status_8h" name="RichRecStatus.h" local="yes" imported="no">Event/RichRecStatus.h</includes>
    <includes id="_rich_local_p_i_d_8h" name="RichLocalPID.h" local="yes" imported="no">Event/RichLocalPID.h</includes>
    <includes id="_i_rich_local_p_i_d_tool_8h" name="IRichLocalPIDTool.h" local="yes" imported="no">RichLocalPID/IRichLocalPIDTool.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHLOCALPID_RICHLOCALPIDALG_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichLocalPIDMonitor.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichLocalPID/v1r9p1/src/</path>
    <filename>_rich_local_p_i_d_monitor_8cpp</filename>
    <includes id="_rich_local_p_i_d_monitor_8h" name="RichLocalPIDMonitor.h" local="yes" imported="no">RichLocalPIDMonitor.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>RichLocalPIDMonitorFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichLocalPIDMonitor.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichLocalPID/v1r9p1/src/</path>
    <filename>_rich_local_p_i_d_monitor_8h</filename>
    <includes id="_rich_det_params_8h" name="RichDetParams.h" local="yes" imported="no">RichRecBase/RichDetParams.h</includes>
    <includes id="_rich_local_p_i_d_8h" name="RichLocalPID.h" local="yes" imported="no">Event/RichLocalPID.h</includes>
    <includes id="_rich_rec_status_8h" name="RichRecStatus.h" local="yes" imported="no">Event/RichRecStatus.h</includes>
    <includes id="_rich_rec_alg_base_8h" name="RichRecAlgBase.h" local="yes" imported="no">RichRecBase/RichRecAlgBase.h</includes>
    <includes id="_i_rich_rec_m_c_truth_tool_8h" name="IRichRecMCTruthTool.h" local="yes" imported="no">RichRecBase/IRichRecMCTruthTool.h</includes>
    <includes id="_i_rich_expected_track_signal_8h" name="IRichExpectedTrackSignal.h" local="yes" imported="no">RichRecBase/IRichExpectedTrackSignal.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHMONITOR_RICHLOCALPIDMONITOR_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichLocalPIDToolAngleSpace.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichLocalPID/v1r9p1/src/</path>
    <filename>_rich_local_p_i_d_tool_angle_space_8cpp</filename>
    <includes id="_rich_local_p_i_d_tool_angle_space_8h" name="RichLocalPIDToolAngleSpace.h" local="yes" imported="no">RichLocalPIDToolAngleSpace.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>RichLocalPIDToolAngleSpaceFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichLocalPIDToolAngleSpace.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichLocalPID/v1r9p1/src/</path>
    <filename>_rich_local_p_i_d_tool_angle_space_8h</filename>
    <includes id="_rich_rec_tool_base_8h" name="RichRecToolBase.h" local="yes" imported="no">RichRecBase/RichRecToolBase.h</includes>
    <includes id="_rich_local_p_i_d_8h" name="RichLocalPID.h" local="yes" imported="no">Event/RichLocalPID.h</includes>
    <includes id="_rich_rec_track_8h" name="RichRecTrack.h" local="yes" imported="no">Event/RichRecTrack.h</includes>
    <includes id="_i_rich_local_p_i_d_tool_8h" name="IRichLocalPIDTool.h" local="yes" imported="no">RichLocalPID/IRichLocalPIDTool.h</includes>
    <includes id="_i_rich_expected_track_signal_8h" name="IRichExpectedTrackSignal.h" local="yes" imported="no">RichRecBase/IRichExpectedTrackSignal.h</includes>
    <includes id="_i_rich_cherenkov_angle_8h" name="IRichCherenkovAngle.h" local="yes" imported="no">RichRecBase/IRichCherenkovAngle.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECALGS_RICHLOCALPID_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichLocalPIDToolLocalXYSpace.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichLocalPID/v1r9p1/src/</path>
    <filename>_rich_local_p_i_d_tool_local_x_y_space_8cpp</filename>
    <includes id="_rich_local_p_i_d_tool_local_x_y_space_8h" name="RichLocalPIDToolLocalXYSpace.h" local="yes" imported="no">RichLocalPIDToolLocalXYSpace.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>RichLocalPIDToolLocalXYSpaceFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichLocalPIDToolLocalXYSpace.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichLocalPID/v1r9p1/src/</path>
    <filename>_rich_local_p_i_d_tool_local_x_y_space_8h</filename>
    <includes id="_rich_rec_tool_base_8h" name="RichRecToolBase.h" local="yes" imported="no">RichRecBase/RichRecToolBase.h</includes>
    <includes id="_rich_local_p_i_d_8h" name="RichLocalPID.h" local="yes" imported="no">Event/RichLocalPID.h</includes>
    <includes id="_rich_rec_track_8h" name="RichRecTrack.h" local="yes" imported="no">Event/RichRecTrack.h</includes>
    <includes id="_i_rich_local_p_i_d_tool_8h" name="IRichLocalPIDTool.h" local="yes" imported="no">RichLocalPID/IRichLocalPIDTool.h</includes>
    <includes id="_i_rich_expected_track_signal_8h" name="IRichExpectedTrackSignal.h" local="yes" imported="no">RichRecBase/IRichExpectedTrackSignal.h</includes>
    <includes id="_i_rich_cherenkov_angle_8h" name="IRichCherenkovAngle.h" local="yes" imported="no">RichRecBase/IRichCherenkovAngle.h</includes>
    <includes id="_i_rich_mass_hypothesis_ring_creator_8h" name="IRichMassHypothesisRingCreator.h" local="yes" imported="no">RichRecBase/IRichMassHypothesisRingCreator.h</includes>
    <includes id="_i_rich_ray_trace_cherenkov_cone_8h" name="IRichRayTraceCherenkovCone.h" local="yes" imported="no">RichRecBase/IRichRayTraceCherenkovCone.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHLOCALPID_RICHLOCALPIDTOOLLOCALXYSPACE_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichGPIDSelByRing.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichPIDMerge/v1r5/src/</path>
    <filename>_rich_g_p_i_d_sel_by_ring_8cpp</filename>
    <includes id="_rich_g_p_i_d_sel_by_ring_8h" name="RichGPIDSelByRing.h" local="yes" imported="no">RichGPIDSelByRing.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>RichGPIDSelByRingFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichGPIDSelByRing.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichPIDMerge/v1r5/src/</path>
    <filename>_rich_g_p_i_d_sel_by_ring_8h</filename>
    <includes id="_rich_global_p_i_d_8h" name="RichGlobalPID.h" local="yes" imported="no">Event/RichGlobalPID.h</includes>
    <includes id="_rich_local_p_i_d_8h" name="RichLocalPID.h" local="yes" imported="no">Event/RichLocalPID.h</includes>
    <includes id="_rich_ring_refit_p_i_d_8h" name="RichRingRefitPID.h" local="yes" imported="no">Event/RichRingRefitPID.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHPIDMERGE_RICHPIDSIMPLEMERGE_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichHierarchicalPIDMerge.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichPIDMerge/v1r5/src/</path>
    <filename>_rich_hierarchical_p_i_d_merge_8cpp</filename>
    <includes id="_rich_hierarchical_p_i_d_merge_8h" name="RichHierarchicalPIDMerge.h" local="yes" imported="no">RichHierarchicalPIDMerge.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>RichHierarchicalPIDMergeFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichHierarchicalPIDMerge.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichPIDMerge/v1r5/src/</path>
    <filename>_rich_hierarchical_p_i_d_merge_8h</filename>
    <includes id="_rich_global_p_i_d_8h" name="RichGlobalPID.h" local="yes" imported="no">Event/RichGlobalPID.h</includes>
    <includes id="_rich_local_p_i_d_8h" name="RichLocalPID.h" local="yes" imported="no">Event/RichLocalPID.h</includes>
    <includes id="_rich_ring_refit_p_i_d_8h" name="RichRingRefitPID.h" local="yes" imported="no">Event/RichRingRefitPID.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHPIDMERGE_RICHPIDSIMPLEMERGE_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichPIDMerge_dll.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichPIDMerge/v1r5/src/</path>
    <filename>_rich_p_i_d_merge__dll_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>RichPIDMerge_load.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichPIDMerge/v1r5/src/</path>
    <filename>_rich_p_i_d_merge__load_8cpp</filename>
    <member kind="function">
      <type></type>
      <name>DECLARE_FACTORY_ENTRIES</name>
      <anchor>a0</anchor>
      <arglist>(RichPIDMerge)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichRecPhoton.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/Event/</path>
    <filename>_rich_rec_photon_8h</filename>
    <includes id="_rich_rec_photon_key_8h" name="RichRecPhotonKey.h" local="yes" imported="no">RichRecBase/RichRecPhotonKey.h</includes>
    <includes id="_rich_rec_segment_8h" name="RichRecSegment.h" local="yes" imported="no">Event/RichRecSegment.h</includes>
    <includes id="_rich_rec_track_8h" name="RichRecTrack.h" local="yes" imported="no">Event/RichRecTrack.h</includes>
    <includes id="_rich_rec_pixel_8h" name="RichRecPixel.h" local="yes" imported="no">Event/RichRecPixel.h</includes>
    <namespace>RichRecPhotonLocation</namespace>
    <member kind="define">
      <type>#define</type>
      <name>RichRecBase_RichRecPhoton_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KeyedContainer&lt; RichRecPhoton, Containers::HashMap &gt;</type>
      <name>RichRecPhotons</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; RichRecPhoton * &gt;</type>
      <name>RichRecPhotonVector</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a5</anchor>
      <arglist>(std::ostream &amp;str, const RichRecPhoton &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichRecPixel.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/Event/</path>
    <filename>_rich_rec_pixel_8h</filename>
    <includes id="_rich_rec_pixel_parent_type_8h" name="RichRecPixelParentType.h" local="yes" imported="no">RichRecBase/RichRecPixelParentType.h</includes>
    <includes id="_rich_rec_track_8h" name="RichRecTrack.h" local="yes" imported="no">Event/RichRecTrack.h</includes>
    <includes id="_rich_rec_photon_8h" name="RichRecPhoton.h" local="yes" imported="no">Event/RichRecPhoton.h</includes>
    <namespace>RichRecPixelLocation</namespace>
    <member kind="define">
      <type>#define</type>
      <name>RichRecBase_RichRecPixel_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KeyedContainer&lt; RichRecPixel, Containers::HashMap &gt;</type>
      <name>RichRecPixels</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; RichRecPixel * &gt;</type>
      <name>RichRecPixelVector</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a5</anchor>
      <arglist>(std::ostream &amp;str, const RichRecPixel &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichRecRing.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/Event/</path>
    <filename>_rich_rec_ring_8h</filename>
    <includes id="_rich_rec_segment_8h" name="RichRecSegment.h" local="yes" imported="no">Event/RichRecSegment.h</includes>
    <includes id="_rich_rec_pixel_8h" name="RichRecPixel.h" local="yes" imported="no">Event/RichRecPixel.h</includes>
    <namespace>RichRecRingLocation</namespace>
    <member kind="define">
      <type>#define</type>
      <name>RichRecBase_RichRecRing_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KeyedContainer&lt; RichRecRing, Containers::HashMap &gt;</type>
      <name>RichRecRings</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a6</anchor>
      <arglist>(std::ostream &amp;str, const RichRecRing &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichRecSegment.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/Event/</path>
    <filename>_rich_rec_segment_8h</filename>
    <includes id="_rich_photon_spectra_8h" name="RichPhotonSpectra.h" local="yes" imported="no">RichRecBase/RichPhotonSpectra.h</includes>
    <includes id="_rich_rec_ring_8h" name="RichRecRing.h" local="yes" imported="no">Event/RichRecRing.h</includes>
    <includes id="_rich_rec_track_8h" name="RichRecTrack.h" local="yes" imported="no">Event/RichRecTrack.h</includes>
    <includes id="_rich_rec_pixel_8h" name="RichRecPixel.h" local="yes" imported="no">Event/RichRecPixel.h</includes>
    <includes id="_rich_rec_photon_8h" name="RichRecPhoton.h" local="yes" imported="no">Event/RichRecPhoton.h</includes>
    <namespace>RichRecSegmentLocation</namespace>
    <member kind="define">
      <type>#define</type>
      <name>RichRecBase_RichRecSegment_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KeyedContainer&lt; RichRecSegment, Containers::HashMap &gt;</type>
      <name>RichRecSegments</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; RichRecSegment * &gt;</type>
      <name>RichRecSegmentVector</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a5</anchor>
      <arglist>(std::ostream &amp;str, const RichRecSegment &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichRecStatus.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/Event/</path>
    <filename>_rich_rec_status_8h</filename>
    <namespace>RichRecStatusLocation</namespace>
    <member kind="define">
      <type>#define</type>
      <name>RichRecBase_RichRecStatus_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KeyedContainer&lt; RichRecStatus, Containers::HashMap &gt;</type>
      <name>RichRecStatuss</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a4</anchor>
      <arglist>(std::ostream &amp;str, const RichRecStatus &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichRecTrack.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/Event/</path>
    <filename>_rich_rec_track_8h</filename>
    <includes id="_rich_track_i_d_8h" name="RichTrackID.h" local="yes" imported="no">RichRecBase/RichTrackID.h</includes>
    <includes id="_rich_rec_segment_8h" name="RichRecSegment.h" local="yes" imported="no">Event/RichRecSegment.h</includes>
    <includes id="_rich_rec_pixel_8h" name="RichRecPixel.h" local="yes" imported="no">Event/RichRecPixel.h</includes>
    <includes id="_rich_rec_photon_8h" name="RichRecPhoton.h" local="yes" imported="no">Event/RichRecPhoton.h</includes>
    <namespace>RichRecTrackLocation</namespace>
    <member kind="define">
      <type>#define</type>
      <name>RichRecBase_RichRecTrack_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KeyedContainer&lt; RichRecTrack, Containers::HashMap &gt;</type>
      <name>RichRecTracks</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; RichRecTrack * &gt;</type>
      <name>RichRecTrackVector</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a5</anchor>
      <arglist>(std::ostream &amp;str, const RichRecTrack &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IRichCherenkovAngle.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/RichRecBase/</path>
    <filename>_i_rich_cherenkov_angle_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECTOOLS_IRICHCHERENKOVANGLE_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IRichCherenkovResolution.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/RichRecBase/</path>
    <filename>_i_rich_cherenkov_resolution_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECTOOLS_IRICHCHERENKOVRESOLUTION_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IRichExpectedTrackSignal.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/RichRecBase/</path>
    <filename>_i_rich_expected_track_signal_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECTOOLS_IRICHEXPECTEDTRACKSIGNAL_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IRichGasQuartzWindowAbs.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/RichRecBase/</path>
    <filename>_i_rich_gas_quartz_window_abs_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECTOOLS_IRICHGASQUARTZWINDOWABS_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IRichGeomEff.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/RichRecBase/</path>
    <filename>_i_rich_geom_eff_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECTOOLS_IRICHGEOMEFF_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IRichMassHypothesisRingCreator.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/RichRecBase/</path>
    <filename>_i_rich_mass_hypothesis_ring_creator_8h</filename>
    <includes id="_rich_rec_ring_8h" name="RichRecRing.h" local="yes" imported="no">Event/RichRecRing.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECBASE_IRICHMASSHYPOTHESISRINGCREATOR_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IRichParticleProperties.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/RichRecBase/</path>
    <filename>_i_rich_particle_properties_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECTOOLS_IRICHPARTICLEPROPERTIES_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IRichPhotonCreator.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/RichRecBase/</path>
    <filename>_i_rich_photon_creator_8h</filename>
    <includes id="_rich_rec_track_8h" name="RichRecTrack.h" local="yes" imported="no">Event/RichRecTrack.h</includes>
    <includes id="_rich_rec_pixel_8h" name="RichRecPixel.h" local="yes" imported="no">Event/RichRecPixel.h</includes>
    <includes id="_rich_rec_photon_8h" name="RichRecPhoton.h" local="yes" imported="no">Event/RichRecPhoton.h</includes>
    <includes id="_rich_rec_segment_8h" name="RichRecSegment.h" local="yes" imported="no">Event/RichRecSegment.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECTOOLS_IRICHPHOTONCREATOR_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IRichPhotonPredictor.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/RichRecBase/</path>
    <filename>_i_rich_photon_predictor_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECTOOLS_IRICHPHOTONPREDICTOR_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IRichPhotonSignal.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/RichRecBase/</path>
    <filename>_i_rich_photon_signal_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECTOOLS_IRICHPHOTONSIGNAL_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IRichPixelCreator.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/RichRecBase/</path>
    <filename>_i_rich_pixel_creator_8h</filename>
    <includes id="_rich_rec_pixel_8h" name="RichRecPixel.h" local="yes" imported="no">Event/RichRecPixel.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECTOOLS_IRICHPIXELCREATOR_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IRichRayleighScatter.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/RichRecBase/</path>
    <filename>_i_rich_rayleigh_scatter_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECTOOLS_IRICHRAYLEIGHSCATTER_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IRichRayTraceCherenkovCone.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/RichRecBase/</path>
    <filename>_i_rich_ray_trace_cherenkov_cone_8h</filename>
    <includes id="_rich_rec_ring_8h" name="RichRecRing.h" local="yes" imported="no">Event/RichRecRing.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECBASE_IRICHRAYTRACECHERENKOVCONE_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IRichRecGeomTool.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/RichRecBase/</path>
    <filename>_i_rich_rec_geom_tool_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECTOOLS_IRICHRECGEOMTOOL_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IRichRecMCTruthTool.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/RichRecBase/</path>
    <filename>_i_rich_rec_m_c_truth_tool_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECTOOLS_IRICHRECMCTRUTHTOOL_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IRichSegmentCreator.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/RichRecBase/</path>
    <filename>_i_rich_segment_creator_8h</filename>
    <includes id="_rich_rec_segment_8h" name="RichRecSegment.h" local="yes" imported="no">Event/RichRecSegment.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECTOOLS_IRICHSEGMENTCREATOR_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IRichSellmeirFunc.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/RichRecBase/</path>
    <filename>_i_rich_sellmeir_func_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECTOOLS_IRICHSELLMEIRFUNC_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IRichSignalDetectionEff.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/RichRecBase/</path>
    <filename>_i_rich_signal_detection_eff_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECBASE_IRICHSIGNALDETECTIONEFF_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IRichStatusCreator.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/RichRecBase/</path>
    <filename>_i_rich_status_creator_8h</filename>
    <includes id="_rich_rec_status_8h" name="RichRecStatus.h" local="yes" imported="no">Event/RichRecStatus.h</includes>
    <includes id="_rich_rec_pixel_8h" name="RichRecPixel.h" local="yes" imported="no">Event/RichRecPixel.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECTOOLS_IRICHSTATUSCREATOR_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IRichTrackCreator.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/RichRecBase/</path>
    <filename>_i_rich_track_creator_8h</filename>
    <includes id="_rich_rec_track_8h" name="RichRecTrack.h" local="yes" imported="no">Event/RichRecTrack.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECTOOLS_IRICHTRACKCREATOR_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichDetParams.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/RichRecBase/</path>
    <filename>_rich_det_params_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>RICHKERNEL_RICHDETPARAMS_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RADIATOR_NAMES</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RICH_NAMES</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYPOTHESIS_NAMES</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RICH_HISTO_OFFSET</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RAD_HISTO_OFFSET</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYPO_HISTO_OFFSET</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_CKTHETA_RAD</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MIN_CKTHETA_RAD</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RADIATOR_MAX_CKTHETA</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RADIATOR_GLOBAL_POSITIONS_X</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RADIATOR_GLOBAL_POSITIONS_Y</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RADIATOR_GLOBAL_POSITIONS_Z</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RADIATOR_GLOBAL_LENGTHS</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RADIATOR_GLOBAL_POSITIONS</name>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PD_GLOBAL_POSITIONS_X</name>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PD_GLOBAL_POSITIONS_Y</name>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PD_GLOBAL_POSITIONS_Z</name>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PD_GLOBAL_POSITIONS</name>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PD_LOCAL_POSITIONS_X</name>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PD_LOCAL_POSITIONS_Y</name>
      <anchor>a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PD_LOCAL_POSITIONS_Z</name>
      <anchor>a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PD_LOCAL_POSITIONS</name>
      <anchor>a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SPHERICAL_MIRROR_GLOBAL_POSITIONS_X</name>
      <anchor>a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SPHERICAL_MIRROR_GLOBAL_POSITIONS_Y</name>
      <anchor>a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SPHERICAL_MIRROR_GLOBAL_POSITIONS_Z</name>
      <anchor>a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SPHERICAL_MIRROR_GLOBAL_POSITIONS</name>
      <anchor>a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FLAT_MIRROR_GLOBAL_POSITIONS_X</name>
      <anchor>a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FLAT_MIRROR_GLOBAL_POSITIONS_Y</name>
      <anchor>a28</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FLAT_MIRROR_GLOBAL_POSITIONS_Z</name>
      <anchor>a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FLAT_MIRROR_GLOBAL_POSITIONS</name>
      <anchor>a30</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichPhotonSpectra.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/RichRecBase/</path>
    <filename>_rich_photon_spectra_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECBASE_RICHPHOTONSPECTRA_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>StreamBuffer &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a1</anchor>
      <arglist>(StreamBuffer &amp;s, const RichPhotonSpectra&lt; TYPE &gt; &amp;spectra)</arglist>
    </member>
    <member kind="function">
      <type>StreamBuffer &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchor>a2</anchor>
      <arglist>(StreamBuffer &amp;s, RichPhotonSpectra&lt; TYPE &gt; &amp;spectra)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a3</anchor>
      <arglist>(std::ostream &amp;s, const RichPhotonSpectra&lt; TYPE &gt; &amp;spectra)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichRecAlgBase.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/RichRecBase/</path>
    <filename>_rich_rec_alg_base_8h</filename>
    <includes id="_rich_rec_track_8h" name="RichRecTrack.h" local="yes" imported="no">Event/RichRecTrack.h</includes>
    <includes id="_rich_rec_segment_8h" name="RichRecSegment.h" local="yes" imported="no">Event/RichRecSegment.h</includes>
    <includes id="_rich_rec_pixel_8h" name="RichRecPixel.h" local="yes" imported="no">Event/RichRecPixel.h</includes>
    <includes id="_rich_rec_photon_8h" name="RichRecPhoton.h" local="yes" imported="no">Event/RichRecPhoton.h</includes>
    <includes id="_i_rich_segment_creator_8h" name="IRichSegmentCreator.h" local="yes" imported="no">RichRecBase/IRichSegmentCreator.h</includes>
    <includes id="_i_rich_track_creator_8h" name="IRichTrackCreator.h" local="yes" imported="no">RichRecBase/IRichTrackCreator.h</includes>
    <includes id="_i_rich_photon_creator_8h" name="IRichPhotonCreator.h" local="yes" imported="no">RichRecBase/IRichPhotonCreator.h</includes>
    <includes id="_i_rich_pixel_creator_8h" name="IRichPixelCreator.h" local="yes" imported="no">RichRecBase/IRichPixelCreator.h</includes>
    <includes id="_i_rich_status_creator_8h" name="IRichStatusCreator.h" local="yes" imported="no">RichRecBase/IRichStatusCreator.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECALGS_RICHRECALGBASE_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichRecPhotonKey.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/RichRecBase/</path>
    <filename>_rich_rec_photon_key_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>RichRecEvent_RichRecPhotonKey_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>StreamBuffer &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchor>a1</anchor>
      <arglist>(StreamBuffer &amp;s, RichRecPhotonKey &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>StreamBuffer &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a2</anchor>
      <arglist>(StreamBuffer &amp;s, const RichRecPhotonKey &amp;key)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichRecPixelParentType.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/RichRecBase/</path>
    <filename>_rich_rec_pixel_parent_type_8h</filename>
    <namespace>Rich</namespace>
    <namespace>Rich::PixelParent</namespace>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECBASE_RICHRECPIXELPARENTTYPE_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Type</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Unknown</name>
      <anchor>a5a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Digit</name>
      <anchor>a5a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MCHit</name>
      <anchor>a5a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RawBuffer</name>
      <anchor>a5a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoParent</name>
      <anchor>a5a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>text</name>
      <anchor>a1</anchor>
      <arglist>(const Rich::PixelParent::Type &amp;parent)</arglist>
    </member>
    <member kind="function">
      <type>StreamBuffer &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchor>a7</anchor>
      <arglist>(StreamBuffer &amp;s, Rich::PixelParent::Type &amp;pixel)</arglist>
    </member>
    <member kind="function">
      <type>StreamBuffer &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a8</anchor>
      <arglist>(StreamBuffer &amp;s, const Rich::PixelParent::Type &amp;pixel)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a9</anchor>
      <arglist>(std::ostream &amp;s, const Rich::PixelParent::Type &amp;pixel)</arglist>
    </member>
    <member kind="function">
      <type>MsgStream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a10</anchor>
      <arglist>(MsgStream &amp;s, const Rich::PixelParent::Type &amp;pixel)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichRecProcCode.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/RichRecBase/</path>
    <filename>_rich_rec_proc_code_8h</filename>
    <namespace>Rich</namespace>
    <namespace>Rich::Rec</namespace>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECBASE_RICHRECPROCCODE_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ProcStat</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ProcStatAbort</name>
      <anchor>a6a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoRichPixels</name>
      <anchor>a6a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ReachedPixelLimit</name>
      <anchor>a6a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoRichTracks</name>
      <anchor>a6a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ReachedTrTrackLimit</name>
      <anchor>a6a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ReachedRichTrackLimit</name>
      <anchor>a6a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichRecToolBase.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/RichRecBase/</path>
    <filename>_rich_rec_tool_base_8h</filename>
    <includes id="_i_rich_segment_creator_8h" name="IRichSegmentCreator.h" local="yes" imported="no">RichRecBase/IRichSegmentCreator.h</includes>
    <includes id="_i_rich_track_creator_8h" name="IRichTrackCreator.h" local="yes" imported="no">RichRecBase/IRichTrackCreator.h</includes>
    <includes id="_i_rich_photon_creator_8h" name="IRichPhotonCreator.h" local="yes" imported="no">RichRecBase/IRichPhotonCreator.h</includes>
    <includes id="_i_rich_pixel_creator_8h" name="IRichPixelCreator.h" local="yes" imported="no">RichRecBase/IRichPixelCreator.h</includes>
    <includes id="_i_rich_status_creator_8h" name="IRichStatusCreator.h" local="yes" imported="no">RichRecBase/IRichStatusCreator.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECALGS_RICHRECTOOLBASE_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichTrackID.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/RichRecBase/</path>
    <filename>_rich_track_i_d_8h</filename>
    <namespace>Rich</namespace>
    <namespace>Rich::Track</namespace>
    <namespace>Rich::TrackParent</namespace>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECBASE_RICHTRACKID_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Type</name>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Unknown</name>
      <anchor>a16a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Unusable</name>
      <anchor>a16a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Forward</name>
      <anchor>a16a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Match</name>
      <anchor>a16a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Follow</name>
      <anchor>a16a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Seed</name>
      <anchor>a16a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VeloTT</name>
      <anchor>a16a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KsTrack</name>
      <anchor>a16a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Velo</name>
      <anchor>a16a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Trigger</name>
      <anchor>a16a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Type</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Unknown</name>
      <anchor>a4a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TrStoredTrack</name>
      <anchor>a4a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TrgTrack</name>
      <anchor>a4a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MCParticle</name>
      <anchor>a4a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Rich::Track::Type</type>
      <name>type</name>
      <anchor>a11</anchor>
      <arglist>(const TrgTrack *track)</arglist>
    </member>
    <member kind="function">
      <type>Rich::Track::Type</type>
      <name>type</name>
      <anchor>a12</anchor>
      <arglist>(const TrStoredTrack *track)</arglist>
    </member>
    <member kind="function">
      <type>Rich::Track::Type</type>
      <name>type</name>
      <anchor>a13</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUsable</name>
      <anchor>a14</anchor>
      <arglist>(const Rich::Track::Type type)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUsable</name>
      <anchor>a15</anchor>
      <arglist>(const TrStoredTrack *track)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>text</name>
      <anchor>a2</anchor>
      <arglist>(const Rich::TrackParent::Type parent)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>text</name>
      <anchor>a3</anchor>
      <arglist>(const Rich::Track::Type track)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>text</name>
      <anchor>a4</anchor>
      <arglist>(const TrStoredTrack *track)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a24</anchor>
      <arglist>(std::ostream &amp;s, const Rich::Track::Type type)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a25</anchor>
      <arglist>(std::ostream &amp;s, const Rich::TrackParent::Type track)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a26</anchor>
      <arglist>(std::ostream &amp;s, const RichTrackID &amp;id)</arglist>
    </member>
    <member kind="function">
      <type>MsgStream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a27</anchor>
      <arglist>(MsgStream &amp;s, const Rich::Track::Type type)</arglist>
    </member>
    <member kind="function">
      <type>MsgStream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a28</anchor>
      <arglist>(MsgStream &amp;s, const Rich::TrackParent::Type track)</arglist>
    </member>
    <member kind="function">
      <type>StreamBuffer &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchor>a29</anchor>
      <arglist>(StreamBuffer &amp;s, RichTrackID &amp;id)</arglist>
    </member>
    <member kind="function">
      <type>StreamBuffer &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a30</anchor>
      <arglist>(StreamBuffer &amp;s, const RichTrackID &amp;id)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichTrackSelector.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/RichRecBase/</path>
    <filename>_rich_track_selector_8h</filename>
    <includes id="_rich_rec_track_8h" name="RichRecTrack.h" local="yes" imported="no">Event/RichRecTrack.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECBASE_RICHTRACKSELECTOR_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichPhotonSpectra.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/src/base/</path>
    <filename>_rich_photon_spectra_8cpp</filename>
    <includes id="_rich_photon_spectra_8h" name="RichPhotonSpectra.h" local="yes" imported="no">RichRecBase/RichPhotonSpectra.h</includes>
  </compound>
  <compound kind="file">
    <name>RichRecAlgBase.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/src/base/</path>
    <filename>_rich_rec_alg_base_8cpp</filename>
    <includes id="_rich_rec_alg_base_8h" name="RichRecAlgBase.h" local="yes" imported="no">RichRecBase/RichRecAlgBase.h</includes>
  </compound>
  <compound kind="file">
    <name>RichRecPixelParentType.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/src/base/</path>
    <filename>_rich_rec_pixel_parent_type_8cpp</filename>
    <includes id="_rich_rec_pixel_parent_type_8h" name="RichRecPixelParentType.h" local="yes" imported="no">RichRecBase/RichRecPixelParentType.h</includes>
  </compound>
  <compound kind="file">
    <name>RichRecToolBase.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/src/base/</path>
    <filename>_rich_rec_tool_base_8cpp</filename>
    <includes id="_rich_rec_tool_base_8h" name="RichRecToolBase.h" local="yes" imported="no">RichRecBase/RichRecToolBase.h</includes>
  </compound>
  <compound kind="file">
    <name>RichTrackID.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/src/base/</path>
    <filename>_rich_track_i_d_8cpp</filename>
    <includes id="_rich_track_i_d_8h" name="RichTrackID.h" local="yes" imported="no">RichRecBase/RichTrackID.h</includes>
  </compound>
  <compound kind="file">
    <name>RichTrackSelector.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/src/base/</path>
    <filename>_rich_track_selector_8cpp</filename>
    <includes id="_rich_track_selector_8h" name="RichTrackSelector.h" local="yes" imported="no">RichRecBase/RichTrackSelector.h</includes>
  </compound>
  <compound kind="file">
    <name>RichRecBaseEvent_load.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/src/event/</path>
    <filename>_rich_rec_base_event__load_8cpp</filename>
    <includes id="_rich_rec_track_8h" name="RichRecTrack.h" local="yes" imported="no">Event/RichRecTrack.h</includes>
    <includes id="_rich_rec_pixel_8h" name="RichRecPixel.h" local="yes" imported="no">Event/RichRecPixel.h</includes>
    <includes id="_rich_rec_photon_8h" name="RichRecPhoton.h" local="yes" imported="no">Event/RichRecPhoton.h</includes>
    <includes id="_rich_rec_segment_8h" name="RichRecSegment.h" local="yes" imported="no">Event/RichRecSegment.h</includes>
    <member kind="function">
      <type></type>
      <name>_ImplementContainedObjectFactory</name>
      <anchor>a0</anchor>
      <arglist>(RichRecTrack) _ImplementDataObjectFactory(RichRecTracks) _ImplementContainedObjectFactory(RichRecPixel) _ImplementDataObjectFactory(RichRecPixels) _ImplementContainedObjectFactory(RichRecPhoton) _ImplementDataObjectFactory(RichRecPhotons) _ImplementContainedObjectFactory(RichRecSegment) _ImplementDataObjectFactory(RichRecSegments) void RichRecBaseEvent_load()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RichRecBaseEvent_loadRef</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichRecPhoton.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/src/event/</path>
    <filename>_rich_rec_photon_8cpp</filename>
    <includes id="_rich_rec_photon_8h" name="RichRecPhoton.h" local="yes" imported="no">Event/RichRecPhoton.h</includes>
  </compound>
  <compound kind="file">
    <name>RichRecSegment.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/src/event/</path>
    <filename>_rich_rec_segment_8cpp</filename>
    <includes id="_rich_rec_segment_8h" name="RichRecSegment.h" local="yes" imported="no">Event/RichRecSegment.h</includes>
  </compound>
  <compound kind="file">
    <name>RichRecTrack.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/src/event/</path>
    <filename>_rich_rec_track_8cpp</filename>
    <includes id="_rich_rec_track_8h" name="RichRecTrack.h" local="yes" imported="no">Event/RichRecTrack.h</includes>
  </compound>
  <compound kind="file">
    <name>RichAlignmentMonitor.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecCommon/v1r10/src/</path>
    <filename>_rich_alignment_monitor_8cpp</filename>
    <includes id="_rich_alignment_monitor_8h" name="RichAlignmentMonitor.h" local="yes" imported="no">RichAlignmentMonitor.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>RichAlignmentMonitorFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichAlignmentMonitor.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecCommon/v1r10/src/</path>
    <filename>_rich_alignment_monitor_8h</filename>
    <includes id="_rich_rec_alg_base_8h" name="RichRecAlgBase.h" local="yes" imported="no">RichRecBase/RichRecAlgBase.h</includes>
    <includes id="_rich_rec_status_8h" name="RichRecStatus.h" local="yes" imported="no">Event/RichRecStatus.h</includes>
    <includes id="_i_rich_rec_m_c_truth_tool_8h" name="IRichRecMCTruthTool.h" local="yes" imported="no">RichRecBase/IRichRecMCTruthTool.h</includes>
    <includes id="_i_rich_particle_properties_8h" name="IRichParticleProperties.h" local="yes" imported="no">RichRecBase/IRichParticleProperties.h</includes>
    <includes id="_i_rich_cherenkov_angle_8h" name="IRichCherenkovAngle.h" local="yes" imported="no">RichRecBase/IRichCherenkovAngle.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECCOMMON_RICHALIGNMENTMONITOR_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichMCMassHypoRingsAlg.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecCommon/v1r10/src/</path>
    <filename>_rich_m_c_mass_hypo_rings_alg_8cpp</filename>
    <includes id="_rich_m_c_mass_hypo_rings_alg_8h" name="RichMCMassHypoRingsAlg.h" local="yes" imported="no">RichMCMassHypoRingsAlg.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>RichMCMassHypoRingsAlgFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichMCMassHypoRingsAlg.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecCommon/v1r10/src/</path>
    <filename>_rich_m_c_mass_hypo_rings_alg_8h</filename>
    <includes id="_rich_rec_alg_base_8h" name="RichRecAlgBase.h" local="yes" imported="no">RichRecBase/RichRecAlgBase.h</includes>
    <includes id="_rich_rec_ring_8h" name="RichRecRing.h" local="yes" imported="no">Event/RichRecRing.h</includes>
    <includes id="_i_rich_mass_hypothesis_ring_creator_8h" name="IRichMassHypothesisRingCreator.h" local="yes" imported="no">RichRecBase/IRichMassHypothesisRingCreator.h</includes>
    <includes id="_i_rich_ray_trace_cherenkov_cone_8h" name="IRichRayTraceCherenkovCone.h" local="yes" imported="no">RichRecBase/IRichRayTraceCherenkovCone.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECCOMMON_RICHMCMASSHYPORINGSALG_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichPhotonMonitor.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecCommon/v1r10/src/</path>
    <filename>_rich_photon_monitor_8cpp</filename>
    <includes id="_rich_photon_monitor_8h" name="RichPhotonMonitor.h" local="yes" imported="no">RichPhotonMonitor.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>RichPhotonMonitorFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichPhotonMonitor.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecCommon/v1r10/src/</path>
    <filename>_rich_photon_monitor_8h</filename>
    <includes id="_rich_rec_alg_base_8h" name="RichRecAlgBase.h" local="yes" imported="no">RichRecBase/RichRecAlgBase.h</includes>
    <includes id="_rich_det_params_8h" name="RichDetParams.h" local="yes" imported="no">RichRecBase/RichDetParams.h</includes>
    <includes id="_rich_rec_status_8h" name="RichRecStatus.h" local="yes" imported="no">Event/RichRecStatus.h</includes>
    <includes id="_i_rich_rec_m_c_truth_tool_8h" name="IRichRecMCTruthTool.h" local="yes" imported="no">RichRecBase/IRichRecMCTruthTool.h</includes>
    <includes id="_i_rich_particle_properties_8h" name="IRichParticleProperties.h" local="yes" imported="no">RichRecBase/IRichParticleProperties.h</includes>
    <includes id="_i_rich_photon_signal_8h" name="IRichPhotonSignal.h" local="yes" imported="no">RichRecBase/IRichPhotonSignal.h</includes>
    <includes id="_i_rich_expected_track_signal_8h" name="IRichExpectedTrackSignal.h" local="yes" imported="no">RichRecBase/IRichExpectedTrackSignal.h</includes>
    <includes id="_i_rich_geom_eff_8h" name="IRichGeomEff.h" local="yes" imported="no">RichRecBase/IRichGeomEff.h</includes>
    <includes id="_i_rich_cherenkov_angle_8h" name="IRichCherenkovAngle.h" local="yes" imported="no">RichRecBase/IRichCherenkovAngle.h</includes>
    <includes id="_i_rich_rec_geom_tool_8h" name="IRichRecGeomTool.h" local="yes" imported="no">RichRecBase/IRichRecGeomTool.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECCOMMON_RICHPHOTONMONITOR_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichPixelMonitor.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecCommon/v1r10/src/</path>
    <filename>_rich_pixel_monitor_8cpp</filename>
    <includes id="_rich_pixel_monitor_8h" name="RichPixelMonitor.h" local="yes" imported="no">RichPixelMonitor.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>RichPixelMonitorFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichPixelMonitor.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecCommon/v1r10/src/</path>
    <filename>_rich_pixel_monitor_8h</filename>
    <includes id="_rich_rec_alg_base_8h" name="RichRecAlgBase.h" local="yes" imported="no">RichRecBase/RichRecAlgBase.h</includes>
    <includes id="_rich_rec_status_8h" name="RichRecStatus.h" local="yes" imported="no">Event/RichRecStatus.h</includes>
    <includes id="_rich_det_params_8h" name="RichDetParams.h" local="yes" imported="no">RichRecBase/RichDetParams.h</includes>
    <includes id="_i_rich_rec_m_c_truth_tool_8h" name="IRichRecMCTruthTool.h" local="yes" imported="no">RichRecBase/IRichRecMCTruthTool.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECCOMMON_RICHPIXELMONITOR_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichRecBackgroundEsti.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecCommon/v1r10/src/</path>
    <filename>_rich_rec_background_esti_8cpp</filename>
    <includes id="_rich_rec_background_esti_8h" name="RichRecBackgroundEsti.h" local="yes" imported="no">RichRecBackgroundEsti.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>RichRecBackgroundEstiFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichRecBackgroundEsti.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecCommon/v1r10/src/</path>
    <filename>_rich_rec_background_esti_8h</filename>
    <includes id="_rich_rec_alg_base_8h" name="RichRecAlgBase.h" local="yes" imported="no">RichRecBase/RichRecAlgBase.h</includes>
    <includes id="_rich_rec_status_8h" name="RichRecStatus.h" local="yes" imported="no">Event/RichRecStatus.h</includes>
    <includes id="_i_rich_expected_track_signal_8h" name="IRichExpectedTrackSignal.h" local="yes" imported="no">RichRecBase/IRichExpectedTrackSignal.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECCOMMON_RICHRECBACKGROUNDESTI_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichRecCommon_dll.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecCommon/v1r10/src/</path>
    <filename>_rich_rec_common__dll_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>RichRecCommon_load.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecCommon/v1r10/src/</path>
    <filename>_rich_rec_common__load_8cpp</filename>
    <member kind="function">
      <type></type>
      <name>DECLARE_FACTORY_ENTRIES</name>
      <anchor>a0</anchor>
      <arglist>(RichRecCommon)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichRecDataObjVerifier.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecCommon/v1r10/src/</path>
    <filename>_rich_rec_data_obj_verifier_8cpp</filename>
    <includes id="_rich_rec_data_obj_verifier_8h" name="RichRecDataObjVerifier.h" local="yes" imported="no">RichRecDataObjVerifier.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>RichRecDataObjVerifierFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichRecDataObjVerifier.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecCommon/v1r10/src/</path>
    <filename>_rich_rec_data_obj_verifier_8h</filename>
    <includes id="_rich_rec_alg_base_8h" name="RichRecAlgBase.h" local="yes" imported="no">RichRecBase/RichRecAlgBase.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECALGS_RICHRECDATAOBJVERIFIER_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichRecTimeMonitor.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecCommon/v1r10/src/</path>
    <filename>_rich_rec_time_monitor_8cpp</filename>
    <includes id="_rich_rec_time_monitor_8h" name="RichRecTimeMonitor.h" local="yes" imported="no">RichRecTimeMonitor.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>RichRecTimeMonitorFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichRecTimeMonitor.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecCommon/v1r10/src/</path>
    <filename>_rich_rec_time_monitor_8h</filename>
    <includes id="_rich_rec_alg_base_8h" name="RichRecAlgBase.h" local="yes" imported="no">RichRecBase/RichRecAlgBase.h</includes>
    <includes id="_rich_rec_status_8h" name="RichRecStatus.h" local="yes" imported="no">Event/RichRecStatus.h</includes>
    <includes id="_rich_det_params_8h" name="RichDetParams.h" local="yes" imported="no">RichRecBase/RichDetParams.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECCOMMON_RICHRECTIMEMONITOR_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichTrackGeomMoni.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecCommon/v1r10/src/</path>
    <filename>_rich_track_geom_moni_8cpp</filename>
    <includes id="_rich_track_geom_moni_8h" name="RichTrackGeomMoni.h" local="yes" imported="no">RichTrackGeomMoni.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>RichTrackGeomMoniFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichTrackGeomMoni.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecCommon/v1r10/src/</path>
    <filename>_rich_track_geom_moni_8h</filename>
    <includes id="_rich_rec_alg_base_8h" name="RichRecAlgBase.h" local="yes" imported="no">RichRecBase/RichRecAlgBase.h</includes>
    <includes id="_rich_track_selector_8h" name="RichTrackSelector.h" local="yes" imported="no">RichRecBase/RichTrackSelector.h</includes>
    <includes id="_rich_det_params_8h" name="RichDetParams.h" local="yes" imported="no">RichRecBase/RichDetParams.h</includes>
    <includes id="_rich_rec_status_8h" name="RichRecStatus.h" local="yes" imported="no">Event/RichRecStatus.h</includes>
    <includes id="_rich_rec_track_8h" name="RichRecTrack.h" local="yes" imported="no">Event/RichRecTrack.h</includes>
    <includes id="_i_rich_rec_m_c_truth_tool_8h" name="IRichRecMCTruthTool.h" local="yes" imported="no">RichRecBase/IRichRecMCTruthTool.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECCOMMON_RICHTRACKGEOMMONI_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichTrackResolutionMoni.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecCommon/v1r10/src/</path>
    <filename>_rich_track_resolution_moni_8cpp</filename>
    <includes id="_rich_track_resolution_moni_8h" name="RichTrackResolutionMoni.h" local="yes" imported="no">RichTrackResolutionMoni.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>RichTrackResolutionMoniFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichTrackResolutionMoni.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecCommon/v1r10/src/</path>
    <filename>_rich_track_resolution_moni_8h</filename>
    <includes id="_rich_rec_alg_base_8h" name="RichRecAlgBase.h" local="yes" imported="no">RichRecBase/RichRecAlgBase.h</includes>
    <includes id="_rich_track_selector_8h" name="RichTrackSelector.h" local="yes" imported="no">RichRecBase/RichTrackSelector.h</includes>
    <includes id="_rich_det_params_8h" name="RichDetParams.h" local="yes" imported="no">RichRecBase/RichDetParams.h</includes>
    <includes id="_rich_rec_status_8h" name="RichRecStatus.h" local="yes" imported="no">Event/RichRecStatus.h</includes>
    <includes id="_rich_rec_track_8h" name="RichRecTrack.h" local="yes" imported="no">Event/RichRecTrack.h</includes>
    <includes id="_i_rich_rec_m_c_truth_tool_8h" name="IRichRecMCTruthTool.h" local="yes" imported="no">RichRecBase/IRichRecMCTruthTool.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECCOMMON_RICHTRACKRESOLUTIONMONI_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichPhotonCreatorFromMCRichOpticalPhotons.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecMCTools/v1r7/src/</path>
    <filename>_rich_photon_creator_from_m_c_rich_optical_photons_8cpp</filename>
    <includes id="_rich_photon_creator_from_m_c_rich_optical_photons_8h" name="RichPhotonCreatorFromMCRichOpticalPhotons.h" local="yes" imported="no">RichPhotonCreatorFromMCRichOpticalPhotons.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>RichPhotonCreatorFromMCRichOpticalPhotonsFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichPhotonCreatorFromMCRichOpticalPhotons.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecMCTools/v1r7/src/</path>
    <filename>_rich_photon_creator_from_m_c_rich_optical_photons_8h</filename>
    <includes id="_rich_rec_tool_base_8h" name="RichRecToolBase.h" local="yes" imported="no">RichRecBase/RichRecToolBase.h</includes>
    <includes id="_i_rich_photon_creator_8h" name="IRichPhotonCreator.h" local="yes" imported="no">RichRecBase/IRichPhotonCreator.h</includes>
    <includes id="_i_rich_photon_signal_8h" name="IRichPhotonSignal.h" local="yes" imported="no">RichRecBase/IRichPhotonSignal.h</includes>
    <includes id="_i_rich_rec_m_c_truth_tool_8h" name="IRichRecMCTruthTool.h" local="yes" imported="no">RichRecBase/IRichRecMCTruthTool.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECMCTOOLS_RICHPHOTONCREATORFROMMCRICHOPTICALPHOTONS_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichPhotonPredictorUsingMCRichOpticalPhotons.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecMCTools/v1r7/src/</path>
    <filename>_rich_photon_predictor_using_m_c_rich_optical_photons_8cpp</filename>
    <includes id="_rich_photon_predictor_using_m_c_rich_optical_photons_8h" name="RichPhotonPredictorUsingMCRichOpticalPhotons.h" local="yes" imported="no">RichPhotonPredictorUsingMCRichOpticalPhotons.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>RichPhotonPredictorUsingMCRichOpticalPhotonsFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichPhotonPredictorUsingMCRichOpticalPhotons.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecMCTools/v1r7/src/</path>
    <filename>_rich_photon_predictor_using_m_c_rich_optical_photons_8h</filename>
    <includes id="_rich_rec_tool_base_8h" name="RichRecToolBase.h" local="yes" imported="no">RichRecBase/RichRecToolBase.h</includes>
    <includes id="_rich_rec_pixel_8h" name="RichRecPixel.h" local="yes" imported="no">Event/RichRecPixel.h</includes>
    <includes id="_rich_rec_segment_8h" name="RichRecSegment.h" local="yes" imported="no">Event/RichRecSegment.h</includes>
    <includes id="_i_rich_photon_predictor_8h" name="IRichPhotonPredictor.h" local="yes" imported="no">RichRecBase/IRichPhotonPredictor.h</includes>
    <includes id="_i_rich_rec_m_c_truth_tool_8h" name="IRichRecMCTruthTool.h" local="yes" imported="no">RichRecBase/IRichRecMCTruthTool.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECMCTOOLS_RICHPHOTONPREDICTORUSINGMCRICHOPTICALPHOTOS_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichPixelCreatorFromCheatedRichDigits.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecMCTools/v1r7/src/</path>
    <filename>_rich_pixel_creator_from_cheated_rich_digits_8cpp</filename>
    <includes id="_rich_pixel_creator_from_cheated_rich_digits_8h" name="RichPixelCreatorFromCheatedRichDigits.h" local="yes" imported="no">RichPixelCreatorFromCheatedRichDigits.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>RichPixelCreatorFromCheatedRichDigitsFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichPixelCreatorFromCheatedRichDigits.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecMCTools/v1r7/src/</path>
    <filename>_rich_pixel_creator_from_cheated_rich_digits_8h</filename>
    <includes id="_rich_rec_tool_base_8h" name="RichRecToolBase.h" local="yes" imported="no">RichRecBase/RichRecToolBase.h</includes>
    <includes id="_i_rich_pixel_creator_8h" name="IRichPixelCreator.h" local="yes" imported="no">RichRecBase/IRichPixelCreator.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECTOOLS_RICHPIXELCREATORFROMCHEATEDRICHDIGITS_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichPixelCreatorFromMCRichHits.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecMCTools/v1r7/src/</path>
    <filename>_rich_pixel_creator_from_m_c_rich_hits_8cpp</filename>
    <includes id="_rich_pixel_creator_from_m_c_rich_hits_8h" name="RichPixelCreatorFromMCRichHits.h" local="yes" imported="no">RichPixelCreatorFromMCRichHits.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>RichPixelCreatorFromMCRichHitsFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichPixelCreatorFromMCRichHits.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecMCTools/v1r7/src/</path>
    <filename>_rich_pixel_creator_from_m_c_rich_hits_8h</filename>
    <includes id="_rich_rec_tool_base_8h" name="RichRecToolBase.h" local="yes" imported="no">RichRecBase/RichRecToolBase.h</includes>
    <includes id="_i_rich_pixel_creator_8h" name="IRichPixelCreator.h" local="yes" imported="no">RichRecBase/IRichPixelCreator.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECTOOLS_RICHPIXELCREATORFROMMCRICHHITS_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichPixelCreatorFromRichDigitsWithBg.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecMCTools/v1r7/src/</path>
    <filename>_rich_pixel_creator_from_rich_digits_with_bg_8cpp</filename>
    <includes id="_rich_pixel_creator_from_rich_digits_with_bg_8h" name="RichPixelCreatorFromRichDigitsWithBg.h" local="yes" imported="no">RichPixelCreatorFromRichDigitsWithBg.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>RichPixelCreatorFromRichDigitsWithBgFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichPixelCreatorFromRichDigitsWithBg.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecMCTools/v1r7/src/</path>
    <filename>_rich_pixel_creator_from_rich_digits_with_bg_8h</filename>
    <includes id="_rich_rec_tool_base_8h" name="RichRecToolBase.h" local="yes" imported="no">RichRecBase/RichRecToolBase.h</includes>
    <includes id="_i_rich_pixel_creator_8h" name="IRichPixelCreator.h" local="yes" imported="no">RichRecBase/IRichPixelCreator.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECTOOLS_RICHPIXELCREATORFROMRICHDIGITS_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichPixelCreatorFromSignalRichDigits.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecMCTools/v1r7/src/</path>
    <filename>_rich_pixel_creator_from_signal_rich_digits_8cpp</filename>
    <includes id="_rich_pixel_creator_from_signal_rich_digits_8h" name="RichPixelCreatorFromSignalRichDigits.h" local="yes" imported="no">RichPixelCreatorFromSignalRichDigits.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>RichPixelCreatorFromSignalRichDigitsFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichPixelCreatorFromSignalRichDigits.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecMCTools/v1r7/src/</path>
    <filename>_rich_pixel_creator_from_signal_rich_digits_8h</filename>
    <includes id="_rich_rec_tool_base_8h" name="RichRecToolBase.h" local="yes" imported="no">RichRecBase/RichRecToolBase.h</includes>
    <includes id="_i_rich_pixel_creator_8h" name="IRichPixelCreator.h" local="yes" imported="no">RichRecBase/IRichPixelCreator.h</includes>
    <includes id="_i_rich_rec_m_c_truth_tool_8h" name="IRichRecMCTruthTool.h" local="yes" imported="no">RichRecBase/IRichRecMCTruthTool.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECMCTOOLS_RICHPIXELCREATORFROMSIGNALRICHDIGITS_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichRecMCTools_dll.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecMCTools/v1r7/src/</path>
    <filename>_rich_rec_m_c_tools__dll_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>RichRecMCTools_load.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecMCTools/v1r7/src/</path>
    <filename>_rich_rec_m_c_tools__load_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>RichRecMCTruthTool.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecMCTools/v1r7/src/</path>
    <filename>_rich_rec_m_c_truth_tool_8cpp</filename>
    <includes id="_rich_rec_m_c_truth_tool_8h" name="RichRecMCTruthTool.h" local="yes" imported="no">RichRecMCTruthTool.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>RichRecMCTruthToolFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichRecMCTruthTool.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecMCTools/v1r7/src/</path>
    <filename>_rich_rec_m_c_truth_tool_8h</filename>
    <includes id="_rich_rec_tool_base_8h" name="RichRecToolBase.h" local="yes" imported="no">RichRecBase/RichRecToolBase.h</includes>
    <includes id="_rich_rec_segment_8h" name="RichRecSegment.h" local="yes" imported="no">Event/RichRecSegment.h</includes>
    <includes id="_rich_rec_pixel_8h" name="RichRecPixel.h" local="yes" imported="no">Event/RichRecPixel.h</includes>
    <includes id="_rich_rec_track_8h" name="RichRecTrack.h" local="yes" imported="no">Event/RichRecTrack.h</includes>
    <includes id="_rich_rec_photon_8h" name="RichRecPhoton.h" local="yes" imported="no">Event/RichRecPhoton.h</includes>
    <includes id="_i_rich_rec_m_c_truth_tool_8h" name="IRichRecMCTruthTool.h" local="yes" imported="no">RichRecBase/IRichRecMCTruthTool.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECTOOLS_RICHRECMCTRUTHTOOL_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichPIDQC.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecQC/v1r10/src/</path>
    <filename>_rich_p_i_d_q_c_8cpp</filename>
    <includes id="_rich_p_i_d_q_c_8h" name="RichPIDQC.h" local="yes" imported="no">RichPIDQC.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>RichPIDQCFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichPIDQC.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecQC/v1r10/src/</path>
    <filename>_rich_p_i_d_q_c_8h</filename>
    <includes id="_rich_track_selector_8h" name="RichTrackSelector.h" local="yes" imported="no">RichRecBase/RichTrackSelector.h</includes>
    <includes id="_rich_det_params_8h" name="RichDetParams.h" local="yes" imported="no">RichRecBase/RichDetParams.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECQC_RICHPIDQC_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichRecoQC.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecQC/v1r10/src/</path>
    <filename>_rich_reco_q_c_8cpp</filename>
    <includes id="_rich_reco_q_c_8h" name="RichRecoQC.h" local="yes" imported="no">RichRecoQC.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>RichRecoQCFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichRecoQC.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecQC/v1r10/src/</path>
    <filename>_rich_reco_q_c_8h</filename>
    <includes id="_rich_rec_alg_base_8h" name="RichRecAlgBase.h" local="yes" imported="no">RichRecBase/RichRecAlgBase.h</includes>
    <includes id="_i_rich_rec_m_c_truth_tool_8h" name="IRichRecMCTruthTool.h" local="yes" imported="no">RichRecBase/IRichRecMCTruthTool.h</includes>
    <includes id="_rich_det_params_8h" name="RichDetParams.h" local="yes" imported="no">RichRecBase/RichDetParams.h</includes>
    <includes id="_rich_rec_status_8h" name="RichRecStatus.h" local="yes" imported="no">Event/RichRecStatus.h</includes>
    <includes id="_i_rich_particle_properties_8h" name="IRichParticleProperties.h" local="yes" imported="no">RichRecBase/IRichParticleProperties.h</includes>
    <includes id="_i_rich_cherenkov_angle_8h" name="IRichCherenkovAngle.h" local="yes" imported="no">RichRecBase/IRichCherenkovAngle.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECQC_RICHRECOQC_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichRecQC_dll.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecQC/v1r10/src/</path>
    <filename>_rich_rec_q_c__dll_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>RichRecQC_load.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecQC/v1r10/src/</path>
    <filename>_rich_rec_q_c__load_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>RichBinnedCKResVthetaForTrStoredTracks.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/src/</path>
    <filename>_rich_binned_c_k_res_vtheta_for_tr_stored_tracks_8cpp</filename>
    <includes id="_rich_binned_c_k_res_vtheta_for_tr_stored_tracks_8h" name="RichBinnedCKResVthetaForTrStoredTracks.h" local="yes" imported="no">RichBinnedCKResVthetaForTrStoredTracks.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>RichBinnedCKResVthetaForTrStoredTracksFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichBinnedCKResVthetaForTrStoredTracks.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/src/</path>
    <filename>_rich_binned_c_k_res_vtheta_for_tr_stored_tracks_8h</filename>
    <includes id="_rich_rec_tool_base_8h" name="RichRecToolBase.h" local="yes" imported="no">RichRecBase/RichRecToolBase.h</includes>
    <includes id="_rich_rec_segment_8h" name="RichRecSegment.h" local="yes" imported="no">Event/RichRecSegment.h</includes>
    <includes id="_i_rich_cherenkov_resolution_8h" name="IRichCherenkovResolution.h" local="yes" imported="no">RichRecBase/IRichCherenkovResolution.h</includes>
    <includes id="_i_rich_cherenkov_angle_8h" name="IRichCherenkovAngle.h" local="yes" imported="no">RichRecBase/IRichCherenkovAngle.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECTOOLS_RICHBINNEDCKRESVTHETAFORTRSTOREDTRACKS_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichCherenkovAngle.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/src/</path>
    <filename>_rich_cherenkov_angle_8cpp</filename>
    <includes id="_rich_cherenkov_angle_8h" name="RichCherenkovAngle.h" local="yes" imported="no">RichCherenkovAngle.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>RichCherenkovAngleFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichCherenkovAngle.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/src/</path>
    <filename>_rich_cherenkov_angle_8h</filename>
    <includes id="_rich_rec_tool_base_8h" name="RichRecToolBase.h" local="yes" imported="no">RichRecBase/RichRecToolBase.h</includes>
    <includes id="_rich_rec_segment_8h" name="RichRecSegment.h" local="yes" imported="no">Event/RichRecSegment.h</includes>
    <includes id="_i_rich_cherenkov_angle_8h" name="IRichCherenkovAngle.h" local="yes" imported="no">RichRecBase/IRichCherenkovAngle.h</includes>
    <includes id="_i_rich_expected_track_signal_8h" name="IRichExpectedTrackSignal.h" local="yes" imported="no">RichRecBase/IRichExpectedTrackSignal.h</includes>
    <includes id="_i_rich_particle_properties_8h" name="IRichParticleProperties.h" local="yes" imported="no">RichRecBase/IRichParticleProperties.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECTOOLS_RICHCHERENKOVANGLE_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichDelegatedTrackCreatorFromTrStoredTracks.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/src/</path>
    <filename>_rich_delegated_track_creator_from_tr_stored_tracks_8cpp</filename>
    <includes id="_rich_delegated_track_creator_from_tr_stored_tracks_8h" name="RichDelegatedTrackCreatorFromTrStoredTracks.h" local="yes" imported="no">RichDelegatedTrackCreatorFromTrStoredTracks.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>RichDelegatedTrackCreatorFromTrStoredTracksFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichDelegatedTrackCreatorFromTrStoredTracks.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/src/</path>
    <filename>_rich_delegated_track_creator_from_tr_stored_tracks_8h</filename>
    <includes id="_rich_rec_tool_base_8h" name="RichRecToolBase.h" local="yes" imported="no">RichRecBase/RichRecToolBase.h</includes>
    <includes id="_i_rich_track_creator_8h" name="IRichTrackCreator.h" local="yes" imported="no">RichRecBase/IRichTrackCreator.h</includes>
    <includes id="_rich_rec_track_8h" name="RichRecTrack.h" local="yes" imported="no">Event/RichRecTrack.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECTOOLS_RichDelegatedTrackCreatorFromTrStoredTracks_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichExpectedTrackSignal.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/src/</path>
    <filename>_rich_expected_track_signal_8cpp</filename>
    <includes id="_rich_expected_track_signal_8h" name="RichExpectedTrackSignal.h" local="yes" imported="no">RichExpectedTrackSignal.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>RichExpectedTrackSignalFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichExpectedTrackSignal.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/src/</path>
    <filename>_rich_expected_track_signal_8h</filename>
    <includes id="_rich_rec_tool_base_8h" name="RichRecToolBase.h" local="yes" imported="no">RichRecBase/RichRecToolBase.h</includes>
    <includes id="_rich_rec_segment_8h" name="RichRecSegment.h" local="yes" imported="no">Event/RichRecSegment.h</includes>
    <includes id="_rich_rec_track_8h" name="RichRecTrack.h" local="yes" imported="no">Event/RichRecTrack.h</includes>
    <includes id="_i_rich_expected_track_signal_8h" name="IRichExpectedTrackSignal.h" local="yes" imported="no">RichRecBase/IRichExpectedTrackSignal.h</includes>
    <includes id="_i_rich_geom_eff_8h" name="IRichGeomEff.h" local="yes" imported="no">RichRecBase/IRichGeomEff.h</includes>
    <includes id="_i_rich_sellmeir_func_8h" name="IRichSellmeirFunc.h" local="yes" imported="no">RichRecBase/IRichSellmeirFunc.h</includes>
    <includes id="_i_rich_signal_detection_eff_8h" name="IRichSignalDetectionEff.h" local="yes" imported="no">RichRecBase/IRichSignalDetectionEff.h</includes>
    <includes id="_i_rich_particle_properties_8h" name="IRichParticleProperties.h" local="yes" imported="no">RichRecBase/IRichParticleProperties.h</includes>
    <includes id="_i_rich_rayleigh_scatter_8h" name="IRichRayleighScatter.h" local="yes" imported="no">RichRecBase/IRichRayleighScatter.h</includes>
    <includes id="_i_rich_gas_quartz_window_abs_8h" name="IRichGasQuartzWindowAbs.h" local="yes" imported="no">RichRecBase/IRichGasQuartzWindowAbs.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECTOOLS_RICHEXPECTEDTRACKSIGNAL_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichFunctionalCKResVpForTrStoredTracks.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/src/</path>
    <filename>_rich_functional_c_k_res_vp_for_tr_stored_tracks_8cpp</filename>
    <includes id="_rich_functional_c_k_res_vp_for_tr_stored_tracks_8h" name="RichFunctionalCKResVpForTrStoredTracks.h" local="yes" imported="no">RichFunctionalCKResVpForTrStoredTracks.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>RichFunctionalCKResVpForTrStoredTracksFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichFunctionalCKResVpForTrStoredTracks.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/src/</path>
    <filename>_rich_functional_c_k_res_vp_for_tr_stored_tracks_8h</filename>
    <includes id="_rich_rec_tool_base_8h" name="RichRecToolBase.h" local="yes" imported="no">RichRecBase/RichRecToolBase.h</includes>
    <includes id="_i_rich_cherenkov_resolution_8h" name="IRichCherenkovResolution.h" local="yes" imported="no">RichRecBase/IRichCherenkovResolution.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECTOOLS_RICHFUNCTIONALCKRESVPFORTRSTOREDTRACKS_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichFunctionalRayleighScatter.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/src/</path>
    <filename>_rich_functional_rayleigh_scatter_8cpp</filename>
    <includes id="_rich_functional_rayleigh_scatter_8h" name="RichFunctionalRayleighScatter.h" local="yes" imported="no">RichFunctionalRayleighScatter.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>RichFunctionalRayleighScatterFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichFunctionalRayleighScatter.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/src/</path>
    <filename>_rich_functional_rayleigh_scatter_8h</filename>
    <includes id="_rich_rec_tool_base_8h" name="RichRecToolBase.h" local="yes" imported="no">RichRecBase/RichRecToolBase.h</includes>
    <includes id="_rich_rec_segment_8h" name="RichRecSegment.h" local="yes" imported="no">Event/RichRecSegment.h</includes>
    <includes id="_i_rich_rayleigh_scatter_8h" name="IRichRayleighScatter.h" local="yes" imported="no">RichRecBase/IRichRayleighScatter.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECTOOLS_RICHFUNCTIONALRAYLEIGHSCATTER_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichGeomEffFixedValue.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/src/</path>
    <filename>_rich_geom_eff_fixed_value_8cpp</filename>
    <includes id="_rich_geom_eff_fixed_value_8h" name="RichGeomEffFixedValue.h" local="yes" imported="no">RichGeomEffFixedValue.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>RichGeomEffFixedValueFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichGeomEffFixedValue.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/src/</path>
    <filename>_rich_geom_eff_fixed_value_8h</filename>
    <includes id="_rich_rec_tool_base_8h" name="RichRecToolBase.h" local="yes" imported="no">RichRecBase/RichRecToolBase.h</includes>
    <includes id="_rich_rec_segment_8h" name="RichRecSegment.h" local="yes" imported="no">Event/RichRecSegment.h</includes>
    <includes id="_i_rich_cherenkov_angle_8h" name="IRichCherenkovAngle.h" local="yes" imported="no">RichRecBase/IRichCherenkovAngle.h</includes>
    <includes id="_i_rich_geom_eff_8h" name="IRichGeomEff.h" local="yes" imported="no">RichRecBase/IRichGeomEff.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECTOOLS_RICHGEOMEFFFIXEDVALUE_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichGeomEffPhotonTracing.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/src/</path>
    <filename>_rich_geom_eff_photon_tracing_8cpp</filename>
    <includes id="_rich_geom_eff_photon_tracing_8h" name="RichGeomEffPhotonTracing.h" local="yes" imported="no">RichGeomEffPhotonTracing.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>RichGeomEffPhotonTracingFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichGeomEffPhotonTracing.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/src/</path>
    <filename>_rich_geom_eff_photon_tracing_8h</filename>
    <includes id="_rich_rec_tool_base_8h" name="RichRecToolBase.h" local="yes" imported="no">RichRecBase/RichRecToolBase.h</includes>
    <includes id="_rich_rec_segment_8h" name="RichRecSegment.h" local="yes" imported="no">Event/RichRecSegment.h</includes>
    <includes id="_i_rich_cherenkov_angle_8h" name="IRichCherenkovAngle.h" local="yes" imported="no">RichRecBase/IRichCherenkovAngle.h</includes>
    <includes id="_i_rich_geom_eff_8h" name="IRichGeomEff.h" local="yes" imported="no">RichRecBase/IRichGeomEff.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECTOOLS_RICHGEOMEFFPHOTONTRACING_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichInterpCKResVpForTrStoredTracks.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/src/</path>
    <filename>_rich_interp_c_k_res_vp_for_tr_stored_tracks_8cpp</filename>
    <includes id="_rich_interp_c_k_res_vp_for_tr_stored_tracks_8h" name="RichInterpCKResVpForTrStoredTracks.h" local="yes" imported="no">RichInterpCKResVpForTrStoredTracks.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>RichInterpCKResVpForTrStoredTracksFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichInterpCKResVpForTrStoredTracks.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/src/</path>
    <filename>_rich_interp_c_k_res_vp_for_tr_stored_tracks_8h</filename>
    <includes id="_rich_rec_tool_base_8h" name="RichRecToolBase.h" local="yes" imported="no">RichRecBase/RichRecToolBase.h</includes>
    <includes id="_rich_rec_segment_8h" name="RichRecSegment.h" local="yes" imported="no">Event/RichRecSegment.h</includes>
    <includes id="_i_rich_cherenkov_resolution_8h" name="IRichCherenkovResolution.h" local="yes" imported="no">RichRecBase/IRichCherenkovResolution.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECTOOLS_RICHINTERPCKRESVPFORTRSTOREDTRACKS_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichInterpCKResVthetaForTrStoredTracks.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/src/</path>
    <filename>_rich_interp_c_k_res_vtheta_for_tr_stored_tracks_8cpp</filename>
    <includes id="_rich_interp_c_k_res_vtheta_for_tr_stored_tracks_8h" name="RichInterpCKResVthetaForTrStoredTracks.h" local="yes" imported="no">RichInterpCKResVthetaForTrStoredTracks.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>RichInterpCKResVthetaForTrStoredTracksFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichInterpCKResVthetaForTrStoredTracks.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/src/</path>
    <filename>_rich_interp_c_k_res_vtheta_for_tr_stored_tracks_8h</filename>
    <includes id="_rich_rec_tool_base_8h" name="RichRecToolBase.h" local="yes" imported="no">RichRecBase/RichRecToolBase.h</includes>
    <includes id="_rich_rec_segment_8h" name="RichRecSegment.h" local="yes" imported="no">Event/RichRecSegment.h</includes>
    <includes id="_i_rich_cherenkov_resolution_8h" name="IRichCherenkovResolution.h" local="yes" imported="no">RichRecBase/IRichCherenkovResolution.h</includes>
    <includes id="_i_rich_cherenkov_angle_8h" name="IRichCherenkovAngle.h" local="yes" imported="no">RichRecBase/IRichCherenkovAngle.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECTOOLS_RICHINTERPCKRESVTHETAFORTRSTOREDTRACKS_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichMassHypothesisRingCreator.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/src/</path>
    <filename>_rich_mass_hypothesis_ring_creator_8cpp</filename>
    <includes id="_rich_mass_hypothesis_ring_creator_8h" name="RichMassHypothesisRingCreator.h" local="yes" imported="no">RichMassHypothesisRingCreator.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>RichMassHypothesisRingCreatorFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichMassHypothesisRingCreator.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/src/</path>
    <filename>_rich_mass_hypothesis_ring_creator_8h</filename>
    <includes id="_rich_rec_tool_base_8h" name="RichRecToolBase.h" local="yes" imported="no">RichRecBase/RichRecToolBase.h</includes>
    <includes id="_i_rich_mass_hypothesis_ring_creator_8h" name="IRichMassHypothesisRingCreator.h" local="yes" imported="no">RichRecBase/IRichMassHypothesisRingCreator.h</includes>
    <includes id="_i_rich_cherenkov_angle_8h" name="IRichCherenkovAngle.h" local="yes" imported="no">RichRecBase/IRichCherenkovAngle.h</includes>
    <includes id="_i_rich_ray_trace_cherenkov_cone_8h" name="IRichRayTraceCherenkovCone.h" local="yes" imported="no">RichRecBase/IRichRayTraceCherenkovCone.h</includes>
    <includes id="_rich_rec_ring_8h" name="RichRecRing.h" local="yes" imported="no">Event/RichRecRing.h</includes>
    <includes id="_rich_rec_segment_8h" name="RichRecSegment.h" local="yes" imported="no">Event/RichRecSegment.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECTOOLS_RICHMASSHYPOTHESISRINGCREATOR_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichParticleProperties.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/src/</path>
    <filename>_rich_particle_properties_8cpp</filename>
    <includes id="_rich_particle_properties_8h" name="RichParticleProperties.h" local="yes" imported="no">RichParticleProperties.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>RichParticlePropertiesFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichParticleProperties.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/src/</path>
    <filename>_rich_particle_properties_8h</filename>
    <includes id="_rich_rec_tool_base_8h" name="RichRecToolBase.h" local="yes" imported="no">RichRecBase/RichRecToolBase.h</includes>
    <includes id="_rich_rec_segment_8h" name="RichRecSegment.h" local="yes" imported="no">Event/RichRecSegment.h</includes>
    <includes id="_i_rich_particle_properties_8h" name="IRichParticleProperties.h" local="yes" imported="no">RichRecBase/IRichParticleProperties.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECTOOLS_RICHPARTICLEPROPERTIES_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichPhotonCreator.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/src/</path>
    <filename>_rich_photon_creator_8cpp</filename>
    <includes id="_rich_photon_creator_8h" name="RichPhotonCreator.h" local="yes" imported="no">RichPhotonCreator.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>RichPhotonCreatorFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichPhotonCreator.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/src/</path>
    <filename>_rich_photon_creator_8h</filename>
    <includes id="_rich_rec_tool_base_8h" name="RichRecToolBase.h" local="yes" imported="no">RichRecBase/RichRecToolBase.h</includes>
    <includes id="_i_rich_photon_creator_8h" name="IRichPhotonCreator.h" local="yes" imported="no">RichRecBase/IRichPhotonCreator.h</includes>
    <includes id="_i_rich_photon_predictor_8h" name="IRichPhotonPredictor.h" local="yes" imported="no">RichRecBase/IRichPhotonPredictor.h</includes>
    <includes id="_i_rich_photon_signal_8h" name="IRichPhotonSignal.h" local="yes" imported="no">RichRecBase/IRichPhotonSignal.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECTOOLS_RICHPHOTONCREATOR_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichPhotonPredictor.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/src/</path>
    <filename>_rich_photon_predictor_8cpp</filename>
    <includes id="_rich_photon_predictor_8h" name="RichPhotonPredictor.h" local="yes" imported="no">RichPhotonPredictor.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>RichPhotonPredictorFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichPhotonPredictor.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/src/</path>
    <filename>_rich_photon_predictor_8h</filename>
    <includes id="_rich_rec_tool_base_8h" name="RichRecToolBase.h" local="yes" imported="no">RichRecBase/RichRecToolBase.h</includes>
    <includes id="_rich_rec_pixel_8h" name="RichRecPixel.h" local="yes" imported="no">Event/RichRecPixel.h</includes>
    <includes id="_rich_rec_segment_8h" name="RichRecSegment.h" local="yes" imported="no">Event/RichRecSegment.h</includes>
    <includes id="_i_rich_photon_predictor_8h" name="IRichPhotonPredictor.h" local="yes" imported="no">RichRecBase/IRichPhotonPredictor.h</includes>
    <includes id="_i_rich_rec_geom_tool_8h" name="IRichRecGeomTool.h" local="yes" imported="no">RichRecBase/IRichRecGeomTool.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECTOOLS_RICHPHOTONPREDICTOR_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichPhotonPredictorUsingRings.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/src/</path>
    <filename>_rich_photon_predictor_using_rings_8cpp</filename>
    <includes id="_rich_photon_predictor_using_rings_8h" name="RichPhotonPredictorUsingRings.h" local="yes" imported="no">RichPhotonPredictorUsingRings.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>RichPhotonPredictorUsingRingsFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichPhotonPredictorUsingRings.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/src/</path>
    <filename>_rich_photon_predictor_using_rings_8h</filename>
    <includes id="_rich_rec_tool_base_8h" name="RichRecToolBase.h" local="yes" imported="no">RichRecBase/RichRecToolBase.h</includes>
    <includes id="_rich_rec_ring_8h" name="RichRecRing.h" local="yes" imported="no">Event/RichRecRing.h</includes>
    <includes id="_rich_rec_pixel_8h" name="RichRecPixel.h" local="yes" imported="no">Event/RichRecPixel.h</includes>
    <includes id="_rich_rec_segment_8h" name="RichRecSegment.h" local="yes" imported="no">Event/RichRecSegment.h</includes>
    <includes id="_i_rich_photon_predictor_8h" name="IRichPhotonPredictor.h" local="yes" imported="no">RichRecBase/IRichPhotonPredictor.h</includes>
    <includes id="_i_rich_rec_geom_tool_8h" name="IRichRecGeomTool.h" local="yes" imported="no">RichRecBase/IRichRecGeomTool.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECTOOLS_RICHPHOTONPREDICTORUSINGRINGS_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichPhotonSignal.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/src/</path>
    <filename>_rich_photon_signal_8cpp</filename>
    <includes id="_rich_photon_signal_8h" name="RichPhotonSignal.h" local="yes" imported="no">RichPhotonSignal.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>RichPhotonSignalFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichPhotonSignal.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/src/</path>
    <filename>_rich_photon_signal_8h</filename>
    <includes id="_rich_rec_tool_base_8h" name="RichRecToolBase.h" local="yes" imported="no">RichRecBase/RichRecToolBase.h</includes>
    <includes id="_rich_rec_photon_8h" name="RichRecPhoton.h" local="yes" imported="no">Event/RichRecPhoton.h</includes>
    <includes id="_i_rich_photon_signal_8h" name="IRichPhotonSignal.h" local="yes" imported="no">RichRecBase/IRichPhotonSignal.h</includes>
    <includes id="_i_rich_expected_track_signal_8h" name="IRichExpectedTrackSignal.h" local="yes" imported="no">RichRecBase/IRichExpectedTrackSignal.h</includes>
    <includes id="_i_rich_cherenkov_angle_8h" name="IRichCherenkovAngle.h" local="yes" imported="no">RichRecBase/IRichCherenkovAngle.h</includes>
    <includes id="_i_rich_cherenkov_resolution_8h" name="IRichCherenkovResolution.h" local="yes" imported="no">RichRecBase/IRichCherenkovResolution.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECTOOLS_RICHPHOTONSIGNAL_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichPixelCreatorFromRawBuffer.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/src/</path>
    <filename>_rich_pixel_creator_from_raw_buffer_8cpp</filename>
    <includes id="_rich_pixel_creator_from_raw_buffer_8h" name="RichPixelCreatorFromRawBuffer.h" local="yes" imported="no">RichPixelCreatorFromRawBuffer.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>RichPixelCreatorFromRawBufferFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichPixelCreatorFromRawBuffer.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/src/</path>
    <filename>_rich_pixel_creator_from_raw_buffer_8h</filename>
    <includes id="_rich_rec_tool_base_8h" name="RichRecToolBase.h" local="yes" imported="no">RichRecBase/RichRecToolBase.h</includes>
    <includes id="_i_rich_pixel_creator_8h" name="IRichPixelCreator.h" local="yes" imported="no">RichRecBase/IRichPixelCreator.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECTOOLS_RICHPIXELCREATORFROMRAWBUFFER_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichPixelCreatorFromRichDigits.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/src/</path>
    <filename>_rich_pixel_creator_from_rich_digits_8cpp</filename>
    <includes id="_rich_pixel_creator_from_rich_digits_8h" name="RichPixelCreatorFromRichDigits.h" local="yes" imported="no">RichPixelCreatorFromRichDigits.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>RichPixelCreatorFromRichDigitsFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichPixelCreatorFromRichDigits.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/src/</path>
    <filename>_rich_pixel_creator_from_rich_digits_8h</filename>
    <includes id="_rich_rec_tool_base_8h" name="RichRecToolBase.h" local="yes" imported="no">RichRecBase/RichRecToolBase.h</includes>
    <includes id="_i_rich_pixel_creator_8h" name="IRichPixelCreator.h" local="yes" imported="no">RichRecBase/IRichPixelCreator.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECTOOLS_RICHPIXELCREATORFROMRICHDIGITS_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichRayTraceCherenkovCone.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/src/</path>
    <filename>_rich_ray_trace_cherenkov_cone_8cpp</filename>
    <includes id="_rich_ray_trace_cherenkov_cone_8h" name="RichRayTraceCherenkovCone.h" local="yes" imported="no">RichRayTraceCherenkovCone.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>RichRayTraceCherenkovConeFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichRayTraceCherenkovCone.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/src/</path>
    <filename>_rich_ray_trace_cherenkov_cone_8h</filename>
    <includes id="_rich_rec_tool_base_8h" name="RichRecToolBase.h" local="yes" imported="no">RichRecBase/RichRecToolBase.h</includes>
    <includes id="_i_rich_ray_trace_cherenkov_cone_8h" name="IRichRayTraceCherenkovCone.h" local="yes" imported="no">RichRecBase/IRichRayTraceCherenkovCone.h</includes>
    <includes id="_i_rich_cherenkov_angle_8h" name="IRichCherenkovAngle.h" local="yes" imported="no">RichRecBase/IRichCherenkovAngle.h</includes>
    <includes id="_rich_rec_ring_8h" name="RichRecRing.h" local="yes" imported="no">Event/RichRecRing.h</includes>
    <includes id="_rich_rec_segment_8h" name="RichRecSegment.h" local="yes" imported="no">Event/RichRecSegment.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECBASE_RICHRAYTRACECHERENKOVCONE_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichRecGeomTool.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/src/</path>
    <filename>_rich_rec_geom_tool_8cpp</filename>
    <includes id="_rich_rec_geom_tool_8h" name="RichRecGeomTool.h" local="yes" imported="no">RichRecGeomTool.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>RichRecGeomToolFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichRecGeomTool.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/src/</path>
    <filename>_rich_rec_geom_tool_8h</filename>
    <includes id="_rich_rec_tool_base_8h" name="RichRecToolBase.h" local="yes" imported="no">RichRecBase/RichRecToolBase.h</includes>
    <includes id="_rich_rec_pixel_8h" name="RichRecPixel.h" local="yes" imported="no">Event/RichRecPixel.h</includes>
    <includes id="_rich_rec_segment_8h" name="RichRecSegment.h" local="yes" imported="no">Event/RichRecSegment.h</includes>
    <includes id="_i_rich_rec_geom_tool_8h" name="IRichRecGeomTool.h" local="yes" imported="no">RichRecBase/IRichRecGeomTool.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECTOOLS_RICHRECGEOMTOOL_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichRecTools_dll.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/src/</path>
    <filename>_rich_rec_tools__dll_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>RichRecTools_load.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/src/</path>
    <filename>_rich_rec_tools__load_8cpp</filename>
    <member kind="function">
      <type></type>
      <name>DECLARE_FACTORY_ENTRIES</name>
      <anchor>a0</anchor>
      <arglist>(RichRecTools)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichSegmentCreator.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/src/</path>
    <filename>_rich_segment_creator_8cpp</filename>
    <includes id="_rich_segment_creator_8h" name="RichSegmentCreator.h" local="yes" imported="no">RichSegmentCreator.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>RichSegmentCreatorFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichSegmentCreator.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/src/</path>
    <filename>_rich_segment_creator_8h</filename>
    <includes id="_rich_rec_tool_base_8h" name="RichRecToolBase.h" local="yes" imported="no">RichRecBase/RichRecToolBase.h</includes>
    <includes id="_rich_rec_segment_8h" name="RichRecSegment.h" local="yes" imported="no">Event/RichRecSegment.h</includes>
    <includes id="_i_rich_segment_creator_8h" name="IRichSegmentCreator.h" local="yes" imported="no">RichRecBase/IRichSegmentCreator.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECTOOLS_RICHRECSEGMENTTOOL_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichSellmeirFunc.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/src/</path>
    <filename>_rich_sellmeir_func_8cpp</filename>
    <includes id="_rich_sellmeir_func_8h" name="RichSellmeirFunc.h" local="yes" imported="no">RichSellmeirFunc.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>RichSellmeirFuncFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichSellmeirFunc.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/src/</path>
    <filename>_rich_sellmeir_func_8h</filename>
    <includes id="_rich_rec_tool_base_8h" name="RichRecToolBase.h" local="yes" imported="no">RichRecBase/RichRecToolBase.h</includes>
    <includes id="_rich_rec_segment_8h" name="RichRecSegment.h" local="yes" imported="no">Event/RichRecSegment.h</includes>
    <includes id="_i_rich_sellmeir_func_8h" name="IRichSellmeirFunc.h" local="yes" imported="no">RichRecBase/IRichSellmeirFunc.h</includes>
    <includes id="_i_rich_particle_properties_8h" name="IRichParticleProperties.h" local="yes" imported="no">RichRecBase/IRichParticleProperties.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECTOOLS_RICHSELLMEIRFUNC_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichStatusCreator.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/src/</path>
    <filename>_rich_status_creator_8cpp</filename>
    <includes id="_rich_status_creator_8h" name="RichStatusCreator.h" local="yes" imported="no">RichStatusCreator.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>RichStatusCreatorFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichStatusCreator.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/src/</path>
    <filename>_rich_status_creator_8h</filename>
    <includes id="_rich_rec_tool_base_8h" name="RichRecToolBase.h" local="yes" imported="no">RichRecBase/RichRecToolBase.h</includes>
    <includes id="_i_rich_status_creator_8h" name="IRichStatusCreator.h" local="yes" imported="no">RichRecBase/IRichStatusCreator.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECTOOLS_RICHSTATUSCREATOR_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichTabulatedGasQuartzWindowAbs.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/src/</path>
    <filename>_rich_tabulated_gas_quartz_window_abs_8cpp</filename>
    <includes id="_rich_tabulated_gas_quartz_window_abs_8h" name="RichTabulatedGasQuartzWindowAbs.h" local="yes" imported="no">RichTabulatedGasQuartzWindowAbs.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>RichTabulatedGasQuartzWindowAbsFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichTabulatedGasQuartzWindowAbs.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/src/</path>
    <filename>_rich_tabulated_gas_quartz_window_abs_8h</filename>
    <includes id="_rich_rec_tool_base_8h" name="RichRecToolBase.h" local="yes" imported="no">RichRecBase/RichRecToolBase.h</includes>
    <includes id="_rich_rec_segment_8h" name="RichRecSegment.h" local="yes" imported="no">Event/RichRecSegment.h</includes>
    <includes id="_i_rich_gas_quartz_window_abs_8h" name="IRichGasQuartzWindowAbs.h" local="yes" imported="no">RichRecBase/IRichGasQuartzWindowAbs.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECTOOLS_RICHGASQUARTZWINDOWABS_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichTabulatedRayleighScatter.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/src/</path>
    <filename>_rich_tabulated_rayleigh_scatter_8cpp</filename>
    <includes id="_rich_tabulated_rayleigh_scatter_8h" name="RichTabulatedRayleighScatter.h" local="yes" imported="no">RichTabulatedRayleighScatter.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>RichTabulatedRayleighScatterFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichTabulatedRayleighScatter.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/src/</path>
    <filename>_rich_tabulated_rayleigh_scatter_8h</filename>
    <includes id="_rich_rec_tool_base_8h" name="RichRecToolBase.h" local="yes" imported="no">RichRecBase/RichRecToolBase.h</includes>
    <includes id="_rich_rec_segment_8h" name="RichRecSegment.h" local="yes" imported="no">Event/RichRecSegment.h</includes>
    <includes id="_i_rich_rayleigh_scatter_8h" name="IRichRayleighScatter.h" local="yes" imported="no">RichRecBase/IRichRayleighScatter.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECTOOLS_RICHTABULATEDRAYLEIGHSCATTER_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichTabulatedSignalDetectionEff.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/src/</path>
    <filename>_rich_tabulated_signal_detection_eff_8cpp</filename>
    <includes id="_rich_tabulated_signal_detection_eff_8h" name="RichTabulatedSignalDetectionEff.h" local="yes" imported="no">RichTabulatedSignalDetectionEff.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>RichTabulatedSignalDetectionEffFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichTabulatedSignalDetectionEff.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/src/</path>
    <filename>_rich_tabulated_signal_detection_eff_8h</filename>
    <includes id="_rich_rec_tool_base_8h" name="RichRecToolBase.h" local="yes" imported="no">RichRecBase/RichRecToolBase.h</includes>
    <includes id="_i_rich_signal_detection_eff_8h" name="IRichSignalDetectionEff.h" local="yes" imported="no">RichRecBase/IRichSignalDetectionEff.h</includes>
    <includes id="_rich_rec_segment_8h" name="RichRecSegment.h" local="yes" imported="no">Event/RichRecSegment.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECTOOLS_RICHTABULATEDSIGNALDETECTIONEFF_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichTrackCreatorFromTrStoredTracks.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/src/</path>
    <filename>_rich_track_creator_from_tr_stored_tracks_8cpp</filename>
    <includes id="_rich_track_creator_from_tr_stored_tracks_8h" name="RichTrackCreatorFromTrStoredTracks.h" local="yes" imported="no">RichTrackCreatorFromTrStoredTracks.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>RichTrackCreatorFromTrStoredTracksFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichTrackCreatorFromTrStoredTracks.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/src/</path>
    <filename>_rich_track_creator_from_tr_stored_tracks_8h</filename>
    <includes id="_rich_rec_tool_base_8h" name="RichRecToolBase.h" local="yes" imported="no">RichRecBase/RichRecToolBase.h</includes>
    <includes id="_rich_track_selector_8h" name="RichTrackSelector.h" local="yes" imported="no">RichRecBase/RichTrackSelector.h</includes>
    <includes id="_i_rich_track_creator_8h" name="IRichTrackCreator.h" local="yes" imported="no">RichRecBase/IRichTrackCreator.h</includes>
    <includes id="_i_rich_expected_track_signal_8h" name="IRichExpectedTrackSignal.h" local="yes" imported="no">RichRecBase/IRichExpectedTrackSignal.h</includes>
    <includes id="_i_rich_mass_hypothesis_ring_creator_8h" name="IRichMassHypothesisRingCreator.h" local="yes" imported="no">RichRecBase/IRichMassHypothesisRingCreator.h</includes>
    <includes id="_rich_rec_track_8h" name="RichRecTrack.h" local="yes" imported="no">Event/RichRecTrack.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECTOOLS_RichTrackCreatorFromTrStoredTracks_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichRingRefit.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRingRefit/v1r9/Event/</path>
    <filename>_rich_ring_refit_8h</filename>
    <includes id="_fast_ring_fitter_8h" name="FastRingFitter.h" local="yes" imported="no">RichRingRefit/FastRingFitter.h</includes>
    <includes id="_rich_rec_segment_8h" name="RichRecSegment.h" local="yes" imported="no">Event/RichRecSegment.h</includes>
    <includes id="_rich_rec_photon_8h" name="RichRecPhoton.h" local="yes" imported="no">Event/RichRecPhoton.h</includes>
    <includes id="_rich_ring_refit_p_i_d_8h" name="RichRingRefitPID.h" local="yes" imported="no">Event/RichRingRefitPID.h</includes>
    <namespace>RichRingRefitLocation</namespace>
    <member kind="define">
      <type>#define</type>
      <name>RichRingRefit_RichRingRefit_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KeyedContainer&lt; RichRingRefit, Containers::HashMap &gt;</type>
      <name>RichRingRefits</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; RichRingRefit * &gt;</type>
      <name>RichRingRefitVector</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a5</anchor>
      <arglist>(std::ostream &amp;str, const RichRingRefit &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichRingRefitPID.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRingRefit/v1r9/Event/</path>
    <filename>_rich_ring_refit_p_i_d_8h</filename>
    <namespace>RichRingRefitPIDLocation</namespace>
    <member kind="define">
      <type>#define</type>
      <name>RichRingRefit_RichRingRefitPID_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KeyedContainer&lt; RichRingRefitPID, Containers::HashMap &gt;</type>
      <name>RichRingRefitPIDs</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; RichRingRefitPID * &gt;</type>
      <name>RichRingRefitPIDVector</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a5</anchor>
      <arglist>(std::ostream &amp;str, const RichRingRefitPID &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FastRingFitter.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRingRefit/v1r9/RichRingRefit/</path>
    <filename>_fast_ring_fitter_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECALGS_FASTRINGFITTER_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>StreamBuffer &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchor>a1</anchor>
      <arglist>(StreamBuffer &amp;s, FastRingFitter &amp;fitter)</arglist>
    </member>
    <member kind="function">
      <type>StreamBuffer &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a2</anchor>
      <arglist>(StreamBuffer &amp;s, const FastRingFitter &amp;fitter)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a3</anchor>
      <arglist>(std::ostream &amp;s, const FastRingFitter &amp;fitter)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OstreamHepRotation.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRingRefit/v1r9/RichRingRefit/</path>
    <filename>_ostream_hep_rotation_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>EVENT_OSTREAMHEPROTATION_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a1</anchor>
      <arglist>(std::ostream &amp;s, const HepRotation &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichRingRefit_dll.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRingRefit/v1r9/src/component/</path>
    <filename>_rich_ring_refit__dll_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>RichRingRefit_load.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRingRefit/v1r9/src/component/</path>
    <filename>_rich_ring_refit__load_8cpp</filename>
    <includes id="_rich_ring_refit_p_i_d_8h" name="RichRingRefitPID.h" local="yes" imported="no">Event/RichRingRefitPID.h</includes>
    <member kind="function">
      <type></type>
      <name>_ImplementContainedObjectFactory</name>
      <anchor>a0</anchor>
      <arglist>(RichRingRefitPID) _ImplementDataObjectFactory(RichRingRefitPIDs) DECLARE_FACTORY_ENTRIES(RichRingRefit)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichRingRefitAlg.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRingRefit/v1r9/src/component/</path>
    <filename>_rich_ring_refit_alg_8cpp</filename>
    <includes id="_rich_ring_refit_alg_8h" name="RichRingRefitAlg.h" local="yes" imported="no">RichRingRefitAlg.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>RichRingRefitAlgFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichRingRefitAlg.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRingRefit/v1r9/src/component/</path>
    <filename>_rich_ring_refit_alg_8h</filename>
    <includes id="_rich_rec_alg_base_8h" name="RichRecAlgBase.h" local="yes" imported="no">RichRecBase/RichRecAlgBase.h</includes>
    <includes id="_rich_track_selector_8h" name="RichTrackSelector.h" local="yes" imported="no">RichRecBase/RichTrackSelector.h</includes>
    <includes id="_rich_ring_refit_8h" name="RichRingRefit.h" local="yes" imported="no">Event/RichRingRefit.h</includes>
    <includes id="_rich_ring_refit_p_i_d_8h" name="RichRingRefitPID.h" local="yes" imported="no">Event/RichRingRefitPID.h</includes>
    <includes id="_rich_rec_status_8h" name="RichRecStatus.h" local="yes" imported="no">Event/RichRecStatus.h</includes>
    <includes id="_fast_ring_fitter_8h" name="FastRingFitter.h" local="yes" imported="no">RichRingRefit/FastRingFitter.h</includes>
    <includes id="_i_rich_expected_track_signal_8h" name="IRichExpectedTrackSignal.h" local="yes" imported="no">RichRecBase/IRichExpectedTrackSignal.h</includes>
    <includes id="_i_rich_photon_signal_8h" name="IRichPhotonSignal.h" local="yes" imported="no">RichRecBase/IRichPhotonSignal.h</includes>
    <includes id="_i_rich_cherenkov_angle_8h" name="IRichCherenkovAngle.h" local="yes" imported="no">RichRecBase/IRichCherenkovAngle.h</includes>
    <includes id="_i_rich_cherenkov_resolution_8h" name="IRichCherenkovResolution.h" local="yes" imported="no">RichRecBase/IRichCherenkovResolution.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECALGS_RICHRINGREFITALG_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichRingRefitMoni.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRingRefit/v1r9/src/component/</path>
    <filename>_rich_ring_refit_moni_8cpp</filename>
    <includes id="_rich_ring_refit_moni_8h" name="RichRingRefitMoni.h" local="yes" imported="no">RichRingRefitMoni.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>RichRingRefitMoniFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RichRingRefitMoni.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRingRefit/v1r9/src/component/</path>
    <filename>_rich_ring_refit_moni_8h</filename>
    <includes id="_rich_rec_alg_base_8h" name="RichRecAlgBase.h" local="yes" imported="no">RichRecBase/RichRecAlgBase.h</includes>
    <includes id="_rich_track_selector_8h" name="RichTrackSelector.h" local="yes" imported="no">RichRecBase/RichTrackSelector.h</includes>
    <includes id="_i_rich_rec_m_c_truth_tool_8h" name="IRichRecMCTruthTool.h" local="yes" imported="no">RichRecBase/IRichRecMCTruthTool.h</includes>
    <includes id="_rich_ring_refit_8h" name="RichRingRefit.h" local="yes" imported="no">Event/RichRingRefit.h</includes>
    <includes id="_rich_rec_status_8h" name="RichRecStatus.h" local="yes" imported="no">Event/RichRecStatus.h</includes>
    <includes id="_i_rich_cherenkov_angle_8h" name="IRichCherenkovAngle.h" local="yes" imported="no">RichRecBase/IRichCherenkovAngle.h</includes>
    <includes id="_i_rich_photon_signal_8h" name="IRichPhotonSignal.h" local="yes" imported="no">RichRecBase/IRichPhotonSignal.h</includes>
    <includes id="_rich_det_params_8h" name="RichDetParams.h" local="yes" imported="no">RichRecBase/RichDetParams.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RICHRECALGS_RICHRINGREFITMONI_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FastRingFitter.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRingRefit/v1r9/src/Lib/</path>
    <filename>_fast_ring_fitter_8cpp</filename>
    <includes id="_fast_ring_fitter_8h" name="FastRingFitter.h" local="yes" imported="no">RichRingRefit/FastRingFitter.h</includes>
  </compound>
  <compound kind="file">
    <name>RichRingRefit.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRingRefit/v1r9/src/Lib/</path>
    <filename>_rich_ring_refit_8cpp</filename>
    <includes id="_rich_ring_refit_8h" name="RichRingRefit.h" local="yes" imported="no">Event/RichRingRefit.h</includes>
  </compound>
  <compound kind="file">
    <name>FindLongTrack.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/LongTrack/v1r13/src/</path>
    <filename>_find_long_track_8cpp</filename>
    <includes id="_tr_fit_track_8h" name="TrFitTrack.h" local="yes" imported="no">Event/TrFitTrack.h</includes>
    <includes id="_i_t_cluster_on_track_8h" name="ITClusterOnTrack.h" local="yes" imported="no">Event/ITClusterOnTrack.h</includes>
    <includes id="_o_t_cluster_on_track_8h" name="OTClusterOnTrack.h" local="yes" imported="no">Event/OTClusterOnTrack.h</includes>
    <includes id="_point_on_track_8h" name="PointOnTrack.h" local="yes" imported="no">Event/PointOnTrack.h</includes>
    <includes id="_find_long_track_8h" name="FindLongTrack.h" local="yes" imported="no">FindLongTrack.h</includes>
    <includes id="_long_track_8h" name="LongTrack.h" local="yes" imported="no">LongTrack.h</includes>
    <includes id="_lt_hit_8h" name="LtHit.h" local="yes" imported="no">LtHit.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>FindLongTrackFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FindLongTrack.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/LongTrack/v1r13/src/</path>
    <filename>_find_long_track_8h</filename>
    <includes id="_i_i_t_signal_to_noise_tool_8h" name="IITSignalToNoiseTool.h" local="yes" imported="no">ITAlgorithms/IITSignalToNoiseTool.h</includes>
    <includes id="_lt_plane_8h" name="LtPlane.h" local="yes" imported="no">LtPlane.h</includes>
    <includes id="_lt_hit_8h" name="LtHit.h" local="yes" imported="no">LtHit.h</includes>
    <includes id="_long_track_8h" name="LongTrack.h" local="yes" imported="no">LongTrack.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>FINDLONGTRACK_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>MAXSTATION</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>MAXLAYER</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>MAXTYPE</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LongTrack.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/LongTrack/v1r13/src/</path>
    <filename>_long_track_8cpp</filename>
    <includes id="_long_track_8h" name="LongTrack.h" local="yes" imported="no">LongTrack.h</includes>
  </compound>
  <compound kind="file">
    <name>LongTrack.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/LongTrack/v1r13/src/</path>
    <filename>_long_track_8h</filename>
    <includes id="_lt_hit_8h" name="LtHit.h" local="yes" imported="no">LtHit.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>LongTrack_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LongTrack_dll.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/LongTrack/v1r13/src/</path>
    <filename>_long_track__dll_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>LongTrack_load.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/LongTrack/v1r13/src/</path>
    <filename>_long_track__load_8cpp</filename>
    <member kind="function">
      <type></type>
      <name>DECLARE_FACTORY_ENTRIES</name>
      <anchor>a0</anchor>
      <arglist>(LongTrack)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LtFitParams.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/LongTrack/v1r13/src/</path>
    <filename>_lt_fit_params_8cpp</filename>
    <includes id="_tr_fit_track_8h" name="TrFitTrack.h" local="yes" imported="no">Event/TrFitTrack.h</includes>
    <includes id="_lt_fit_params_8h" name="LtFitParams.h" local="yes" imported="no">LtFitParams.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>LtFitParamsFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LtFitParams.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/LongTrack/v1r13/src/</path>
    <filename>_lt_fit_params_8h</filename>
    <includes id="_lt_parameters_8h" name="LtParameters.h" local="yes" imported="no">LtParameters.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>LTFITPARAMS_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LtHit.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/LongTrack/v1r13/src/</path>
    <filename>_lt_hit_8cpp</filename>
    <includes id="_lt_hit_8h" name="LtHit.h" local="yes" imported="no">LtHit.h</includes>
  </compound>
  <compound kind="file">
    <name>LtHit.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/LongTrack/v1r13/src/</path>
    <filename>_lt_hit_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>LtHit_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; LtHit * &gt;</type>
      <name>LtHits</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LtParameters.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/LongTrack/v1r13/src/</path>
    <filename>_lt_parameters_8cpp</filename>
    <includes id="_lt_parameters_8h" name="LtParameters.h" local="yes" imported="no">LtParameters.h</includes>
  </compound>
  <compound kind="file">
    <name>LtParameters.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/LongTrack/v1r13/src/</path>
    <filename>_lt_parameters_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>LTPARAMETERS_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LtPlane.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/LongTrack/v1r13/src/</path>
    <filename>_lt_plane_8cpp</filename>
    <includes id="_lt_plane_8h" name="LtPlane.h" local="yes" imported="no">LtPlane.h</includes>
  </compound>
  <compound kind="file">
    <name>LtPlane.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/LongTrack/v1r13/src/</path>
    <filename>_lt_plane_8h</filename>
    <includes id="_lt_hit_8h" name="LtHit.h" local="yes" imported="no">LtHit.h</includes>
    <includes id="_long_track_8h" name="LongTrack.h" local="yes" imported="no">LongTrack.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>LTPLANE_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; LtPlane * &gt;</type>
      <name>LtPlanes</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrCheckSeeds.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/Seeding/v2r10/Seeding/</path>
    <filename>_tr_check_seeds_8h</filename>
    <includes id="_tr_fit_track_8h" name="TrFitTrack.h" local="yes" imported="no">Event/TrFitTrack.h</includes>
  </compound>
  <compound kind="file">
    <name>TrSeedEvent.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/Seeding/v2r10/Seeding/</path>
    <filename>_tr_seed_event_8h</filename>
    <includes id="_tr_fit_track_8h" name="TrFitTrack.h" local="yes" imported="no">Event/TrFitTrack.h</includes>
  </compound>
  <compound kind="file">
    <name>TrCheckSeeds.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/Seeding/v2r10/src/Checker/</path>
    <filename>_tr_check_seeds_8cpp</filename>
    <includes id="_tr_check_seeds_8h" name="TrCheckSeeds.h" local="yes" imported="no">Seeding/TrCheckSeeds.h</includes>
    <includes id="_i_tr_pt_kick_8h" name="ITrPtKick.h" local="yes" imported="no">TrTools/ITrPtKick.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>TrCheckSeedsFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Seeding_dll.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/Seeding/v2r10/src/</path>
    <filename>_seeding__dll_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>Seeding_load.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/Seeding/v2r10/src/</path>
    <filename>_seeding__load_8cpp</filename>
    <member kind="define">
      <type>#define</type>
      <name>DLL_DECL_SERVICE</name>
      <anchor>a0</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DLL_DECL_CONVERTER</name>
      <anchor>a1</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DLL_DECL_ALGORITHM</name>
      <anchor>a2</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DLL_DECL_TOOL</name>
      <anchor>a3</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Seeding_load</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Seeding_loadRef</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrSeedEvent.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/Seeding/v2r10/src/</path>
    <filename>_tr_seed_event_8cpp</filename>
    <includes id="_tr_seed_event_8h" name="TrSeedEvent.h" local="yes" imported="no">Seeding/TrSeedEvent.h</includes>
    <includes id="_i_tr_pt_kick_8h" name="ITrPtKick.h" local="yes" imported="no">TrTools/ITrPtKick.h</includes>
    <includes id="_i_cluster_filter_8h" name="IClusterFilter.h" local="yes" imported="no">TrTools/IClusterFilter.h</includes>
    <includes id="_tr_fit_track_8h" name="TrFitTrack.h" local="yes" imported="no">Event/TrFitTrack.h</includes>
    <includes id="_o_t_cluster_on_track_8h" name="OTClusterOnTrack.h" local="yes" imported="no">Event/OTClusterOnTrack.h</includes>
    <includes id="_i_t_cluster_on_track_8h" name="ITClusterOnTrack.h" local="yes" imported="no">Event/ITClusterOnTrack.h</includes>
    <includes id="_tr2_tracks_match_8h" name="Tr2TracksMatch.h" local="yes" imported="no">TrTools/Tr2TracksMatch.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>SEEDLIGHT</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NEWSEED</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>seedlight_</name>
      <anchor>a18</anchor>
      <arglist>(int &amp;, float *, int &amp;, float *, int *, int *, int &amp;, float *, int &amp;, int &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>newseed_</name>
      <anchor>a19</anchor>
      <arglist>(int &amp;, float *, int &amp;, float *, int *, int *, int &amp;, int &amp;)</arglist>
    </member>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>TrSeedEventFactory</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>gMaxNHits</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>gMaxNTracks</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>gTracks</name>
      <anchor>a6</anchor>
      <arglist>[17][1000]</arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>gSeeds</name>
      <anchor>a7</anchor>
      <arglist>[17][1000]</arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>gHits</name>
      <anchor>a8</anchor>
      <arglist>[6][30000]</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>gHitTrack</name>
      <anchor>a9</anchor>
      <arglist>[30000]</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>gModule</name>
      <anchor>a10</anchor>
      <arglist>[30000]</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>gMatch</name>
      <anchor>a11</anchor>
      <arglist>[11][1000]</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>gSeedHits</name>
      <anchor>a12</anchor>
      <arglist>[32][1000]</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>gNumberOfHits</name>
      <anchor>a13</anchor>
      <arglist>[1000]</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>np</name>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nOTTimes</name>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nITClusters</name>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>plot</name>
      <anchor>a17</anchor>
      <arglist>[35][10000]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PatternChecker.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCheck/v2r7/src/</path>
    <filename>_pattern_checker_8cpp</filename>
    <includes id="_pattern_checker_8h" name="PatternChecker.h" local="yes" imported="no">PatternChecker.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>PatternCheckerFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PatternChecker.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCheck/v2r7/src/</path>
    <filename>_pattern_checker_8h</filename>
    <includes id="_tr_fit_track_8h" name="TrFitTrack.h" local="yes" imported="no">Event/TrFitTrack.h</includes>
    <includes id="_i_tr_state_creator_8h" name="ITrStateCreator.h" local="yes" imported="no">TrCheck/ITrStateCreator.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>PATTERNCHECKER_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrAcceptance.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCheck/v2r7/src/</path>
    <filename>_tr_acceptance_8cpp</filename>
    <includes id="_tr_acceptance_8h" name="TrAcceptance.h" local="yes" imported="no">TrCheck/TrAcceptance.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>TrAcceptanceFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrackSelector.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCheck/v2r7/src/</path>
    <filename>_track_selector_8cpp</filename>
    <includes id="_track_selector_8h" name="TrackSelector.h" local="yes" imported="no">TrCheck/TrackSelector.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>TrackSelectorFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrAnalyse.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCheck/v2r7/src/</path>
    <filename>_tr_analyse_8cpp</filename>
    <includes id="_tr_fit_track_8h" name="TrFitTrack.h" local="yes" imported="no">Event/TrFitTrack.h</includes>
    <includes id="_i_t_cluster_on_track_8h" name="ITClusterOnTrack.h" local="yes" imported="no">Event/ITClusterOnTrack.h</includes>
    <includes id="_o_t_cluster_on_track_8h" name="OTClusterOnTrack.h" local="yes" imported="no">Event/OTClusterOnTrack.h</includes>
    <includes id="_velo_r_cluster_on_track_8h" name="VeloRClusterOnTrack.h" local="yes" imported="no">Event/VeloRClusterOnTrack.h</includes>
    <includes id="_velo_phi_cluster_on_track_8h" name="VeloPhiClusterOnTrack.h" local="yes" imported="no">Event/VeloPhiClusterOnTrack.h</includes>
    <includes id="_point_on_track_8h" name="PointOnTrack.h" local="yes" imported="no">Event/PointOnTrack.h</includes>
    <includes id="_tr_analyse_8h" name="TrAnalyse.h" local="yes" imported="no">TrAnalyse.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>TrAnalyseFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrAnalyse.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCheck/v2r7/src/</path>
    <filename>_tr_analyse_8h</filename>
    <includes id="_tr_fit_track_8h" name="TrFitTrack.h" local="yes" imported="no">Event/TrFitTrack.h</includes>
    <includes id="_tr_counter_8h" name="TrCounter.h" local="yes" imported="no">TrCounter.h</includes>
    <includes id="_tr_t_t1_counter_8h" name="TrTT1Counter.h" local="yes" imported="no">TrTT1Counter.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>TRANALYSE_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrCheck_dll.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCheck/v2r7/src/</path>
    <filename>_tr_check__dll_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>TrCheck_load.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCheck/v2r7/src/</path>
    <filename>_tr_check__load_8cpp</filename>
    <member kind="function">
      <type></type>
      <name>DECLARE_FACTORY_ENTRIES</name>
      <anchor>a0</anchor>
      <arglist>(TrCheck)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrChecker.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCheck/v2r7/src/</path>
    <filename>_tr_checker_8cpp</filename>
    <includes id="_velo_r_cluster_on_track_8h" name="VeloRClusterOnTrack.h" local="yes" imported="no">Event/VeloRClusterOnTrack.h</includes>
    <includes id="_velo_phi_cluster_on_track_8h" name="VeloPhiClusterOnTrack.h" local="yes" imported="no">Event/VeloPhiClusterOnTrack.h</includes>
    <includes id="_i_t_cluster_on_track_8h" name="ITClusterOnTrack.h" local="yes" imported="no">Event/ITClusterOnTrack.h</includes>
    <includes id="_o_t_cluster_on_track_8h" name="OTClusterOnTrack.h" local="yes" imported="no">Event/OTClusterOnTrack.h</includes>
    <includes id="_tr_checker_8h" name="TrChecker.h" local="yes" imported="no">TrChecker.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>TrCheckerFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrChecker.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCheck/v2r7/src/</path>
    <filename>_tr_checker_8h</filename>
    <includes id="_tr_fit_track_8h" name="TrFitTrack.h" local="yes" imported="no">Event/TrFitTrack.h</includes>
    <includes id="_i_tr_state_creator_8h" name="ITrStateCreator.h" local="yes" imported="no">TrCheck/ITrStateCreator.h</includes>
    <includes id="_i_track_selector_8h" name="ITrackSelector.h" local="yes" imported="no">TrCheck/ITrackSelector.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>TRCHECKER_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrCounter.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCheck/v2r7/src/</path>
    <filename>_tr_counter_8h</filename>
    <includes id="_tr_fit_track_8h" name="TrFitTrack.h" local="yes" imported="no">Event/TrFitTrack.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>TRCOUNTER_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrMonitor.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCheck/v2r7/src/</path>
    <filename>_tr_monitor_8cpp</filename>
    <includes id="_tr_monitor_8h" name="TrMonitor.h" local="yes" imported="no">TrMonitor.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>TrMonitorFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrMonitor.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCheck/v2r7/src/</path>
    <filename>_tr_monitor_8h</filename>
    <includes id="_tr_fit_track_8h" name="TrFitTrack.h" local="yes" imported="no">Event/TrFitTrack.h</includes>
    <includes id="_i_track_selector_8h" name="ITrackSelector.h" local="yes" imported="no">TrCheck/ITrackSelector.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>TRMONITOR_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrTT1Counter.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCheck/v2r7/src/</path>
    <filename>_tr_t_t1_counter_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>TRTT1COUNTER_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrTupleChecker.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCheck/v2r7/src/</path>
    <filename>_tr_tuple_checker_8cpp</filename>
    <includes id="_tr_tuple_checker_8h" name="TrTupleChecker.h" local="yes" imported="no">TrTupleChecker.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>TrTupleCheckerFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrTupleChecker.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCheck/v2r7/src/</path>
    <filename>_tr_tuple_checker_8h</filename>
    <includes id="_tr_fit_track_8h" name="TrFitTrack.h" local="yes" imported="no">Event/TrFitTrack.h</includes>
    <includes id="_i_track_selector_8h" name="ITrackSelector.h" local="yes" imported="no">TrCheck/ITrackSelector.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>TRTUPLECHECKER_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrueStateCreator.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCheck/v2r7/src/</path>
    <filename>_true_state_creator_8cpp</filename>
    <includes id="_true_state_creator_8h" name="TrueStateCreator.h" local="yes" imported="no">TrCheck/TrueStateCreator.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>TrueStateCreatorFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrueTracksCreator.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCheck/v2r7/src/</path>
    <filename>_true_tracks_creator_8cpp</filename>
    <includes id="_i_t_cluster_on_track_8h" name="ITClusterOnTrack.h" local="yes" imported="no">Event/ITClusterOnTrack.h</includes>
    <includes id="_o_t_cluster_on_track_8h" name="OTClusterOnTrack.h" local="yes" imported="no">Event/OTClusterOnTrack.h</includes>
    <includes id="_velo_r_cluster_on_track_8h" name="VeloRClusterOnTrack.h" local="yes" imported="no">Event/VeloRClusterOnTrack.h</includes>
    <includes id="_velo_phi_cluster_on_track_8h" name="VeloPhiClusterOnTrack.h" local="yes" imported="no">Event/VeloPhiClusterOnTrack.h</includes>
    <includes id="_i_tr_state_creator_8h" name="ITrStateCreator.h" local="yes" imported="no">TrCheck/ITrStateCreator.h</includes>
    <includes id="_i_track_selector_8h" name="ITrackSelector.h" local="yes" imported="no">TrCheck/ITrackSelector.h</includes>
    <includes id="_i_tr_fitter_8h" name="ITrFitter.h" local="yes" imported="no">Event/ITrFitter.h</includes>
    <includes id="_true_tracks_creator_8h" name="TrueTracksCreator.h" local="yes" imported="no">TrueTracksCreator.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>TrueTracksCreatorFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrueTracksCreator.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCheck/v2r7/src/</path>
    <filename>_true_tracks_creator_8h</filename>
    <includes id="_tr_fit_track_8h" name="TrFitTrack.h" local="yes" imported="no">Event/TrFitTrack.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>TRUETRACKSCREATOR_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ITrackSelector.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCheck/v2r7/TrCheck/</path>
    <filename>_i_track_selector_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>TRCHECK_ITRACKSELECTOR_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ITrStateCreator.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCheck/v2r7/TrCheck/</path>
    <filename>_i_tr_state_creator_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>TRCHECK_ITRSTATECREATOR_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrAcceptance.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCheck/v2r7/TrCheck/</path>
    <filename>_tr_acceptance_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>TRCHECK_TRACCEPTANCE_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrackSelector.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCheck/v2r7/TrCheck/</path>
    <filename>_track_selector_8h</filename>
    <includes id="_tr_fit_track_8h" name="TrFitTrack.h" local="yes" imported="no">Event/TrFitTrack.h</includes>
    <includes id="_i_track_selector_8h" name="ITrackSelector.h" local="yes" imported="no">TrCheck/ITrackSelector.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>TRCHECK_TRACKSELECTOR_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrueStateCreator.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCheck/v2r7/TrCheck/</path>
    <filename>_true_state_creator_8h</filename>
    <includes id="_i_tr_state_creator_8h" name="ITrStateCreator.h" local="yes" imported="no">TrCheck/ITrStateCreator.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>TRCHECK_TRUESTATECREATOR_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CloneTrack.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCleanEx/v2r11/src/</path>
    <filename>_clone_track_8cpp</filename>
    <includes id="_velo_r_cluster_on_track_8h" name="VeloRClusterOnTrack.h" local="yes" imported="no">Event/VeloRClusterOnTrack.h</includes>
    <includes id="_velo_phi_cluster_on_track_8h" name="VeloPhiClusterOnTrack.h" local="yes" imported="no">Event/VeloPhiClusterOnTrack.h</includes>
    <includes id="_i_t_cluster_on_track_8h" name="ITClusterOnTrack.h" local="yes" imported="no">Event/ITClusterOnTrack.h</includes>
    <includes id="_o_t_cluster_on_track_8h" name="OTClusterOnTrack.h" local="yes" imported="no">Event/OTClusterOnTrack.h</includes>
    <includes id="_clone_track_8h" name="CloneTrack.h" local="yes" imported="no">CloneTrack.h</includes>
  </compound>
  <compound kind="file">
    <name>CloneTrack.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCleanEx/v2r11/src/</path>
    <filename>_clone_track_8h</filename>
    <includes id="_tr_fit_track_8h" name="TrFitTrack.h" local="yes" imported="no">Event/TrFitTrack.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>CLONETRACK_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrChi2OutlierKiller.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCleanEx/v2r11/src/</path>
    <filename>_tr_chi2_outlier_killer_8cpp</filename>
    <includes id="_tr_fit_track_8h" name="TrFitTrack.h" local="yes" imported="no">Event/TrFitTrack.h</includes>
    <includes id="_tr_chi2_outlier_killer_8h" name="TrChi2OutlierKiller.h" local="yes" imported="no">TrChi2OutlierKiller.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>TrChi2OutlierKillerFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrChi2OutlierKiller.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCleanEx/v2r11/src/</path>
    <filename>_tr_chi2_outlier_killer_8h</filename>
    <includes id="_i_tr_outlier_killer_8h" name="ITrOutlierKiller.h" local="yes" imported="no">TrCleanEx/ITrOutlierKiller.h</includes>
  </compound>
  <compound kind="file">
    <name>TrCleanEx_dll.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCleanEx/v2r11/src/</path>
    <filename>_tr_clean_ex__dll_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>TrCleanEx_load.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCleanEx/v2r11/src/</path>
    <filename>_tr_clean_ex__load_8cpp</filename>
    <member kind="function">
      <type></type>
      <name>DECLARE_FACTORY_ENTRIES</name>
      <anchor>a0</anchor>
      <arglist>(TrCleanEx)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrFit2StoredTrackCnv.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCleanEx/v2r11/src/</path>
    <filename>_tr_fit2_stored_track_cnv_8cpp</filename>
    <includes id="_tr_fit_track_8h" name="TrFitTrack.h" local="yes" imported="no">Event/TrFitTrack.h</includes>
    <includes id="_i_t_cluster_on_track_8h" name="ITClusterOnTrack.h" local="yes" imported="no">Event/ITClusterOnTrack.h</includes>
    <includes id="_o_t_cluster_on_track_8h" name="OTClusterOnTrack.h" local="yes" imported="no">Event/OTClusterOnTrack.h</includes>
    <includes id="_velo_r_cluster_on_track_8h" name="VeloRClusterOnTrack.h" local="yes" imported="no">Event/VeloRClusterOnTrack.h</includes>
    <includes id="_velo_phi_cluster_on_track_8h" name="VeloPhiClusterOnTrack.h" local="yes" imported="no">Event/VeloPhiClusterOnTrack.h</includes>
    <includes id="_tr_fit2_stored_track_cnv_8h" name="TrFit2StoredTrackCnv.h" local="yes" imported="no">TrFit2StoredTrackCnv.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>TrFit2StoredTrackCnvFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrFit2StoredTrackCnv.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCleanEx/v2r11/src/</path>
    <filename>_tr_fit2_stored_track_cnv_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>TrFit2StoredTrackCnv_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrPrepareVelo.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCleanEx/v2r11/src/</path>
    <filename>_tr_prepare_velo_8cpp</filename>
    <includes id="_tr_fit_track_8h" name="TrFitTrack.h" local="yes" imported="no">Event/TrFitTrack.h</includes>
    <includes id="_tr_prepare_velo_8h" name="TrPrepareVelo.h" local="yes" imported="no">TrPrepareVelo.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>TrPrepareVeloFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrPrepareVelo.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCleanEx/v2r11/src/</path>
    <filename>_tr_prepare_velo_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>TRPREPAREVELO_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrStored2FitTrackCnv.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCleanEx/v2r11/src/</path>
    <filename>_tr_stored2_fit_track_cnv_8cpp</filename>
    <includes id="_tr_fit_track_8h" name="TrFitTrack.h" local="yes" imported="no">Event/TrFitTrack.h</includes>
    <includes id="_i_t_cluster_on_track_8h" name="ITClusterOnTrack.h" local="yes" imported="no">Event/ITClusterOnTrack.h</includes>
    <includes id="_o_t_cluster_on_track_8h" name="OTClusterOnTrack.h" local="yes" imported="no">Event/OTClusterOnTrack.h</includes>
    <includes id="_velo_r_cluster_on_track_8h" name="VeloRClusterOnTrack.h" local="yes" imported="no">Event/VeloRClusterOnTrack.h</includes>
    <includes id="_velo_phi_cluster_on_track_8h" name="VeloPhiClusterOnTrack.h" local="yes" imported="no">Event/VeloPhiClusterOnTrack.h</includes>
    <includes id="_tr_stored2_fit_track_cnv_8h" name="TrStored2FitTrackCnv.h" local="yes" imported="no">TrStored2FitTrackCnv.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>TrStored2FitTrackCnvFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrStored2FitTrackCnv.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCleanEx/v2r11/src/</path>
    <filename>_tr_stored2_fit_track_cnv_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>TRSTORED2FITTRACKCNV_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrTrackCloneKiller.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCleanEx/v2r11/src/</path>
    <filename>_tr_track_clone_killer_8cpp</filename>
    <includes id="_tr_fit_track_8h" name="TrFitTrack.h" local="yes" imported="no">Event/TrFitTrack.h</includes>
    <includes id="_tr_track_clone_killer_8h" name="TrTrackCloneKiller.h" local="yes" imported="no">TrTrackCloneKiller.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>TrTrackCloneKillerFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrTrackCloneKiller.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCleanEx/v2r11/src/</path>
    <filename>_tr_track_clone_killer_8h</filename>
    <includes id="_clone_track_8h" name="CloneTrack.h" local="yes" imported="no">CloneTrack.h</includes>
  </compound>
  <compound kind="file">
    <name>TrTracksCleaner.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCleanEx/v2r11/src/</path>
    <filename>_tr_tracks_cleaner_8cpp</filename>
    <includes id="_tr_tracks_cleaner_8h" name="TrTracksCleaner.h" local="yes" imported="no">TrTracksCleaner.h</includes>
    <includes id="_tr_fit_track_8h" name="TrFitTrack.h" local="yes" imported="no">Event/TrFitTrack.h</includes>
    <includes id="_i_tr_fitter_8h" name="ITrFitter.h" local="yes" imported="no">Event/ITrFitter.h</includes>
    <includes id="_i_tr_outlier_killer_8h" name="ITrOutlierKiller.h" local="yes" imported="no">TrCleanEx/ITrOutlierKiller.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>TrTracksCleanerFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrTracksCleaner.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCleanEx/v2r11/src/</path>
    <filename>_tr_tracks_cleaner_8h</filename>
    <includes id="_tr_fit_track_8h" name="TrFitTrack.h" local="yes" imported="no">Event/TrFitTrack.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>TRTRACKSCLEANER_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ITrOutlierKiller.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCleanEx/v2r11/TrCleanEx/</path>
    <filename>_i_tr_outlier_killer_8h</filename>
  </compound>
  <compound kind="file">
    <name>TrExtrapolator_dll.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrExtrapolator/v2r14/src/</path>
    <filename>_tr_extrapolator__dll_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>TrExtrapolator_load.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrExtrapolator/v2r14/src/</path>
    <filename>_tr_extrapolator__load_8cpp</filename>
    <member kind="function">
      <type></type>
      <name>DECLARE_FACTORY_ENTRIES</name>
      <anchor>a0</anchor>
      <arglist>(TrExtrapolator)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrFastParabolicExtrapolator.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrExtrapolator/v2r14/src/</path>
    <filename>_tr_fast_parabolic_extrapolator_8cpp</filename>
    <includes id="_tr_fast_parabolic_extrapolator_8h" name="TrFastParabolicExtrapolator.h" local="yes" imported="no">TrFastParabolicExtrapolator.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>TrFastParabolicExtrapolatorFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrFastParabolicExtrapolator.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrExtrapolator/v2r14/src/</path>
    <filename>_tr_fast_parabolic_extrapolator_8h</filename>
    <includes id="_tr_parabolic_extrapolator_8h" name="TrParabolicExtrapolator.h" local="yes" imported="no">TrParabolicExtrapolator.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>TRFASTPARABOLICEXTRAPOLATOR_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrFirstCleverExtrapolator.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrExtrapolator/v2r14/src/</path>
    <filename>_tr_first_clever_extrapolator_8cpp</filename>
    <includes id="_tr_first_clever_extrapolator_8h" name="TrFirstCleverExtrapolator.h" local="yes" imported="no">TrFirstCleverExtrapolator.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>TrFirstCleverExtrapolatorFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrFirstCleverExtrapolator.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrExtrapolator/v2r14/src/</path>
    <filename>_tr_first_clever_extrapolator_8h</filename>
    <includes id="_tr_transport_step_8h" name="TrTransportStep.h" local="yes" imported="no">TrTransportStep.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>TRFIRSTCLEVEREXTRAPOLATOR_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrHerabExtrapolator.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrExtrapolator/v2r14/src/</path>
    <filename>_tr_herab_extrapolator_8cpp</filename>
    <includes id="_tr_herab_extrapolator_8h" name="TrHerabExtrapolator.h" local="yes" imported="no">TrHerabExtrapolator.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>TrHerabExtrapolatorFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrHerabExtrapolator.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrExtrapolator/v2r14/src/</path>
    <filename>_tr_herab_extrapolator_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>TRHERABEXTRAPOLATOR_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrLinearExtrapolator.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrExtrapolator/v2r14/src/</path>
    <filename>_tr_linear_extrapolator_8cpp</filename>
    <includes id="_tr_linear_extrapolator_8h" name="TrLinearExtrapolator.h" local="yes" imported="no">TrLinearExtrapolator.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>TrLinearExtrapolatorFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrLinearExtrapolator.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrExtrapolator/v2r14/src/</path>
    <filename>_tr_linear_extrapolator_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>TRLINEAREXTRAPOLATOR_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrParabolicExtrapolator.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrExtrapolator/v2r14/src/</path>
    <filename>_tr_parabolic_extrapolator_8cpp</filename>
    <includes id="_tr_parabolic_extrapolator_8h" name="TrParabolicExtrapolator.h" local="yes" imported="no">TrParabolicExtrapolator.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>TrParabolicExtrapolatorFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrParabolicExtrapolator.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrExtrapolator/v2r14/src/</path>
    <filename>_tr_parabolic_extrapolator_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>TRPARABOLICEXTRAPOLATOR_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrTransportStep.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrExtrapolator/v2r14/src/</path>
    <filename>_tr_transport_step_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>TRTRANSPORTSTEP_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrFitAssociators_dll.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitAssociators/v1r3/src/</path>
    <filename>_tr_fit_associators__dll_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>TrFitAssociators_load.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitAssociators/v1r3/src/</path>
    <filename>_tr_fit_associators__load_8cpp</filename>
    <includes id="_tr_fit_track_8h" name="TrFitTrack.h" local="yes" imported="no">Event/TrFitTrack.h</includes>
    <member kind="function">
      <type></type>
      <name>IMPLEMENT_RelationW1D</name>
      <anchor>a0</anchor>
      <arglist>(TrFitTrack, MCParticle, double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPLEMENT_WAssociator</name>
      <anchor>a1</anchor>
      <arglist>(TrFitTrack, MCParticle, double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_FACTORY_ENTRIES</name>
      <anchor>a2</anchor>
      <arglist>(TrFitAssociators)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrFitTrackMCTruthAlg.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitAssociators/v1r3/src/</path>
    <filename>_tr_fit_track_m_c_truth_alg_8cpp</filename>
    <includes id="_tr_fit_track_8h" name="TrFitTrack.h" local="yes" imported="no">Event/TrFitTrack.h</includes>
    <includes id="_velo_r_cluster_on_track_8h" name="VeloRClusterOnTrack.h" local="yes" imported="no">Event/VeloRClusterOnTrack.h</includes>
    <includes id="_velo_phi_cluster_on_track_8h" name="VeloPhiClusterOnTrack.h" local="yes" imported="no">Event/VeloPhiClusterOnTrack.h</includes>
    <includes id="_i_t_cluster_on_track_8h" name="ITClusterOnTrack.h" local="yes" imported="no">Event/ITClusterOnTrack.h</includes>
    <includes id="_o_t_cluster_on_track_8h" name="OTClusterOnTrack.h" local="yes" imported="no">Event/OTClusterOnTrack.h</includes>
    <includes id="_tr_fit_track_m_c_truth_alg_8h" name="TrFitTrackMCTruthAlg.h" local="yes" imported="no">TrFitTrackMCTruthAlg.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>TrFitTrackMCTruthAlgFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrFitTrackMCTruthAlg.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitAssociators/v1r3/src/</path>
    <filename>_tr_fit_track_m_c_truth_alg_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>TRFITTRACKMCTRUTHALG_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ITClusterOnTrack.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitEvent/v4r8/Event/</path>
    <filename>_i_t_cluster_on_track_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>TrFitEvent_ITClusterOnTrack_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a1</anchor>
      <arglist>(std::ostream &amp;str, const ITClusterOnTrack &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ITrFitter.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitEvent/v4r8/Event/</path>
    <filename>_i_tr_fitter_8h</filename>
    <includes id="_tr_track_8h" name="TrTrack.h" local="yes" imported="no">Event/TrTrack.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>ITRFITTER_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OTClusterOnTrack.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitEvent/v4r8/Event/</path>
    <filename>_o_t_cluster_on_track_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>TrFitEvent_OTClusterOnTrack_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a1</anchor>
      <arglist>(std::ostream &amp;str, const OTClusterOnTrack &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PointOnTrack.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitEvent/v4r8/Event/</path>
    <filename>_point_on_track_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>TrFitEvent_PointOnTrack_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a1</anchor>
      <arglist>(std::ostream &amp;str, const PointOnTrack &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrDataFunctor.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitEvent/v4r8/Event/</path>
    <filename>_tr_data_functor_8h</filename>
    <includes id="_tr_fit_track_8h" name="TrFitTrack.h" local="yes" imported="no">Event/TrFitTrack.h</includes>
    <namespace>TrDataFunctor</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TrEvent_TrDataFunctor_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrFitTrack.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitEvent/v4r8/Event/</path>
    <filename>_tr_fit_track_8h</filename>
    <includes id="_tr_track_8h" name="TrTrack.h" local="yes" imported="no">Event/TrTrack.h</includes>
    <namespace>TrFitTrackLocation</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TrFitEvent_TrFitTrack_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KeyedContainer&lt; TrFitTrack, Containers::HashMap &gt;</type>
      <name>TrFitTracks</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a11</anchor>
      <arglist>(std::ostream &amp;str, const TrFitTrack &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrTrack.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitEvent/v4r8/Event/</path>
    <filename>_tr_track_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>TrFitEvent_TrTrack_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KeyedContainer&lt; TrTrack, Containers::HashMap &gt;</type>
      <name>TrTracks</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a2</anchor>
      <arglist>(std::ostream &amp;str, const TrTrack &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VeloPhiClusterOnTrack.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitEvent/v4r8/Event/</path>
    <filename>_velo_phi_cluster_on_track_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>TrFitEvent_VeloPhiClusterOnTrack_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a1</anchor>
      <arglist>(std::ostream &amp;str, const VeloPhiClusterOnTrack &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VeloRClusterOnTrack.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitEvent/v4r8/Event/</path>
    <filename>_velo_r_cluster_on_track_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>TrFitEvent_VeloRClusterOnTrack_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a1</anchor>
      <arglist>(std::ostream &amp;str, const VeloRClusterOnTrack &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ITClusterOnTrack.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitEvent/v4r8/src/</path>
    <filename>_i_t_cluster_on_track_8cpp</filename>
    <includes id="_i_t_cluster_on_track_8h" name="ITClusterOnTrack.h" local="yes" imported="no">Event/ITClusterOnTrack.h</includes>
  </compound>
  <compound kind="file">
    <name>OTClusterOnTrack.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitEvent/v4r8/src/</path>
    <filename>_o_t_cluster_on_track_8cpp</filename>
    <includes id="_o_t_cluster_on_track_8h" name="OTClusterOnTrack.h" local="yes" imported="no">Event/OTClusterOnTrack.h</includes>
  </compound>
  <compound kind="file">
    <name>PointOnTrack.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitEvent/v4r8/src/</path>
    <filename>_point_on_track_8cpp</filename>
    <includes id="_point_on_track_8h" name="PointOnTrack.h" local="yes" imported="no">Event/PointOnTrack.h</includes>
  </compound>
  <compound kind="file">
    <name>TrFitTrack.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitEvent/v4r8/src/</path>
    <filename>_tr_fit_track_8cpp</filename>
    <includes id="_tr_fit_track_8h" name="TrFitTrack.h" local="yes" imported="no">Event/TrFitTrack.h</includes>
    <includes id="_o_t_cluster_on_track_8h" name="OTClusterOnTrack.h" local="yes" imported="no">Event/OTClusterOnTrack.h</includes>
    <includes id="_i_t_cluster_on_track_8h" name="ITClusterOnTrack.h" local="yes" imported="no">Event/ITClusterOnTrack.h</includes>
    <includes id="_velo_r_cluster_on_track_8h" name="VeloRClusterOnTrack.h" local="yes" imported="no">Event/VeloRClusterOnTrack.h</includes>
    <includes id="_velo_phi_cluster_on_track_8h" name="VeloPhiClusterOnTrack.h" local="yes" imported="no">Event/VeloPhiClusterOnTrack.h</includes>
    <includes id="_tr_data_functor_8h" name="TrDataFunctor.h" local="yes" imported="no">Event/TrDataFunctor.h</includes>
    <namespace>SortTrack</namespace>
  </compound>
  <compound kind="file">
    <name>VeloPhiClusterOnTrack.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitEvent/v4r8/src/</path>
    <filename>_velo_phi_cluster_on_track_8cpp</filename>
    <includes id="_velo_phi_cluster_on_track_8h" name="VeloPhiClusterOnTrack.h" local="yes" imported="no">Event/VeloPhiClusterOnTrack.h</includes>
  </compound>
  <compound kind="file">
    <name>VeloRClusterOnTrack.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitEvent/v4r8/src/</path>
    <filename>_velo_r_cluster_on_track_8cpp</filename>
    <includes id="_velo_r_cluster_on_track_8h" name="VeloRClusterOnTrack.h" local="yes" imported="no">Event/VeloRClusterOnTrack.h</includes>
  </compound>
  <compound kind="file">
    <name>ITrFilter.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitter/v4r0/src/</path>
    <filename>_i_tr_filter_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>ITRFILTER_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ITrSmoother.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitter/v4r0/src/</path>
    <filename>_i_tr_smoother_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>ITRSMOOTHER_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrEventTracksFitter.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitter/v4r0/src/</path>
    <filename>_tr_event_tracks_fitter_8cpp</filename>
    <includes id="_tr_event_tracks_fitter_8h" name="TrEventTracksFitter.h" local="yes" imported="no">TrEventTracksFitter.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>TrEventTracksFitterFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrEventTracksFitter.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitter/v4r0/src/</path>
    <filename>_tr_event_tracks_fitter_8h</filename>
    <includes id="_tr_fit_track_8h" name="TrFitTrack.h" local="yes" imported="no">Event/TrFitTrack.h</includes>
    <includes id="_tr_track_8h" name="TrTrack.h" local="yes" imported="no">Event/TrTrack.h</includes>
    <includes id="_i_tr_fitter_8h" name="ITrFitter.h" local="yes" imported="no">Event/ITrFitter.h</includes>
  </compound>
  <compound kind="file">
    <name>TrFitAtAllPoints.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitter/v4r0/src/</path>
    <filename>_tr_fit_at_all_points_8cpp</filename>
    <includes id="_tr_track_8h" name="TrTrack.h" local="yes" imported="no">Event/TrTrack.h</includes>
    <includes id="_o_t_cluster_on_track_8h" name="OTClusterOnTrack.h" local="yes" imported="no">Event/OTClusterOnTrack.h</includes>
    <includes id="_velo_r_cluster_on_track_8h" name="VeloRClusterOnTrack.h" local="yes" imported="no">Event/VeloRClusterOnTrack.h</includes>
    <includes id="_tr_fit_at_all_points_8h" name="TrFitAtAllPoints.h" local="yes" imported="no">TrFitAtAllPoints.h</includes>
    <includes id="_tr_kalman_filter_8h" name="TrKalmanFilter.h" local="yes" imported="no">TrKalmanFilter.h</includes>
    <includes id="_tr_kalman_smoother_8h" name="TrKalmanSmoother.h" local="yes" imported="no">TrKalmanSmoother.h</includes>
    <includes id="_tr_node_8h" name="TrNode.h" local="yes" imported="no">TrNode.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>TrFitAtAllPointsFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrFitAtAllPoints.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitter/v4r0/src/</path>
    <filename>_tr_fit_at_all_points_8h</filename>
    <includes id="_i_tr_fitter_8h" name="ITrFitter.h" local="yes" imported="no">Event/ITrFitter.h</includes>
  </compound>
  <compound kind="file">
    <name>TrFitter_dll.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitter/v4r0/src/</path>
    <filename>_tr_fitter__dll_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>TrFitter_load.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitter/v4r0/src/</path>
    <filename>_tr_fitter__load_8cpp</filename>
    <member kind="function">
      <type></type>
      <name>DECLARE_FACTORY_ENTRIES</name>
      <anchor>a0</anchor>
      <arglist>(TrFitter)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrFitToVertex.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitter/v4r0/src/</path>
    <filename>_tr_fit_to_vertex_8cpp</filename>
    <includes id="_tr_track_8h" name="TrTrack.h" local="yes" imported="no">Event/TrTrack.h</includes>
    <includes id="_tr_fit_to_vertex_8h" name="TrFitToVertex.h" local="yes" imported="no">TrFitToVertex.h</includes>
    <includes id="_i_tr_filter_8h" name="ITrFilter.h" local="yes" imported="no">ITrFilter.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>TrFitToVertexFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrFitToVertex.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitter/v4r0/src/</path>
    <filename>_tr_fit_to_vertex_8h</filename>
    <includes id="_i_tr_fitter_8h" name="ITrFitter.h" local="yes" imported="no">Event/ITrFitter.h</includes>
  </compound>
  <compound kind="file">
    <name>TrKalmanFilter.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitter/v4r0/src/</path>
    <filename>_tr_kalman_filter_8cpp</filename>
    <includes id="_tr_kalman_filter_8h" name="TrKalmanFilter.h" local="yes" imported="no">TrKalmanFilter.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>TrKalmanFilterFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrKalmanFilter.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitter/v4r0/src/</path>
    <filename>_tr_kalman_filter_8h</filename>
    <includes id="_i_tr_filter_8h" name="ITrFilter.h" local="yes" imported="no">ITrFilter.h</includes>
  </compound>
  <compound kind="file">
    <name>TrKalmanSmoother.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitter/v4r0/src/</path>
    <filename>_tr_kalman_smoother_8cpp</filename>
    <includes id="_tr_kalman_smoother_8h" name="TrKalmanSmoother.h" local="yes" imported="no">TrKalmanSmoother.h</includes>
    <includes id="_tr_node_8h" name="TrNode.h" local="yes" imported="no">TrNode.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>TrKalmanSmootherFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrKalmanSmoother.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitter/v4r0/src/</path>
    <filename>_tr_kalman_smoother_8h</filename>
    <includes id="_i_tr_smoother_8h" name="ITrSmoother.h" local="yes" imported="no">ITrSmoother.h</includes>
  </compound>
  <compound kind="file">
    <name>TrNode.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitter/v4r0/src/</path>
    <filename>_tr_node_8cpp</filename>
    <includes id="_tr_node_8h" name="TrNode.h" local="yes" imported="no">TrNode.h</includes>
  </compound>
  <compound kind="file">
    <name>TrNode.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitter/v4r0/src/</path>
    <filename>_tr_node_8h</filename>
    <includes id="_tr_track_8h" name="TrTrack.h" local="yes" imported="no">Event/TrTrack.h</includes>
  </compound>
  <compound kind="file">
    <name>FindKShortParams.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrKShort/v1r4p1/src/</path>
    <filename>_find_k_short_params_8cpp</filename>
    <includes id="_find_k_short_params_8h" name="FindKShortParams.h" local="yes" imported="no">FindKShortParams.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>FindKShortParamsFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FindKShortParams.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrKShort/v1r4p1/src/</path>
    <filename>_find_k_short_params_8h</filename>
    <includes id="_ks_fit_parameters_8h" name="KsFitParameters.h" local="yes" imported="no">KsFitParameters.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>FINDKSHORTPARAMS_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FindTrKShort.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrKShort/v1r4p1/src/</path>
    <filename>_find_tr_k_short_8cpp</filename>
    <includes id="_i_t_cluster_on_track_8h" name="ITClusterOnTrack.h" local="yes" imported="no">Event/ITClusterOnTrack.h</includes>
    <includes id="_find_tr_k_short_8h" name="FindTrKShort.h" local="yes" imported="no">FindTrKShort.h</includes>
    <includes id="_ks_track_8h" name="KsTrack.h" local="yes" imported="no">KsTrack.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>FindTrKShortFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FindTrKShort.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrKShort/v1r4p1/src/</path>
    <filename>_find_tr_k_short_8h</filename>
    <includes id="_tr_fit_track_8h" name="TrFitTrack.h" local="yes" imported="no">Event/TrFitTrack.h</includes>
    <includes id="_i_cluster_filter_8h" name="IClusterFilter.h" local="yes" imported="no">TrTools/IClusterFilter.h</includes>
    <includes id="_i_i_t_signal_to_noise_tool_8h" name="IITSignalToNoiseTool.h" local="yes" imported="no">ITAlgorithms/IITSignalToNoiseTool.h</includes>
    <includes id="_ks_plane_8h" name="KsPlane.h" local="yes" imported="no">KsPlane.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>FINDTRKSHORT_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>KsFitParameters.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrKShort/v1r4p1/src/</path>
    <filename>_ks_fit_parameters_8cpp</filename>
    <includes id="_ks_fit_parameters_8h" name="KsFitParameters.h" local="yes" imported="no">KsFitParameters.h</includes>
  </compound>
  <compound kind="file">
    <name>KsFitParameters.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrKShort/v1r4p1/src/</path>
    <filename>_ks_fit_parameters_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>KSFITPARAMETERS_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>KsHit.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrKShort/v1r4p1/src/</path>
    <filename>_ks_hit_8cpp</filename>
    <includes id="_ks_hit_8h" name="KsHit.h" local="yes" imported="no">KsHit.h</includes>
  </compound>
  <compound kind="file">
    <name>KsHit.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrKShort/v1r4p1/src/</path>
    <filename>_ks_hit_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>KsHit_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; KsHit * &gt;</type>
      <name>KsHits</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>KShortMonitor.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrKShort/v1r4p1/src/</path>
    <filename>_k_short_monitor_8cpp</filename>
    <includes id="_tr_fit_track_8h" name="TrFitTrack.h" local="yes" imported="no">Event/TrFitTrack.h</includes>
    <includes id="_k_short_monitor_8h" name="KShortMonitor.h" local="yes" imported="no">KShortMonitor.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>KShortMonitorFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>KShortMonitor.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrKShort/v1r4p1/src/</path>
    <filename>_k_short_monitor_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>KSHORTMONITOR_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>KsPlane.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrKShort/v1r4p1/src/</path>
    <filename>_ks_plane_8cpp</filename>
    <includes id="_ks_plane_8h" name="KsPlane.h" local="yes" imported="no">KsPlane.h</includes>
  </compound>
  <compound kind="file">
    <name>KsPlane.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrKShort/v1r4p1/src/</path>
    <filename>_ks_plane_8h</filename>
    <includes id="_ks_hit_8h" name="KsHit.h" local="yes" imported="no">KsHit.h</includes>
    <includes id="_ks_track_8h" name="KsTrack.h" local="yes" imported="no">KsTrack.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>KsPlane_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; KsPlane * &gt;</type>
      <name>KsPlanes</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>KsTrack.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrKShort/v1r4p1/src/</path>
    <filename>_ks_track_8cpp</filename>
    <includes id="_ks_track_8h" name="KsTrack.h" local="yes" imported="no">KsTrack.h</includes>
  </compound>
  <compound kind="file">
    <name>KsTrack.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrKShort/v1r4p1/src/</path>
    <filename>_ks_track_8h</filename>
    <includes id="_tr_fit_track_8h" name="TrFitTrack.h" local="yes" imported="no">Event/TrFitTrack.h</includes>
    <includes id="_ks_hit_8h" name="KsHit.h" local="yes" imported="no">KsHit.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>KSTRACK_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrKShort_dll.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrKShort/v1r4p1/src/</path>
    <filename>_tr_k_short__dll_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>TrKShort_load.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrKShort/v1r4p1/src/</path>
    <filename>_tr_k_short__load_8cpp</filename>
    <member kind="function">
      <type></type>
      <name>DECLARE_FACTORY_ENTRIES</name>
      <anchor>a0</anchor>
      <arglist>(TrKShort)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrChi2Calculator.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrMatching/v2r10p1/src/</path>
    <filename>_tr_chi2_calculator_8cpp</filename>
    <includes id="_tr_chi2_calculator_8h" name="TrChi2Calculator.h" local="yes" imported="no">TrMatching/TrChi2Calculator.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>TrChi2CalculatorFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrMatchChecker.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrMatching/v2r10p1/src/</path>
    <filename>_tr_match_checker_8cpp</filename>
    <includes id="_tr_match_checker_8h" name="TrMatchChecker.h" local="yes" imported="no">TrMatching/TrMatchChecker.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>TrMatchCheckerFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrMatching_dll.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrMatching/v2r10p1/src/</path>
    <filename>_tr_matching__dll_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>TrMatching_load.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrMatching/v2r10p1/src/</path>
    <filename>_tr_matching__load_8cpp</filename>
    <member kind="function">
      <type></type>
      <name>DECLARE_FACTORY_ENTRIES</name>
      <anchor>a0</anchor>
      <arglist>(TrMatching)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrMatchVeloSeed.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrMatching/v2r10p1/src/</path>
    <filename>_tr_match_velo_seed_8cpp</filename>
    <includes id="_tr_match_velo_seed_8h" name="TrMatchVeloSeed.h" local="yes" imported="no">TrMatching/TrMatchVeloSeed.h</includes>
    <includes id="_t_t_candidate_8h" name="TTCandidate.h" local="yes" imported="no">TrMatching/TTCandidate.h</includes>
    <includes id="_tr_matching_data_functor_8h" name="TrMatchingDataFunctor.h" local="yes" imported="no">TrMatching/TrMatchingDataFunctor.h</includes>
    <includes id="_i_t_cluster_on_track_8h" name="ITClusterOnTrack.h" local="yes" imported="no">Event/ITClusterOnTrack.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>TrMatchVeloSeedFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ITrChi2Calculator.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrMatching/v2r10p1/TrMatching/</path>
    <filename>_i_tr_chi2_calculator_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>TRMATCHING_ITRCHI2CALCULATOR_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrChi2Calculator.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrMatching/v2r10p1/TrMatching/</path>
    <filename>_tr_chi2_calculator_8h</filename>
    <includes id="_i_tr_chi2_calculator_8h" name="ITrChi2Calculator.h" local="yes" imported="no">TrMatching/ITrChi2Calculator.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>TRMATCHING_TRCHI2CALCULATOR_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrMatch.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrMatching/v2r10p1/TrMatching/</path>
    <filename>_tr_match_8h</filename>
    <includes id="_tr_fit_track_8h" name="TrFitTrack.h" local="yes" imported="no">Event/TrFitTrack.h</includes>
    <namespace>TrMatchLocation</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TRMATCHING_TRMATCH_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KeyedContainer&lt; TrMatch, Containers::HashMap &gt;</type>
      <name>TrMatches</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrMatchChecker.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrMatching/v2r10p1/TrMatching/</path>
    <filename>_tr_match_checker_8h</filename>
    <includes id="_tr_fit_track_8h" name="TrFitTrack.h" local="yes" imported="no">Event/TrFitTrack.h</includes>
    <includes id="_i_tr_state_creator_8h" name="ITrStateCreator.h" local="yes" imported="no">TrCheck/ITrStateCreator.h</includes>
    <includes id="_tr_match_8h" name="TrMatch.h" local="yes" imported="no">TrMatching/TrMatch.h</includes>
    <includes id="_i_tr_chi2_calculator_8h" name="ITrChi2Calculator.h" local="yes" imported="no">TrMatching/ITrChi2Calculator.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>TR_TRMATCHCHECKER_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrMatchingDataFunctor.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrMatching/v2r10p1/TrMatching/</path>
    <filename>_tr_matching_data_functor_8h</filename>
    <namespace>TrMatchingDataFunctor</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TR_TRMATCHINGDATAFUNCTOR_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrMatchVeloSeed.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrMatching/v2r10p1/TrMatching/</path>
    <filename>_tr_match_velo_seed_8h</filename>
    <includes id="_tr_fit_track_8h" name="TrFitTrack.h" local="yes" imported="no">Event/TrFitTrack.h</includes>
    <includes id="_tr_match_8h" name="TrMatch.h" local="yes" imported="no">TrMatching/TrMatch.h</includes>
    <includes id="_i_tr_chi2_calculator_8h" name="ITrChi2Calculator.h" local="yes" imported="no">TrMatching/ITrChi2Calculator.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>TR_TRMATCHVELOSEED_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TTCandidate.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrMatching/v2r10p1/TrMatching/</path>
    <filename>_t_t_candidate_8h</filename>
    <namespace>TrCandidateLocation</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TRMATCHING_TRCANDIDATE_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; TTCandidate * &gt;</type>
      <name>TTCandidates</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BIntegrator.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrTools/v2r6/src/</path>
    <filename>_b_integrator_8cpp</filename>
    <includes id="_b_integrator_8h" name="BIntegrator.h" local="yes" imported="no">TrTools/BIntegrator.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>BIntegratorFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ClusterFilter.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrTools/v2r6/src/</path>
    <filename>_cluster_filter_8cpp</filename>
    <includes id="_tr_fit_track_8h" name="TrFitTrack.h" local="yes" imported="no">Event/TrFitTrack.h</includes>
    <includes id="_velo_phi_cluster_on_track_8h" name="VeloPhiClusterOnTrack.h" local="yes" imported="no">Event/VeloPhiClusterOnTrack.h</includes>
    <includes id="_velo_r_cluster_on_track_8h" name="VeloRClusterOnTrack.h" local="yes" imported="no">Event/VeloRClusterOnTrack.h</includes>
    <includes id="_i_t_cluster_on_track_8h" name="ITClusterOnTrack.h" local="yes" imported="no">Event/ITClusterOnTrack.h</includes>
    <includes id="_o_t_cluster_on_track_8h" name="OTClusterOnTrack.h" local="yes" imported="no">Event/OTClusterOnTrack.h</includes>
    <includes id="_cluster_filter_8h" name="ClusterFilter.h" local="yes" imported="no">TrTools/ClusterFilter.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>ClusterFilterFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Tr2TracksMatch.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrTools/v2r6/src/</path>
    <filename>_tr2_tracks_match_8cpp</filename>
    <includes id="_tr2_tracks_match_8h" name="Tr2TracksMatch.h" local="yes" imported="no">TrTools/Tr2TracksMatch.h</includes>
    <includes id="_o_t_cluster_on_track_8h" name="OTClusterOnTrack.h" local="yes" imported="no">Event/OTClusterOnTrack.h</includes>
    <includes id="_i_t_cluster_on_track_8h" name="ITClusterOnTrack.h" local="yes" imported="no">Event/ITClusterOnTrack.h</includes>
  </compound>
  <compound kind="file">
    <name>TrMeasInfo.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrTools/v2r6/src/</path>
    <filename>_tr_meas_info_8cpp</filename>
    <includes id="_tr_meas_info_8h" name="TrMeasInfo.h" local="yes" imported="no">TrTools/TrMeasInfo.h</includes>
    <includes id="_o_t_cluster_on_track_8h" name="OTClusterOnTrack.h" local="yes" imported="no">Event/OTClusterOnTrack.h</includes>
    <includes id="_i_t_cluster_on_track_8h" name="ITClusterOnTrack.h" local="yes" imported="no">Event/ITClusterOnTrack.h</includes>
    <includes id="_velo_r_cluster_on_track_8h" name="VeloRClusterOnTrack.h" local="yes" imported="no">Event/VeloRClusterOnTrack.h</includes>
    <includes id="_velo_phi_cluster_on_track_8h" name="VeloPhiClusterOnTrack.h" local="yes" imported="no">Event/VeloPhiClusterOnTrack.h</includes>
  </compound>
  <compound kind="file">
    <name>TrPtKick.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrTools/v2r6/src/</path>
    <filename>_tr_pt_kick_8cpp</filename>
    <includes id="_tr_pt_kick_8h" name="TrPtKick.h" local="yes" imported="no">TrTools/TrPtKick.h</includes>
    <includes id="_i_b_integrator_8h" name="IBIntegrator.h" local="yes" imported="no">TrTools/IBIntegrator.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>TrPtKickFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrTools_load.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrTools/v2r6/src/</path>
    <filename>_tr_tools__load_8cpp</filename>
    <member kind="function">
      <type></type>
      <name>DECLARE_FACTORY_ENTRIES</name>
      <anchor>a0</anchor>
      <arglist>(TrTools)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BIntegrator.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrTools/v2r6/TrTools/</path>
    <filename>_b_integrator_8h</filename>
    <includes id="_i_b_integrator_8h" name="IBIntegrator.h" local="yes" imported="no">TrTools/IBIntegrator.h</includes>
  </compound>
  <compound kind="file">
    <name>ClusterFilter.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrTools/v2r6/TrTools/</path>
    <filename>_cluster_filter_8h</filename>
    <includes id="_i_cluster_filter_8h" name="IClusterFilter.h" local="yes" imported="no">TrTools/IClusterFilter.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>TRTOOLS_CLUSTERFILTER_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IBIntegrator.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrTools/v2r6/TrTools/</path>
    <filename>_i_b_integrator_8h</filename>
  </compound>
  <compound kind="file">
    <name>IClusterFilter.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrTools/v2r6/TrTools/</path>
    <filename>_i_cluster_filter_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>TRTOOLS_ICLUSTERFILTER_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ITrPtKick.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrTools/v2r6/TrTools/</path>
    <filename>_i_tr_pt_kick_8h</filename>
  </compound>
  <compound kind="file">
    <name>Tr2TracksMatch.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrTools/v2r6/TrTools/</path>
    <filename>_tr2_tracks_match_8h</filename>
    <includes id="_tr_track_8h" name="TrTrack.h" local="yes" imported="no">Event/TrTrack.h</includes>
  </compound>
  <compound kind="file">
    <name>TrMeasInfo.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrTools/v2r6/TrTools/</path>
    <filename>_tr_meas_info_8h</filename>
  </compound>
  <compound kind="file">
    <name>TrPtKick.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrTools/v2r6/TrTools/</path>
    <filename>_tr_pt_kick_8h</filename>
    <includes id="_i_tr_pt_kick_8h" name="ITrPtKick.h" local="yes" imported="no">TrTools/ITrPtKick.h</includes>
  </compound>
  <compound kind="file">
    <name>paraVTT.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/VeloTT/v1r11/src/</path>
    <filename>para_v_t_t_8cpp</filename>
    <includes id="_i_t_cluster_on_track_8h" name="ITClusterOnTrack.h" local="yes" imported="no">Event/ITClusterOnTrack.h</includes>
    <includes id="_velo_r_cluster_on_track_8h" name="VeloRClusterOnTrack.h" local="yes" imported="no">Event/VeloRClusterOnTrack.h</includes>
    <includes id="_velo_phi_cluster_on_track_8h" name="VeloPhiClusterOnTrack.h" local="yes" imported="no">Event/VeloPhiClusterOnTrack.h</includes>
    <includes id="para_v_t_t_8h" name="paraVTT.h" local="yes" imported="no">paraVTT.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>paraVTTFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>paraVTT.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/VeloTT/v1r11/src/</path>
    <filename>para_v_t_t_8h</filename>
    <includes id="_tr_fit_track_8h" name="TrFitTrack.h" local="yes" imported="no">Event/TrFitTrack.h</includes>
    <includes id="_tr_track_8h" name="TrTrack.h" local="yes" imported="no">Event/TrTrack.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>PARAVTT_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>TT1_SIZE</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>ZPLANES_SIZE</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VeloTT_dll.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/VeloTT/v1r11/src/</path>
    <filename>_velo_t_t__dll_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>VeloTT_load.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/VeloTT/v1r11/src/</path>
    <filename>_velo_t_t__load_8cpp</filename>
    <member kind="function">
      <type></type>
      <name>DECLARE_FACTORY_ENTRIES</name>
      <anchor>a0</anchor>
      <arglist>(VeloTT)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VeloTTFind.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/VeloTT/v1r11/src/</path>
    <filename>_velo_t_t_find_8cpp</filename>
    <includes id="_i_t_cluster_on_track_8h" name="ITClusterOnTrack.h" local="yes" imported="no">Event/ITClusterOnTrack.h</includes>
    <includes id="_i_tr_fitter_8h" name="ITrFitter.h" local="yes" imported="no">Event/ITrFitter.h</includes>
    <includes id="_i_t_signal_to_noise_tool_8h" name="ITSignalToNoiseTool.h" local="yes" imported="no">ITAlgorithms/ITSignalToNoiseTool.h</includes>
    <includes id="_velo_t_t_find_8h" name="VeloTTFind.h" local="yes" imported="no">VeloTTFind.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>VeloTTFindFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VeloTTFind.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/VeloTT/v1r11/src/</path>
    <filename>_velo_t_t_find_8h</filename>
    <includes id="_tr_fit_track_8h" name="TrFitTrack.h" local="yes" imported="no">Event/TrFitTrack.h</includes>
    <includes id="_tr_track_8h" name="TrTrack.h" local="yes" imported="no">Event/TrTrack.h</includes>
    <class kind="struct">k_tracking_digit</class>
    <member kind="define">
      <type>#define</type>
      <name>VELOTTFIND_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>TT1_SIZE</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>ZPLANES_SIZE</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VeloTTStoredChecker.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/VeloTT/v1r11/src/</path>
    <filename>_velo_t_t_stored_checker_8cpp</filename>
    <includes id="_velo_t_t_stored_checker_8h" name="VeloTTStoredChecker.h" local="yes" imported="no">VeloTTStoredChecker.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>VeloTTStoredCheckerFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VeloTTStoredChecker.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/VeloTT/v1r11/src/</path>
    <filename>_velo_t_t_stored_checker_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>VELOTTSTOREDCHECKER_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConvertToTrFitTrack.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgBrunel/v1r1/src/</path>
    <filename>_convert_to_tr_fit_track_8cpp</filename>
    <includes id="_tr_fit_track_8h" name="TrFitTrack.h" local="yes" imported="no">Event/TrFitTrack.h</includes>
    <includes id="_velo_r_cluster_on_track_8h" name="VeloRClusterOnTrack.h" local="yes" imported="no">Event/VeloRClusterOnTrack.h</includes>
    <includes id="_velo_phi_cluster_on_track_8h" name="VeloPhiClusterOnTrack.h" local="yes" imported="no">Event/VeloPhiClusterOnTrack.h</includes>
    <includes id="_convert_to_tr_fit_track_8h" name="ConvertToTrFitTrack.h" local="yes" imported="no">ConvertToTrFitTrack.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>ConvertToTrFitTrackFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConvertToTrFitTrack.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgBrunel/v1r1/src/</path>
    <filename>_convert_to_tr_fit_track_8h</filename>
    <includes id="_trg_data_provider_8h" name="TrgDataProvider.h" local="yes" imported="no">TrgTools/TrgDataProvider.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>CONVERTTOTRFITTRACK_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrgBrunel_dll.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgBrunel/v1r1/src/</path>
    <filename>_trg_brunel__dll_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>TrgBrunel_load.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgBrunel/v1r1/src/</path>
    <filename>_trg_brunel__load_8cpp</filename>
    <member kind="function">
      <type></type>
      <name>DECLARE_FACTORY_ENTRIES</name>
      <anchor>a0</anchor>
      <arglist>(TrgBrunel)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DecodeL1VeloPhi.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgTools/v7r0/src/</path>
    <filename>_decode_l1_velo_phi_8cpp</filename>
    <includes id="_decode_l1_velo_phi_8h" name="DecodeL1VeloPhi.h" local="yes" imported="no">DecodeL1VeloPhi.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>DecodeL1VeloPhiFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DecodeL1VeloPhi.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgTools/v7r0/src/</path>
    <filename>_decode_l1_velo_phi_8h</filename>
    <includes id="_trg_velo_data_holder_8h" name="TrgVeloDataHolder.h" local="yes" imported="no">TrgTools/TrgVeloDataHolder.h</includes>
    <includes id="_trg_data_provider_8h" name="TrgDataProvider.h" local="yes" imported="no">TrgTools/TrgDataProvider.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>DECODEL1VELOPHI_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DecodeL1VeloR.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgTools/v7r0/src/</path>
    <filename>_decode_l1_velo_r_8cpp</filename>
    <includes id="_decode_l1_velo_r_8h" name="DecodeL1VeloR.h" local="yes" imported="no">DecodeL1VeloR.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>DecodeL1VeloRFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DecodeL1VeloR.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgTools/v7r0/src/</path>
    <filename>_decode_l1_velo_r_8h</filename>
    <includes id="_trg_velo_data_holder_8h" name="TrgVeloDataHolder.h" local="yes" imported="no">TrgTools/TrgVeloDataHolder.h</includes>
    <includes id="_trg_data_provider_8h" name="TrgDataProvider.h" local="yes" imported="no">TrgTools/TrgDataProvider.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>DECODEL1VELOR_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DecodeRawVelo.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgTools/v7r0/src/</path>
    <filename>_decode_raw_velo_8cpp</filename>
    <includes id="_decode_raw_velo_8h" name="DecodeRawVelo.h" local="yes" imported="no">DecodeRawVelo.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>DecodeRawVeloFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DecodeRawVelo.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgTools/v7r0/src/</path>
    <filename>_decode_raw_velo_8h</filename>
    <includes id="_trg_velo_data_holder_8h" name="TrgVeloDataHolder.h" local="yes" imported="no">TrgTools/TrgVeloDataHolder.h</includes>
    <includes id="_trg_data_provider_8h" name="TrgDataProvider.h" local="yes" imported="no">TrgTools/TrgDataProvider.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>DECODERAWVELO_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FillTrgDecision.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgTools/v7r0/src/</path>
    <filename>_fill_trg_decision_8cpp</filename>
    <includes id="_fill_trg_decision_8h" name="FillTrgDecision.h" local="yes" imported="no">FillTrgDecision.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>FillTrgDecisionFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FillTrgDecision.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgTools/v7r0/src/</path>
    <filename>_fill_trg_decision_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>FILLTRGDECISION_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>L1InitEvent.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgTools/v7r0/src/</path>
    <filename>_l1_init_event_8cpp</filename>
    <includes id="_l1_init_event_8h" name="L1InitEvent.h" local="yes" imported="no">L1InitEvent.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>L1InitEventFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>L1InitEvent.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgTools/v7r0/src/</path>
    <filename>_l1_init_event_8h</filename>
    <includes id="_trg_data_provider_8h" name="TrgDataProvider.h" local="yes" imported="no">TrgTools/TrgDataProvider.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>L1INITEVENT_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrgDataProvider.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgTools/v7r0/src/</path>
    <filename>_trg_data_provider_8cpp</filename>
    <includes id="_trg_data_provider_8h" name="TrgDataProvider.h" local="yes" imported="no">TrgTools/TrgDataProvider.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>TrgDataProviderFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrgInitEvent.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgTools/v7r0/src/</path>
    <filename>_trg_init_event_8cpp</filename>
    <includes id="_trg_init_event_8h" name="TrgInitEvent.h" local="yes" imported="no">TrgInitEvent.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>TrgInitEventFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrgInitEvent.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgTools/v7r0/src/</path>
    <filename>_trg_init_event_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>TRGINITEVENT_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrgL0Filter.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgTools/v7r0/src/</path>
    <filename>_trg_l0_filter_8cpp</filename>
    <includes id="_trg_l0_filter_8h" name="TrgL0Filter.h" local="yes" imported="no">TrgL0Filter.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>TrgL0FilterFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrgL0Filter.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgTools/v7r0/src/</path>
    <filename>_trg_l0_filter_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>TRGL0FILTER_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrgL0MuonProvider.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgTools/v7r0/src/</path>
    <filename>_trg_l0_muon_provider_8cpp</filename>
    <includes id="_trg_l0_muon_provider_8h" name="TrgL0MuonProvider.h" local="yes" imported="no">TrgTools/TrgL0MuonProvider.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>TrgL0MuonProviderFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrgL1Filter.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgTools/v7r0/src/</path>
    <filename>_trg_l1_filter_8cpp</filename>
    <includes id="_trg_l1_filter_8h" name="TrgL1Filter.h" local="yes" imported="no">TrgL1Filter.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>TrgL1FilterFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrgL1Filter.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgTools/v7r0/src/</path>
    <filename>_trg_l1_filter_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>TRGL1FILTER_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrgMCReconstructed.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgTools/v7r0/src/</path>
    <filename>_trg_m_c_reconstructed_8cpp</filename>
    <includes id="_trg_m_c_reconstructed_8h" name="TrgMCReconstructed.h" local="yes" imported="no">TrgMCReconstructed.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>TrgMCReconstructedFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrgMCReconstructed.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgTools/v7r0/src/</path>
    <filename>_trg_m_c_reconstructed_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>TRGMCRECONSTRUCTED_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrgParticleMaker.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgTools/v7r0/src/</path>
    <filename>_trg_particle_maker_8cpp</filename>
    <includes id="_trg_particle_maker_8h" name="TrgParticleMaker.h" local="yes" imported="no">TrgParticleMaker.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>TrgParticleMakerFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrgParticleMaker.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgTools/v7r0/src/</path>
    <filename>_trg_particle_maker_8h</filename>
    <includes id="_trg_data_provider_8h" name="TrgDataProvider.h" local="yes" imported="no">TrgTools/TrgDataProvider.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>TRGPARTICLEMAKER_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrgTools_dll.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgTools/v7r0/src/</path>
    <filename>_trg_tools__dll_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>TrgTools_load.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgTools/v7r0/src/</path>
    <filename>_trg_tools__load_8cpp</filename>
    <member kind="function">
      <type></type>
      <name>DECLARE_FACTORY_ENTRIES</name>
      <anchor>a0</anchor>
      <arglist>(TrgTools)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrgTrackToContainer.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgTools/v7r0/src/</path>
    <filename>_trg_track_to_container_8cpp</filename>
    <includes id="_trg_track_to_container_8h" name="TrgTrackToContainer.h" local="yes" imported="no">TrgTrackToContainer.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>TrgTrackToContainerFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrgTrackToContainer.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgTools/v7r0/src/</path>
    <filename>_trg_track_to_container_8h</filename>
    <includes id="_trg_data_provider_8h" name="TrgDataProvider.h" local="yes" imported="no">TrgTools/TrgDataProvider.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>TRGTRACKTOCONTAINER_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrgVeloDataHolder.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgTools/v7r0/src/</path>
    <filename>_trg_velo_data_holder_8cpp</filename>
    <includes id="_trg_velo_data_holder_8h" name="TrgVeloDataHolder.h" local="yes" imported="no">TrgTools/TrgVeloDataHolder.h</includes>
    <member kind="variable">
      <type>const IToolFactory &amp;</type>
      <name>TrgVeloDataHolderFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>StatVar.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgTools/v7r0/TrgTools/</path>
    <filename>_stat_var_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>TRGTOOLS_STATVAR_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrgContainer.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgTools/v7r0/TrgTools/</path>
    <filename>_trg_container_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>TrgContainer_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrgDataProvider.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgTools/v7r0/TrgTools/</path>
    <filename>_trg_data_provider_8h</filename>
    <includes id="_trg_container_8h" name="TrgContainer.h" local="yes" imported="no">TrgTools/TrgContainer.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>TRGTOOLS_TRGDATAPROVIDER_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TrgContainer&lt; TrgVertex &gt;</type>
      <name>TrgVertexContainer</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TrgContainer&lt; TrgTrack &gt;</type>
      <name>TrgTrackContainer</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrgL0MuonProvider.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgTools/v7r0/TrgTools/</path>
    <filename>_trg_l0_muon_provider_8h</filename>
    <includes id="_trg_container_8h" name="TrgContainer.h" local="yes" imported="no">TrgTools/TrgContainer.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>TRGL0MUONPROVIDER_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TrgContainer&lt; TrgL0Muon &gt;</type>
      <name>TrgL0MuonContainer</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrgTimeCounter.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgTools/v7r0/TrgTools/</path>
    <filename>_trg_time_counter_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>TRGTIMECOUNTER_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>MsgStream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a1</anchor>
      <arglist>(MsgStream &amp;ms, const TrgTimeCounter &amp;count)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrgVeloDataHolder.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgTools/v7r0/TrgTools/</path>
    <filename>_trg_velo_data_holder_8h</filename>
    <includes id="_velo_coord_8h" name="VeloCoord.h" local="yes" imported="no">TrgTools/VeloCoord.h</includes>
    <includes id="_velo_sector_8h" name="VeloSector.h" local="yes" imported="no">TrgTools/VeloSector.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>TRGTOOLS_TRGVELODATAHOLDER_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VeloCoord.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgTools/v7r0/TrgTools/</path>
    <filename>_velo_coord_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>VELOCOORD_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VeloSector.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgTools/v7r0/TrgTools/</path>
    <filename>_velo_sector_8h</filename>
    <includes id="_velo_coord_8h" name="VeloCoord.h" local="yes" imported="no">VeloCoord.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>VELOSECTOR_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RZTrack.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgVelo/v7r0/src/</path>
    <filename>_r_z_track_8h</filename>
    <includes id="_velo_coord_8h" name="VeloCoord.h" local="yes" imported="no">TrgTools/VeloCoord.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RZTRACK_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SpaceTrack.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgVelo/v7r0/src/</path>
    <filename>_space_track_8h</filename>
    <includes id="_velo_coord_8h" name="VeloCoord.h" local="yes" imported="no">TrgTools/VeloCoord.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>SPACETRACK_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrgVelo_dll.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgVelo/v7r0/src/</path>
    <filename>_trg_velo__dll_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>TrgVelo_load.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgVelo/v7r0/src/</path>
    <filename>_trg_velo__load_8cpp</filename>
    <member kind="function">
      <type></type>
      <name>DECLARE_FACTORY_ENTRIES</name>
      <anchor>a0</anchor>
      <arglist>(TrgVelo)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VeloPhiList.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgVelo/v7r0/src/</path>
    <filename>_velo_phi_list_8h</filename>
    <includes id="_velo_coord_8h" name="VeloCoord.h" local="yes" imported="no">TrgTools/VeloCoord.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>VELOPHILIST_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VeloRTracking.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgVelo/v7r0/src/</path>
    <filename>_velo_r_tracking_8cpp</filename>
    <includes id="_velo_r_tracking_8h" name="VeloRTracking.h" local="yes" imported="no">VeloRTracking.h</includes>
    <includes id="_r_z_track_8h" name="RZTrack.h" local="yes" imported="no">RZTrack.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>VeloRTrackingFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VeloRTracking.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgVelo/v7r0/src/</path>
    <filename>_velo_r_tracking_8h</filename>
    <includes id="_trg_velo_data_holder_8h" name="TrgVeloDataHolder.h" local="yes" imported="no">TrgTools/TrgVeloDataHolder.h</includes>
    <includes id="_trg_data_provider_8h" name="TrgDataProvider.h" local="yes" imported="no">TrgTools/TrgDataProvider.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>VELORTRACKING_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VeloSpaceTracking.cpp</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgVelo/v7r0/src/</path>
    <filename>_velo_space_tracking_8cpp</filename>
    <includes id="_velo_space_tracking_8h" name="VeloSpaceTracking.h" local="yes" imported="no">VeloSpaceTracking.h</includes>
    <includes id="_space_track_8h" name="SpaceTrack.h" local="yes" imported="no">SpaceTrack.h</includes>
    <includes id="_velo_phi_list_8h" name="VeloPhiList.h" local="yes" imported="no">VeloPhiList.h</includes>
    <member kind="variable">
      <type>const IAlgFactory &amp;</type>
      <name>VeloSpaceTrackingFactory</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VeloSpaceTracking.h</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgVelo/v7r0/src/</path>
    <filename>_velo_space_tracking_8h</filename>
    <includes id="_trg_data_provider_8h" name="TrgDataProvider.h" local="yes" imported="no">TrgTools/TrgDataProvider.h</includes>
    <includes id="_trg_velo_data_holder_8h" name="TrgVeloDataHolder.h" local="yes" imported="no">TrgTools/TrgVeloDataHolder.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>VELOSPACETRACKING_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MainPage.h</name>
    <path>/afs/cern.ch/user/c/cattanem/w0/BRUNEL/TEST_v25r2/BrunelSys/v25r2/doc/</path>
    <filename>_main_page_8h</filename>
  </compound>
  <compound kind="class">
    <name>BIntegrator</name>
    <filename>class_b_integrator.html</filename>
    <base>AlgTool</base>
    <base virtualness="virtual">IBIntegrator</base>
    <member kind="function">
      <type></type>
      <name>BIntegrator</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BIntegrator</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>calculateBdlAndCenter</name>
      <anchor>a4</anchor>
      <arglist>(const HepPoint3D &amp;beginPoint, const HepPoint3D &amp;endPoint, const double tX, const double tY, double &amp;zCenter, HepVector3D &amp;Bdl) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Calo04ECorrection</name>
    <filename>class_calo04_e_correction.html</filename>
    <base virtualness="virtual">ICaloHypoTool</base>
    <base>CaloTool</base>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>process</name>
      <anchor>a0</anchor>
      <arglist>(CaloHypo *hypo) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(CaloHypo *hypo) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Calo04ECorrection</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Calo04ECorrection</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ToolFactory&lt;Calo04ECorrection&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Calo04LCorrection</name>
    <filename>class_calo04_l_correction.html</filename>
    <base virtualness="virtual">ICaloHypoTool</base>
    <base>CaloTool</base>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>process</name>
      <anchor>a0</anchor>
      <arglist>(CaloHypo *hypo) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(CaloHypo *hypo) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Calo04LCorrection</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Calo04LCorrection</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ToolFactory&lt;Calo04LCorrection&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Calo04SCorrection</name>
    <filename>class_calo04_s_correction.html</filename>
    <base virtualness="virtual">ICaloHypoTool</base>
    <base>CaloTool</base>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>process</name>
      <anchor>a0</anchor>
      <arglist>(CaloHypo *hypo) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(CaloHypo *hypo) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Calo04SCorrection</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Calo04SCorrection</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ToolFactory&lt;Calo04SCorrection&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloCluster2TrackAlg</name>
    <filename>class_calo_cluster2_track_alg.html</filename>
    <base>CaloTrackAlg</base>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloCluster2TrackAlg</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *svcloc)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloCluster2TrackAlg</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>AlgFactory&lt;CaloCluster2TrackAlg&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloCluster2TrgTrackAlg</name>
    <filename>class_calo_cluster2_trg_track_alg.html</filename>
    <base>CaloAlgorithm</base>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>const TrgTrack</type>
      <name>Track</name>
      <anchor>x0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>const TrgTracks</type>
      <name>Tracks</name>
      <anchor>x1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>const CaloCluster</type>
      <name>Cluster</name>
      <anchor>x2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>const CaloClusters</type>
      <name>Clusters</name>
      <anchor>x3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>RelationWeighted2D&lt; CaloCluster, TrgTrack, float &gt;</type>
      <name>Table</name>
      <anchor>x4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>StatusCode</type>
      <name>process</name>
      <anchor>b0</anchor>
      <arglist>(Table *table, const Cluster *cluster, TRACK first, TRACK last)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloCluster2TrgTrackAlg</name>
      <anchor>b1</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *svcloc)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloCluster2TrgTrackAlg</name>
      <anchor>b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>AlgFactory&lt;CaloCluster2TrgTrackAlg&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloClusterCorrect3x3Position</name>
    <filename>class_calo_cluster_correct3x3_position.html</filename>
    <base>CaloAlgorithm</base>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloClusterCorrect3x3Position</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *svcloc)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloClusterCorrect3x3Position</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>long</type>
      <name>numberOfDigits</name>
      <anchor>b2</anchor>
      <arglist>(const CaloCluster *cluster, const CaloDigitStatus::Status &amp;status) const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>AlgFactory&lt;CaloClusterCorrect3x3Position&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloClusterCovarianceAlg</name>
    <filename>class_calo_cluster_covariance_alg.html</filename>
    <base>CaloAlgorithm</base>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloClusterCovarianceAlg</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *svc)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloClusterCovarianceAlg</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ICaloSubClusterTag *</type>
      <name>tagger</name>
      <anchor>b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ICaloClusterTool *</type>
      <name>cov</name>
      <anchor>b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ICaloClusterTool *</type>
      <name>spread</name>
      <anchor>b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>AlgFactory&lt;CaloClusterCovarianceAlg&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloClusterisationAlg</name>
    <filename>class_calo_clusterisation_alg.html</filename>
    <base>CaloAlgorithm</base>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloClusterisationAlg</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *svc)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloClusterisationAlg</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>AlgFactory&lt;CaloClusterisationAlg&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloClusterMatchMonitor</name>
    <filename>class_calo_cluster_match_monitor.html</filename>
    <base>CaloHistoAlg</base>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloClusterMatchMonitor</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *svcloc)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloClusterMatchMonitor</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>AlgFactory&lt;CaloClusterMatchMonitor&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloClusterMCTruthMonitor</name>
    <filename>class_calo_cluster_m_c_truth_monitor.html</filename>
    <base>CaloHistoAlg</base>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloClusterMCTruthMonitor</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *svcloc)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloClusterMCTruthMonitor</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>AlgFactory&lt;CaloClusterMCTruthMonitor&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloClusterMonitor</name>
    <filename>class_calo_cluster_monitor.html</filename>
    <base>CaloAlgorithm</base>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloClusterMonitor</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *svcloc)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloClusterMonitor</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>AlgFactory&lt;CaloClusterMonitor&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloClusterResetFractions</name>
    <filename>class_calo_cluster_reset_fractions.html</filename>
    <base virtualness="virtual">ICaloClusterTool</base>
    <base>CaloTool</base>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>process</name>
      <anchor>a2</anchor>
      <arglist>(CaloCluster *cluster) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>operator()</name>
      <anchor>a3</anchor>
      <arglist>(CaloCluster *cluster) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloClusterResetFractions</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloClusterResetFractions</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ToolFactory&lt;CaloClusterResetFractions&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloClusterSOMSelector</name>
    <filename>class_calo_cluster_s_o_m_selector.html</filename>
    <base virtualness="virtual">ICaloClusterSelector</base>
    <base>CaloTool</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>select</name>
      <anchor>a0</anchor>
      <arglist>(const CaloCluster *cluster) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(const CaloCluster *cluster) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const double</type>
      <name>limit</name>
      <anchor>b0</anchor>
      <arglist>(const double energy, const unsigned int area) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloClusterSOMSelector</name>
      <anchor>b1</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloClusterSOMSelector</name>
      <anchor>b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ToolFactory&lt;CaloClusterSOMSelector&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloClusterToolSequence</name>
    <filename>class_calo_cluster_tool_sequence.html</filename>
    <base virtualness="virtual">ICaloClusterTool</base>
    <base>CaloTool</base>
    <member kind="typedef">
      <type>std::vector&lt; std::string &gt;</type>
      <name>Names</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; ICaloClusterTool * &gt;</type>
      <name>ClusterTools</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>process</name>
      <anchor>a0</anchor>
      <arglist>(CaloCluster *cluster) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(CaloCluster *cluster) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloClusterToolSequence</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloClusterToolSequence</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ToolFactory&lt;CaloClusterToolSequence&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloCorr2TANH</name>
    <filename>class_calo_corr2_t_a_n_h.html</filename>
    <base>CaloCorrection</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloCorr2TANH</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloCorr2TANH</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ToolFactory&lt;CaloCorr2TANH&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloCorrASINH</name>
    <filename>class_calo_corr_a_s_i_n_h.html</filename>
    <base>CaloCorrection</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloCorrASINH</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloCorrASINH</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ToolFactory&lt;CaloCorrASINH&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloCorrection</name>
    <filename>class_calo_correction.html</filename>
    <base virtualness="virtual">ICaloCorrection</base>
    <base>CaloTool</base>
    <member kind="typedef">
      <type>std::vector&lt; double &gt;</type>
      <name>Parameters</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double(*</type>
      <name>Function</name>
      <anchor>w1</anchor>
      <arglist>)(const double, const double, const double, const Parameters &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>process</name>
      <anchor>a0</anchor>
      <arglist>(const CaloPosition &amp;position, const HepPoint3D &amp;seed, CaloPosition *&amp;corrected) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CaloPosition *</type>
      <name>process</name>
      <anchor>a1</anchor>
      <arglist>(const CaloPosition &amp;position, const HepPoint3D &amp;seed) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CaloPosition *</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(const CaloPosition &amp;position, const HepPoint3D &amp;seed) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Function</type>
      <name>fx</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Function</type>
      <name>fy</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Function</type>
      <name>fxp</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Function</type>
      <name>fyp</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const double</type>
      <name>cell</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Parameters</type>
      <name>xpars</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Parameters</type>
      <name>ypars</name>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloCorrection</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent, Function fx=0, Function fxp=0, Function fy=0, Function fyp=0)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloCorrection</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Function</type>
      <name>setFx</name>
      <anchor>b2</anchor>
      <arglist>(Function fun)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Function</type>
      <name>setFy</name>
      <anchor>b3</anchor>
      <arglist>(Function fun)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Function</type>
      <name>setFxp</name>
      <anchor>b4</anchor>
      <arglist>(Function fun)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Function</type>
      <name>setFyp</name>
      <anchor>b5</anchor>
      <arglist>(Function fun)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloDigitsFilterAlg</name>
    <filename>class_calo_digits_filter_alg.html</filename>
    <base>CaloAlgorithm</base>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloDigitsFilterAlg</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *svcloc)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloDigitsFilterAlg</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>AlgFactory&lt;CaloDigitsFilterAlg&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloElectronAlg</name>
    <filename>class_calo_electron_alg.html</filename>
    <base>CaloAlgorithm</base>
    <member kind="typedef">
      <type>std::vector&lt; std::string &gt;</type>
      <name>Names</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; ICaloClusterSelector * &gt;</type>
      <name>Selectors</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; ICaloHypoTool * &gt;</type>
      <name>HypoTools</name>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HypoTools</type>
      <name>Corrections</name>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloElectronAlg</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvc)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloElectronAlg</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>AlgFactory&lt;CaloElectronAlg&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloExtraDigits</name>
    <filename>class_calo_extra_digits.html</filename>
    <base virtualness="virtual">IIncidentListener</base>
    <base virtualness="virtual">ICaloHypoTool</base>
    <base>CaloTool</base>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>process</name>
      <anchor>a1</anchor>
      <arglist>(CaloHypo *hypo) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(CaloHypo *hypo) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handle</name>
      <anchor>a3</anchor>
      <arglist>(const Incident &amp;incident)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloExtraDigits</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloExtraDigits</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ToolFactory&lt;CaloExtraDigits&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloHypo2TrackAlg</name>
    <filename>class_calo_hypo2_track_alg.html</filename>
    <base>CaloTrackAlg</base>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloHypo2TrackAlg</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *svcloc)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloHypo2TrackAlg</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>AlgFactory&lt;CaloHypo2TrackAlg&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloHypo2TrgTrackAlg</name>
    <filename>class_calo_hypo2_trg_track_alg.html</filename>
    <base>CaloAlgorithm</base>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloHypo2TrgTrackAlg</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *svcloc)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloHypo2TrgTrackAlg</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>AlgFactory&lt;CaloHypo2TrgTrackAlg&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloHypoAlg</name>
    <filename>class_calo_hypo_alg.html</filename>
    <base>CaloAlgorithm</base>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloHypoAlg</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *svcloc)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloHypoAlg</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>AlgFactory&lt;CaloHypoAlg&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloHypoMatchMonitor</name>
    <filename>class_calo_hypo_match_monitor.html</filename>
    <base>CaloHistoAlg</base>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloHypoMatchMonitor</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *svcloc)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloHypoMatchMonitor</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>AlgFactory&lt;CaloHypoMatchMonitor&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloHypoMonitor</name>
    <filename>class_calo_hypo_monitor.html</filename>
    <base>CaloAlgorithm</base>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloHypoMonitor</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *svcloc)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloHypoMonitor</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>AlgFactory&lt;CaloHypoMonitor&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloHypoReShuffleAlg</name>
    <filename>class_calo_hypo_re_shuffle_alg.html</filename>
    <base>CaloAlgorithm</base>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloHypoReShuffleAlg</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *svc)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloHypoReShuffleAlg</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>AlgFactory&lt;CaloHypoReShuffleAlg&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloHyposMerge</name>
    <filename>class_calo_hypos_merge.html</filename>
    <base>CaloAlgorithm</base>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloHyposMerge</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvc)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloHyposMerge</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>AlgFactory&lt;CaloHyposMerge&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloHypoToolSequence</name>
    <filename>class_calo_hypo_tool_sequence.html</filename>
    <base virtualness="virtual">ICaloHypoTool</base>
    <base>CaloTool</base>
    <member kind="typedef">
      <type>std::vector&lt; std::string &gt;</type>
      <name>Names</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; ICaloHypoTool * &gt;</type>
      <name>HypoTools</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>process</name>
      <anchor>a0</anchor>
      <arglist>(CaloHypo *Hypo) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(CaloHypo *Hypo) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloHypoToolSequence</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloHypoToolSequence</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ToolFactory&lt;CaloHypoToolSequence&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloLCorrection</name>
    <filename>class_calo_l_correction.html</filename>
    <base virtualness="virtual">ICaloHypoTool</base>
    <base>CaloTool</base>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>process</name>
      <anchor>a0</anchor>
      <arglist>(CaloHypo *hypo) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(CaloHypo *hypo) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloLCorrection</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloLCorrection</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ToolFactory&lt;CaloLCorrection&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloLCorrectionSimple</name>
    <filename>class_calo_l_correction_simple.html</filename>
    <base>CaloTool</base>
    <base virtualness="virtual">ICaloHypoTool</base>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>process</name>
      <anchor>a0</anchor>
      <arglist>(CaloHypo *hypo) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(CaloHypo *hypo) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloLCorrectionSimple</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloLCorrectionSimple</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ToolFactory&lt;CaloLCorrectionSimple&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloMCPi0Monitor</name>
    <filename>class_calo_m_c_pi0_monitor.html</filename>
    <base>CaloHistoAlg</base>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloMCPi0Monitor</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *svcloc)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloMCPi0Monitor</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>AlgFactory&lt;CaloMCPi0Monitor&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloMergedPi0Alg</name>
    <filename>class_calo_merged_pi0_alg.html</filename>
    <base>CaloAlgorithm</base>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloMergedPi0Alg</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *svcloc)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloMergedPi0Alg</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>long</type>
      <name>numberOfDigits</name>
      <anchor>b2</anchor>
      <arglist>(const CaloCluster *cluster, const CaloDigitStatus::Status &amp;status) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>BarZ</name>
      <anchor>b3</anchor>
      <arglist>(const double e, const double eprs, const unsigned int area, const double x, const double y, const double z)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>BarXY</name>
      <anchor>b4</anchor>
      <arglist>(const int axis, const unsigned int area, const double e[3][3])</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>TrShape</name>
      <anchor>b5</anchor>
      <arglist>(const int Neig, const unsigned int area, const double SpdHit, const double D3D)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>AlgFactory&lt;CaloMergedPi0Alg&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloNewECorrection</name>
    <filename>class_calo_new_e_correction.html</filename>
    <base virtualness="virtual">ICaloHypoTool</base>
    <base>CaloTool</base>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>process</name>
      <anchor>a0</anchor>
      <arglist>(CaloHypo *hypo) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(CaloHypo *hypo) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloNewECorrection</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloNewECorrection</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ToolFactory&lt;CaloNewECorrection&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloNewLCorrection</name>
    <filename>class_calo_new_l_correction.html</filename>
    <base virtualness="virtual">ICaloHypoTool</base>
    <base>CaloTool</base>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>process</name>
      <anchor>a0</anchor>
      <arglist>(CaloHypo *hypo) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(CaloHypo *hypo) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloNewLCorrection</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloNewLCorrection</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ToolFactory&lt;CaloNewLCorrection&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloNewSCorrection</name>
    <filename>class_calo_new_s_correction.html</filename>
    <base virtualness="virtual">ICaloHypoTool</base>
    <base>CaloTool</base>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>process</name>
      <anchor>a0</anchor>
      <arglist>(CaloHypo *hypo) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(CaloHypo *hypo) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloNewSCorrection</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloNewSCorrection</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ToolFactory&lt;CaloNewSCorrection&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloPhotonEstimatorTool</name>
    <filename>class_calo_photon_estimator_tool.html</filename>
    <base virtualness="virtual">IIncidentListener</base>
    <base virtualness="virtual">ICaloHypoLikelihood</base>
    <base>CaloTool</base>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const CaloHypotheses::Hypothesis &amp;</type>
      <name>hypothesis</name>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchor>a3</anchor>
      <arglist>(const CaloHypo *hypo) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>likelihood</name>
      <anchor>a4</anchor>
      <arglist>(const CaloHypo *hypo) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handle</name>
      <anchor>a5</anchor>
      <arglist>(const Incident &amp;incident)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloPhotonEstimatorTool</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloPhotonEstimatorTool</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>unsigned int</type>
      <name>bin</name>
      <anchor>b2</anchor>
      <arglist>(const double value, const std::vector&lt; double &gt; vect) const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ToolFactory&lt;CaloPhotonEstimatorTool&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloPhotonMomentumTool</name>
    <filename>class_calo_photon_momentum_tool.html</filename>
    <base virtualness="virtual">ICaloHypoTool</base>
    <base virtualness="virtual">CaloTool</base>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>process</name>
      <anchor>a0</anchor>
      <arglist>(CaloHypo *hypo) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(CaloHypo *hypo) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloPhotonMomentumTool</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloPhotonMomentumTool</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ToolFactory&lt;CaloPhotonMomentumTool&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloPhotonMonitor</name>
    <filename>class_calo_photon_monitor.html</filename>
    <base>CaloHistoAlg</base>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloPhotonMonitor</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvc)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloPhotonMonitor</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; IHistogram1D * &gt;</type>
      <name>defHisto1d</name>
      <anchor>b2</anchor>
      <arglist>(const unsigned int, const double, const double, const unsigned int, const std::string, const std::string, const unsigned int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>unsigned int</type>
      <name>bin</name>
      <anchor>b3</anchor>
      <arglist>(const double value, const std::vector&lt; double &gt; vect) const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>AlgFactory&lt;CaloPhotonMonitor&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloPi0Monitor</name>
    <filename>class_calo_pi0_monitor.html</filename>
    <base>CaloAlgorithm</base>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloPi0Monitor</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *svcloc)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloPi0Monitor</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>AlgFactory&lt;CaloPi0Monitor&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloPIDsData</name>
    <filename>class_calo_p_i_ds_data.html</filename>
    <base>CaloTupleAlg</base>
    <member kind="typedef">
      <type>IAssociator&lt; TrStoredTrack, float &gt;</type>
      <name>IAsct</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IAsct::DirectType</type>
      <name>Table</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Table::Range</type>
      <name>Range</name>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IAssociatorWeighted&lt; TrStoredTrack, MCParticle, double &gt;</type>
      <name>ITrAsct</name>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ITrAsct::DirectType</type>
      <name>TrTable</name>
      <anchor>w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TrTable::Range</type>
      <name>TrRange</name>
      <anchor>w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloPIDsData</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *isvc)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloPIDsData</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>momentum</name>
      <anchor>b2</anchor>
      <arglist>(const TrStoredTrack *track) const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>AlgFactory&lt;CaloPIDsData&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloPIDsMonitor</name>
    <filename>class_calo_p_i_ds_monitor.html</filename>
    <base>CaloHistoAlg</base>
    <member kind="typedef">
      <type>IAssociator&lt; TrStoredTrack, float &gt;</type>
      <name>ITr2Calo</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ITr2Calo::DirectType</type>
      <name>ICaloTable</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IAssociatorWeighted&lt; TrStoredTrack, MCParticle, double &gt;</type>
      <name>ITr2MC</name>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ITr2MC::DirectType</type>
      <name>IMCTable</name>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloPIDsMonitor</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *isvc)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloPIDsMonitor</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>pFunc</name>
      <anchor>b2</anchor>
      <arglist>(const double value) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>momentum</name>
      <anchor>b3</anchor>
      <arglist>(const TrStoredTrack *track) const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>AlgFactory&lt;CaloPIDsMonitor&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloPrsCorrection</name>
    <filename>class_calo_prs_correction.html</filename>
    <base virtualness="virtual">ICaloHypoTool</base>
    <base>CaloTool</base>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>process</name>
      <anchor>a0</anchor>
      <arglist>(CaloHypo *hypo) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(CaloHypo *hypo) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloPrsCorrection</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloPrsCorrection</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>corr</name>
      <anchor>b2</anchor>
      <arglist>(const double energy, const double prs, const Params &amp;pars) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>corrPrime</name>
      <anchor>b3</anchor>
      <arglist>(const double energy, const double, const Params &amp;pars) const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ToolFactory&lt;CaloPrsCorrection&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloRemoveMomentum</name>
    <filename>class_calo_remove_momentum.html</filename>
    <base virtualness="virtual">ICaloHypoTool</base>
    <base>CaloTool</base>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>process</name>
      <anchor>a0</anchor>
      <arglist>(CaloHypo *hypo) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(CaloHypo *hypo) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloRemoveMomentum</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloRemoveMomentum</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ToolFactory&lt;CaloRemoveMomentum&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloSCorrectionArcSinh</name>
    <filename>class_calo_s_correction_arc_sinh.html</filename>
    <base>CaloTool</base>
    <base virtualness="virtual">ICaloSCorrectionFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>calculate</name>
      <anchor>a0</anchor>
      <arglist>(double, double, double, double, double, double, double &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>calculateprime</name>
      <anchor>a1</anchor>
      <arglist>(double, double, double, double, double, double, double &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloSCorrectionArcSinh</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloSCorrectionArcSinh</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ToolFactory&lt;CaloSCorrectionArcSinh&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloSCorrectionBarycentre</name>
    <filename>class_calo_s_correction_barycentre.html</filename>
    <base>CaloTool</base>
    <base virtualness="virtual">ICaloSCorrectionFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>calculate</name>
      <anchor>a0</anchor>
      <arglist>(double, double, double, double, double, double, double &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>calculateprime</name>
      <anchor>a1</anchor>
      <arglist>(double, double, double, double, double, double, double &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloSCorrectionBarycentre</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloSCorrectionBarycentre</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ToolFactory&lt;CaloSCorrectionBarycentre&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloSCorrectionCellCenter</name>
    <filename>class_calo_s_correction_cell_center.html</filename>
    <base>CaloTool</base>
    <base virtualness="virtual">ICaloSCorrectionFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>calculate</name>
      <anchor>a0</anchor>
      <arglist>(double, double, double, double, double, double, double &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>calculateprime</name>
      <anchor>a1</anchor>
      <arglist>(double, double, double, double, double, double, double &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloSCorrectionCellCenter</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloSCorrectionCellCenter</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ToolFactory&lt;CaloSCorrectionCellCenter&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloSCorrectionComplex</name>
    <filename>class_calo_s_correction_complex.html</filename>
    <base>CaloTool</base>
    <base virtualness="virtual">ICaloSCorrectionFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>calculate</name>
      <anchor>a0</anchor>
      <arglist>(double, double, double, double, double, double, double &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>calculateprime</name>
      <anchor>a1</anchor>
      <arglist>(double, double, double, double, double, double, double &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloSCorrectionComplex</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloSCorrectionComplex</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ToolFactory&lt;CaloSCorrectionComplex&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloSCorrectionDoubleTanh</name>
    <filename>class_calo_s_correction_double_tanh.html</filename>
    <base>CaloTool</base>
    <base virtualness="virtual">ICaloSCorrectionFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>calculate</name>
      <anchor>a0</anchor>
      <arglist>(double, double, double, double, double, double, double &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>calculateprime</name>
      <anchor>a1</anchor>
      <arglist>(double, double, double, double, double, double, double &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloSCorrectionDoubleTanh</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloSCorrectionDoubleTanh</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ToolFactory&lt;CaloSCorrectionDoubleTanh&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloSCorrectionFinal</name>
    <filename>class_calo_s_correction_final.html</filename>
    <base>CaloTool</base>
    <base virtualness="virtual">ICaloHypoTool</base>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>process</name>
      <anchor>a0</anchor>
      <arglist>(CaloHypo *hypo) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(CaloHypo *hypo) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloSCorrectionFinal</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloSCorrectionFinal</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ToolFactory&lt;CaloSCorrectionFinal&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloSCorrectionLinear</name>
    <filename>class_calo_s_correction_linear.html</filename>
    <base>CaloTool</base>
    <base virtualness="virtual">ICaloSCorrectionFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>calculate</name>
      <anchor>a0</anchor>
      <arglist>(double, double, double, double, double, double, double &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>calculateprime</name>
      <anchor>a1</anchor>
      <arglist>(double, double, double, double, double, double, double &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloSCorrectionLinear</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloSCorrectionLinear</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ToolFactory&lt;CaloSCorrectionLinear&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloSCorrectionSequence</name>
    <filename>class_calo_s_correction_sequence.html</filename>
    <base>CaloTool</base>
    <base virtualness="virtual">ICaloHypoTool</base>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>process</name>
      <anchor>a0</anchor>
      <arglist>(CaloHypo *hypo) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(CaloHypo *hypo) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloSCorrectionSequence</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloSCorrectionSequence</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ToolFactory&lt;CaloSCorrectionSequence&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloSelectNeutralCluster</name>
    <filename>class_calo_select_neutral_cluster.html</filename>
    <base virtualness="virtual">ICaloClusterSelector</base>
    <base virtualness="virtual">IIncidentListener</base>
    <base>CaloTool</base>
    <member kind="typedef">
      <type>IRelationWeighted&lt; CaloCluster, TrStoredTrack, float &gt;</type>
      <name>ITable</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>select</name>
      <anchor>a0</anchor>
      <arglist>(const CaloCluster *cluster) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(const CaloCluster *cluster) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handle</name>
      <anchor>a3</anchor>
      <arglist>(const Incident &amp;inc)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloSelectNeutralCluster</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloSelectNeutralCluster</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ToolFactory&lt;CaloSelectNeutralCluster&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloSelector</name>
    <filename>class_calo_selector.html</filename>
    <base virtualness="virtual">ICaloClusterSelector</base>
    <base>CaloTool</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>select</name>
      <anchor>a0</anchor>
      <arglist>(const CaloCluster *cluster) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(const CaloCluster *cluster) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloSelector</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloSelector</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ToolFactory&lt;CaloSelector&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloSelectorAND</name>
    <filename>class_calo_selector_a_n_d.html</filename>
    <base virtualness="virtual">ICaloClusterSelector</base>
    <base>CaloTool</base>
    <member kind="typedef">
      <type>std::vector&lt; std::string &gt;</type>
      <name>Names</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; ICaloClusterSelector * &gt;</type>
      <name>Selectors</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>select</name>
      <anchor>a0</anchor>
      <arglist>(const CaloCluster *cluster) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(const CaloCluster *cluster) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloSelectorAND</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloSelectorAND</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ToolFactory&lt;CaloSelectorAND&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloSelectorNOT</name>
    <filename>class_calo_selector_n_o_t.html</filename>
    <base virtualness="virtual">ICaloClusterSelector</base>
    <base>CaloTool</base>
    <member kind="typedef">
      <type>std::vector&lt; std::string &gt;</type>
      <name>Names</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; ICaloClusterSelector * &gt;</type>
      <name>Selectors</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>select</name>
      <anchor>a0</anchor>
      <arglist>(const CaloCluster *cluster) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(const CaloCluster *cluster) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloSelectorNOT</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloSelectorNOT</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ToolFactory&lt;CaloSelectorNOT&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloSelectorOR</name>
    <filename>class_calo_selector_o_r.html</filename>
    <base virtualness="virtual">ICaloClusterSelector</base>
    <base>CaloTool</base>
    <member kind="typedef">
      <type>std::vector&lt; std::string &gt;</type>
      <name>Names</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; ICaloClusterSelector * &gt;</type>
      <name>Selectors</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>select</name>
      <anchor>a0</anchor>
      <arglist>(const CaloCluster *cluster) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(const CaloCluster *cluster) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloSelectorOR</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloSelectorOR</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ToolFactory&lt;CaloSelectorOR&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloSharedCellAlg</name>
    <filename>class_calo_shared_cell_alg.html</filename>
    <base>CaloAlgorithm</base>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloSharedCellAlg</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloSharedCellAlg</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>AlgFactory&lt;CaloSharedCellAlg&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloSingleGammaTool</name>
    <filename>class_calo_single_gamma_tool.html</filename>
    <base virtualness="virtual">IIncidentListener</base>
    <base virtualness="virtual">ICaloHypoLikelihood</base>
    <base>CaloTool</base>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const CaloHypotheses::Hypothesis &amp;</type>
      <name>hypothesis</name>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchor>a3</anchor>
      <arglist>(const CaloHypo *hypo) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>likelihood</name>
      <anchor>a4</anchor>
      <arglist>(const CaloHypo *hypo) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handle</name>
      <anchor>a5</anchor>
      <arglist>(const Incident &amp;incident)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloSingleGammaTool</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloSingleGammaTool</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ToolFactory&lt;CaloSingleGammaTool&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloSinglePhotonAlg</name>
    <filename>class_calo_single_photon_alg.html</filename>
    <base>CaloAlgorithm</base>
    <member kind="typedef">
      <type>std::vector&lt; std::string &gt;</type>
      <name>Names</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; ICaloClusterSelector * &gt;</type>
      <name>Selectors</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; ICaloHypoTool * &gt;</type>
      <name>HypoTools</name>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HypoTools</type>
      <name>Corrections</name>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloSinglePhotonAlg</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvc)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloSinglePhotonAlg</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>AlgFactory&lt;CaloSinglePhotonAlg&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloSShape</name>
    <filename>class_calo_s_shape.html</filename>
    <base virtualness="virtual">ICaloHypoTool</base>
    <base>CaloTool</base>
    <member kind="typedef">
      <type>std::vector&lt; ICaloCorrection * &gt;</type>
      <name>Corrections</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; std::string &gt;</type>
      <name>Names</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>process</name>
      <anchor>a2</anchor>
      <arglist>(CaloHypo *hypo) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>operator()</name>
      <anchor>a3</anchor>
      <arglist>(CaloHypo *hypo) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloSShape</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloSShape</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ToolFactory&lt;CaloSShape&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloTrack2EstimatorAlg</name>
    <filename>class_calo_track2_estimator_alg.html</filename>
    <base>CaloAlgorithm</base>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloTrack2EstimatorAlg</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvc)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloTrack2EstimatorAlg</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>AlgFactory&lt;CaloTrack2EstimatorAlg&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloTrack2IdAlg</name>
    <filename>class_calo_track2_id_alg.html</filename>
    <base>CaloAlgorithm</base>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloTrack2IdAlg</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvc)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloTrack2IdAlg</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>pFunc</name>
      <anchor>b2</anchor>
      <arglist>(const double value) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>vFunc</name>
      <anchor>b3</anchor>
      <arglist>(const double value) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>AIDA::IHistogram2D *</type>
      <name>makeDeltaLL</name>
      <anchor>b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>AIDA::IHistogram2D *</type>
      <name>makeSignalN</name>
      <anchor>b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>AIDA::IHistogram2D *</type>
      <name>makeBackgrN</name>
      <anchor>b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>AIDA::IHistogram2D *</type>
      <name>loadHisto</name>
      <anchor>b7</anchor>
      <arglist>(const std::string &amp;address) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>AIDA::IHistogram2D *</type>
      <name>normalize</name>
      <anchor>b8</anchor>
      <arglist>(const AIDA::IHistogram2D *histo, const int ID1, const int ID2) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>compare</name>
      <anchor>b9</anchor>
      <arglist>(const AIDA::IHistogram2D *h1, const AIDA::IHistogram2D *h2) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>xCoord</name>
      <anchor>b10</anchor>
      <arglist>(const AIDA::IHistogram2D *histo, const int bin) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>yCoord</name>
      <anchor>b11</anchor>
      <arglist>(const AIDA::IHistogram2D *histo, const int bin) const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>AlgFactory&lt;CaloTrack2IdAlg&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloTrackAlg</name>
    <filename>class_calo_track_alg.html</filename>
    <base>CaloAlgorithm</base>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloTrackAlg</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *svcloc)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloTrackAlg</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>use</name>
      <anchor>b2</anchor>
      <arglist>(const TrStoredTrack *track) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>bits</name>
      <anchor>b3</anchor>
      <arglist>(const TrStoredTrack *trObj) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TrTrackUse</type>
      <name>m_use</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloTrackEcalEval</name>
    <filename>class_calo_track_ecal_eval.html</filename>
    <base virtualness="virtual">ICaloTrackIdEval</base>
    <base virtualness="virtual">IIncidentListener</base>
    <base>CaloTool</base>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>process</name>
      <anchor>a0</anchor>
      <arglist>(const TrStoredTrack *track, double &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(const TrStoredTrack *track) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>process</name>
      <anchor>a2</anchor>
      <arglist>(const TrgTrack *track, double &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchor>a3</anchor>
      <arglist>(const TrgTrack *track) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handle</name>
      <anchor>a5</anchor>
      <arglist>(const Incident &amp;incident)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloTrackEcalEval</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloTrackEcalEval</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ToolFactory&lt;CaloTrackEcalEval&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloTrackEval</name>
    <filename>class_calo_track_eval.html</filename>
    <base virtualness="virtual">ICaloTrackIdEval</base>
    <base virtualness="virtual">IIncidentListener</base>
    <base>CaloTool</base>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>process</name>
      <anchor>a0</anchor>
      <arglist>(const TrStoredTrack *track, double &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(const TrStoredTrack *track) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>process</name>
      <anchor>a2</anchor>
      <arglist>(const TrgTrack *track, double &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchor>a3</anchor>
      <arglist>(const TrgTrack *track) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handle</name>
      <anchor>a5</anchor>
      <arglist>(const Incident &amp;incident)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloTrackEval</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloTrackEval</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ToolFactory&lt;CaloTrackEval&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloTrackHcalEval</name>
    <filename>class_calo_track_hcal_eval.html</filename>
    <base virtualness="virtual">ICaloTrackIdEval</base>
    <base virtualness="virtual">IIncidentListener</base>
    <base>CaloTool</base>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>process</name>
      <anchor>a0</anchor>
      <arglist>(const TrStoredTrack *track, double &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(const TrStoredTrack *track) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>process</name>
      <anchor>a2</anchor>
      <arglist>(const TrgTrack *track, double &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchor>a3</anchor>
      <arglist>(const TrgTrack *track) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handle</name>
      <anchor>a5</anchor>
      <arglist>(const Incident &amp;incident)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloTrackHcalEval</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloTrackHcalEval</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ToolFactory&lt;CaloTrackHcalEval&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloTrackMatchBase</name>
    <filename>class_calo_track_match_base.html</filename>
    <base virtualness="virtual">IIncidentListener</base>
    <base virtualness="virtual">ICaloTrackMatch</base>
    <base>CaloTool</base>
    <member kind="enumeration">
      <name>ERROR</name>
      <anchor>w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TOOL</name>
      <anchor>w5w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXTR_INIT</name>
      <anchor>w5w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MATHEM</name>
      <anchor>w5w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRACK</name>
      <anchor>w5w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXTRAP</name>
      <anchor>w5w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MatchingPair</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(const CaloPosition *caloObj, const TrStoredTrack *trObj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MatchingPair</type>
      <name>operator()</name>
      <anchor>a3</anchor>
      <arglist>(const CaloPosition *caloObj, const TrgTrack *trObj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TrState *</type>
      <name>state</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handle</name>
      <anchor>a5</anchor>
      <arglist>(const Incident &amp;incident)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>MatchStruct1</type>
      <name>MatchType1</name>
      <anchor>x0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>MatchType1</type>
      <name>MatchType</name>
      <anchor>x1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>MatchStruct2</type>
      <name>MatchType2</name>
      <anchor>x2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>StatusCode</type>
      <name>findState</name>
      <anchor>b0</anchor>
      <arglist>(const TrStoredTrack *trObj, const double Z, const double zExtr) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>StatusCode</type>
      <name>findState</name>
      <anchor>b1</anchor>
      <arglist>(const TrStoredTrack *trObj, const double Z, const double zExtr, const double covX, const double covY) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>chi2</name>
      <anchor>b2</anchor>
      <arglist>(const MatchType &amp;mt1, const MatchType &amp;mt2) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>chi2</name>
      <anchor>b3</anchor>
      <arglist>(const MatchType2 &amp;mt1, const MatchType2 &amp;mt2) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>chi2</name>
      <anchor>b4</anchor>
      <arglist>(const MatchType1 &amp;mt1, const MatchType2 &amp;mt2) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>chi2</name>
      <anchor>b5</anchor>
      <arglist>(const MatchType2 &amp;mt1, const MatchType1 &amp;mt2) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>mtrxOp</name>
      <anchor>b6</anchor>
      <arglist>(HepSymMatrix &amp;cov, const HepSymMatrix &amp;mx1, const HepSymMatrix &amp;mx2) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>mtrxOp</name>
      <anchor>b7</anchor>
      <arglist>(HepDiagMatrix &amp;cov, const HepDiagMatrix &amp;mx1, const HepDiagMatrix &amp;mx2) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>mtrxOp</name>
      <anchor>b8</anchor>
      <arglist>(HepSymMatrix &amp;cov, const HepSymMatrix &amp;mx1, const HepDiagMatrix &amp;mx2) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>bits</name>
      <anchor>b9</anchor>
      <arglist>(const TrStoredTrack *track) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ITrExtrapolator *</type>
      <name>extrapolator</name>
      <anchor>b10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloTrackMatchBase</name>
      <anchor>b11</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloTrackMatchBase</name>
      <anchor>b12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TrState *</type>
      <name>m_state</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const TrStoredTrack *</type>
      <name>m_prevTrack</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_bad</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_optimized</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">CaloTrackMatchBase::MatchStruct1</class>
    <class kind="struct">CaloTrackMatchBase::MatchStruct2</class>
  </compound>
  <compound kind="struct">
    <name>CaloTrackMatchBase::MatchStruct1</name>
    <filename>struct_calo_track_match_base_1_1_match_struct1.html</filename>
    <member kind="function">
      <type></type>
      <name>MatchStruct1</name>
      <anchor>a0</anchor>
      <arglist>(const HepVector &amp;p, const HepSymMatrix &amp;m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatchStruct1</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>invert</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>HepVector</type>
      <name>params</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>HepSymMatrix</type>
      <name>cov</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>error</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>inverted</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CaloTrackMatchBase::MatchStruct2</name>
    <filename>struct_calo_track_match_base_1_1_match_struct2.html</filename>
    <member kind="function">
      <type></type>
      <name>MatchStruct2</name>
      <anchor>a0</anchor>
      <arglist>(const HepVector &amp;p, const HepDiagMatrix &amp;m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatchStruct2</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>invert</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>HepVector</type>
      <name>params</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>HepDiagMatrix</type>
      <name>cov</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>error</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>inverted</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloTrackMatchBrem2</name>
    <filename>class_calo_track_match_brem2.html</filename>
    <base virtualness="virtual">ICaloTrackMatch</base>
    <base>CaloTrackMatchBase</base>
    <member kind="function">
      <type>StatusCode</type>
      <name>match</name>
      <anchor>a0</anchor>
      <arglist>(const CaloPosition *caloObj, const TrStoredTrack *trObj, double &amp;chi2)</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>match</name>
      <anchor>a1</anchor>
      <arglist>(const CaloPosition *caloObj, const TrgTrack *trObj, double &amp;chi2)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloTrackMatchBrem2</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloTrackMatchBrem2</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ToolFactory&lt;CaloTrackMatchBrem2&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloTrackMatchBremm</name>
    <filename>class_calo_track_match_bremm.html</filename>
    <base virtualness="virtual">ICaloTrackMatch</base>
    <base>CaloTrackMatchBase</base>
    <member kind="function">
      <type>StatusCode</type>
      <name>match</name>
      <anchor>a0</anchor>
      <arglist>(const CaloPosition *caloObj, const TrStoredTrack *trObj, double &amp;chi2)</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>match</name>
      <anchor>a1</anchor>
      <arglist>(const CaloPosition *caloObj, const TrgTrack *trObj, double &amp;chi2)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloTrackMatchBremm</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloTrackMatchBremm</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ToolFactory&lt;CaloTrackMatchBremm&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloTrackMatchElectron</name>
    <filename>class_calo_track_match_electron.html</filename>
    <base virtualness="virtual">ICaloTrackMatch</base>
    <base>CaloTrackMatchBase</base>
    <member kind="function">
      <type>StatusCode</type>
      <name>match</name>
      <anchor>a0</anchor>
      <arglist>(const CaloPosition *caloObj, const TrStoredTrack *trObj, double &amp;chi2)</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>match</name>
      <anchor>a1</anchor>
      <arglist>(const CaloPosition *caloObj, const TrgTrack *trObj, double &amp;chi2)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloTrackMatchElectron</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloTrackMatchElectron</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ToolFactory&lt;CaloTrackMatchElectron&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloTrackMatchPhoton</name>
    <filename>class_calo_track_match_photon.html</filename>
    <base virtualness="virtual">ICaloTrackMatch</base>
    <base>CaloTrackMatchBase</base>
    <member kind="function">
      <type>StatusCode</type>
      <name>match</name>
      <anchor>a0</anchor>
      <arglist>(const CaloPosition *caloObj, const TrStoredTrack *trObj, double &amp;chi2)</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>match</name>
      <anchor>a1</anchor>
      <arglist>(const CaloPosition *caloObj, const TrgTrack *trObj, double &amp;chi2)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloTrackMatchPhoton</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloTrackMatchPhoton</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ToolFactory&lt;CaloTrackMatchPhoton&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloTrackPrsEval</name>
    <filename>class_calo_track_prs_eval.html</filename>
    <base virtualness="virtual">ICaloTrackIdEval</base>
    <base virtualness="virtual">IIncidentListener</base>
    <base>CaloTool</base>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>process</name>
      <anchor>a0</anchor>
      <arglist>(const TrStoredTrack *track, double &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(const TrStoredTrack *track) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>process</name>
      <anchor>a2</anchor>
      <arglist>(const TrgTrack *track, double &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchor>a3</anchor>
      <arglist>(const TrgTrack *track) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handle</name>
      <anchor>a6</anchor>
      <arglist>(const Incident &amp;incident)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloTrackPrsEval</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloTrackPrsEval</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ToolFactory&lt;CaloTrackPrsEval&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloTrgSelectNeutralCluster</name>
    <filename>class_calo_trg_select_neutral_cluster.html</filename>
    <base virtualness="virtual">ICaloClusterSelector</base>
    <base virtualness="virtual">IIncidentListener</base>
    <base>CaloTool</base>
    <member kind="typedef">
      <type>IRelationWeighted&lt; CaloCluster, TrgTrack, float &gt;</type>
      <name>ITable</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>select</name>
      <anchor>a0</anchor>
      <arglist>(const CaloCluster *cluster) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(const CaloCluster *cluster) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handle</name>
      <anchor>a3</anchor>
      <arglist>(const Incident &amp;inc)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CaloTrgSelectNeutralCluster</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CaloTrgSelectNeutralCluster</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ToolFactory&lt;CaloTrgSelectNeutralCluster&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CelAutoTaggedCell</name>
    <filename>class_cel_auto_tagged_cell.html</filename>
    <member kind="enumeration">
      <name>Tag</name>
      <anchor>w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DefaultFlag</name>
      <anchor>w5w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Clustered</name>
      <anchor>w5w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Edge</name>
      <anchor>w5w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>FlagState</name>
      <anchor>w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NotTagged</name>
      <anchor>w6w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Tagged</name>
      <anchor>w6w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CelAutoTaggedCell</name>
      <anchor>a0</anchor>
      <arglist>(const CaloCellID &amp;id=CaloCellID())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CelAutoTaggedCell</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CaloDigit *</type>
      <name>digit</name>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CaloCellID &amp;</type>
      <name>cellID</name>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>e</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEdge</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isClustered</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CaloCellID &amp;</type>
      <name>seedForClustered</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; CaloCellID &gt; &amp;</type>
      <name>seeds</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberSeeds</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSeed</name>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isWithSeed</name>
      <anchor>a11</anchor>
      <arglist>(const CaloCellID &amp;seed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsSeed</name>
      <anchor>a12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEdge</name>
      <anchor>a13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setClustered</name>
      <anchor>a14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStatus</name>
      <anchor>a15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSeed</name>
      <anchor>a16</anchor>
      <arglist>(const CaloCellID &amp;seed)</arglist>
    </member>
    <member kind="function">
      <type>CelAutoTaggedCell &amp;</type>
      <name>operator=</name>
      <anchor>a17</anchor>
      <arglist>(const CaloDigit *digit)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reset</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CellularAutomaton</name>
    <filename>class_cellular_automaton.html</filename>
    <base>CaloAlgorithm</base>
    <member kind="typedef">
      <type>std::vector&lt; CelAutoTaggedCell * &gt;</type>
      <name>SeqVector</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CaloVector&lt; CelAutoTaggedCell * &gt;</type>
      <name>DirVector</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CellularAutomaton</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *svcloc)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CellularAutomaton</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isLocMax</name>
      <anchor>b2</anchor>
      <arglist>(const CaloDigit *digit, const DirVector &amp;hits, const DeCalorimeter *det)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isLocMax</name>
      <anchor>b3</anchor>
      <arglist>(const CelAutoTaggedCell *taggedCell, const DirVector &amp;hitsDirect, const DeCalorimeter *detector)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>appliRulesTagger</name>
      <anchor>b4</anchor>
      <arglist>(CelAutoTaggedCell *taggedCell, DirVector &amp;taggedCellsDirect, const DeCalorimeter *detector)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setEXYCluster</name>
      <anchor>b5</anchor>
      <arglist>(CaloCluster *cluster, const DeCalorimeter *detector)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>AlgFactory&lt;CellularAutomaton&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CloneTrack</name>
    <filename>class_clone_track.html</filename>
    <member kind="function">
      <type></type>
      <name>CloneTrack</name>
      <anchor>a0</anchor>
      <arglist>(TrFitTrack *tr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CloneTrack</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkClone</name>
      <anchor>a2</anchor>
      <arglist>(CloneTrack *clTr, double frac)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>nMeas</name>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isClone</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setClone</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TrFitTrack *</type>
      <name>track</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; VeloCluster * &gt; &amp;</type>
      <name>veloClus</name>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; ITCluster * &gt; &amp;</type>
      <name>ITClus</name>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OTTime * &gt; &amp;</type>
      <name>OTTim</name>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ClusterCovarianceMatrixTool</name>
    <filename>class_cluster_covariance_matrix_tool.html</filename>
    <base virtualness="virtual">ICaloClusterTool</base>
    <base>CaloTool</base>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>process</name>
      <anchor>a2</anchor>
      <arglist>(CaloCluster *cluster) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>operator()</name>
      <anchor>a3</anchor>
      <arglist>(CaloCluster *cluster) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ClusterCovarianceMatrixTool</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~ClusterCovarianceMatrixTool</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ToolFactory&lt;ClusterCovarianceMatrixTool&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ClusterFilter</name>
    <filename>class_cluster_filter.html</filename>
    <base>AlgTool</base>
    <base virtualness="virtual">IClusterFilter</base>
    <member kind="function">
      <type></type>
      <name>ClusterFilter</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ClusterFilter</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>prepareEvent</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isUsed</name>
      <anchor>a5</anchor>
      <arglist>(VeloCluster *cl)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isUsed</name>
      <anchor>a6</anchor>
      <arglist>(ITCluster *cl)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isUsed</name>
      <anchor>a7</anchor>
      <arglist>(OTTime *cl)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ClusterSpreadTool</name>
    <filename>class_cluster_spread_tool.html</filename>
    <base virtualness="virtual">ICaloClusterTool</base>
    <base>CaloTool</base>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>process</name>
      <anchor>a2</anchor>
      <arglist>(CaloCluster *cluster) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>operator()</name>
      <anchor>a3</anchor>
      <arglist>(CaloCluster *cluster) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ClusterSpreadTool</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~ClusterSpreadTool</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ToolFactory&lt;ClusterSpreadTool&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConvertToLinker</name>
    <filename>class_convert_to_linker.html</filename>
    <base>Algorithm</base>
    <member kind="typedef">
      <type>ITCluster2MCParticleAsct::IAsct</type>
      <name>ITClusAsct</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OTTime2MCParticleAsct::IAsct</type>
      <name>OTTimeAsct</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VeloCluster2MCParticleAsct::IAsct</type>
      <name>VeloClusAsct</name>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MuonCoord2MCParticleAsct::IAsct</type>
      <name>MuonCoordAsct</name>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConvertToLinker</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConvertToLinker</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConvertToTrFitTrack</name>
    <filename>class_convert_to_tr_fit_track.html</filename>
    <base>GaudiAlgorithm</base>
    <member kind="function">
      <type></type>
      <name>ConvertToTrFitTrack</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConvertToTrFitTrack</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DecodeL1VeloPhi</name>
    <filename>class_decode_l1_velo_phi.html</filename>
    <base>GaudiAlgorithm</base>
    <member kind="function">
      <type></type>
      <name>DecodeL1VeloPhi</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DecodeL1VeloPhi</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DecodeL1VeloR</name>
    <filename>class_decode_l1_velo_r.html</filename>
    <base>GaudiAlgorithm</base>
    <member kind="function">
      <type></type>
      <name>DecodeL1VeloR</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DecodeL1VeloR</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DecodeRawVelo</name>
    <filename>class_decode_raw_velo.html</filename>
    <base>GaudiAlgorithm</base>
    <member kind="function">
      <type></type>
      <name>DecodeRawVelo</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DecodeRawVelo</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DigitFromCalo</name>
    <filename>class_digit_from_calo.html</filename>
    <base>std::unary_function&lt; const CaloDigit *, bool &gt;</base>
    <member kind="function">
      <type></type>
      <name>DigitFromCalo</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;calo)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DigitFromCalo</name>
      <anchor>a1</anchor>
      <arglist>(const int calo)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(const CaloDigit *digit) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FastRingFitter</name>
    <filename>class_fast_ring_fitter.html</filename>
    <member kind="function">
      <type></type>
      <name>FastRingFitter</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FastRingFitter</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fit</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initFit</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>currentFit</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moments</name>
      <anchor>a6</anchor>
      <arglist>(int npoints)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>moments_cntr</name>
      <anchor>a7</anchor>
      <arglist>(int npoints)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>solveMB</name>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>chiSquare</name>
      <anchor>a9</anchor>
      <arglist>(int npoints, bool useCenter)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ProbChiSquare</name>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPoint</name>
      <anchor>a11</anchor>
      <arglist>(const double x, const double y)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>radius</name>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xCenter</name>
      <anchor>a13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yCenter</name>
      <anchor>a14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fitStatus</name>
      <anchor>a15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>degreesOfFreedom</name>
      <anchor>a16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>chiSquare</name>
      <anchor>a17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>errRadiusRing</name>
      <anchor>a18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getErrAnglePhot</name>
      <anchor>a19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>errRadiusPhot</name>
      <anchor>a20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>errXCenter</name>
      <anchor>a21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>errYCenter</name>
      <anchor>a22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfIteration</name>
      <anchor>a23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIteration</name>
      <anchor>a24</anchor>
      <arglist>(int iteration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRadiusGuess</name>
      <anchor>a25</anchor>
      <arglist>(double radius)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setXCenterGuess</name>
      <anchor>a26</anchor>
      <arglist>(double center)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setYCenterGuess</name>
      <anchor>a27</anchor>
      <arglist>(double center)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCenterErrors</name>
      <anchor>a28</anchor>
      <arglist>(double x2, double y2, double xy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCenterErrors</name>
      <anchor>a29</anchor>
      <arglist>(double &amp;x2, double &amp;y2, double &amp;xy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurvatureErrors</name>
      <anchor>a30</anchor>
      <arglist>(double v11, double v22)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setErrorPerPhoton</name>
      <anchor>a31</anchor>
      <arglist>(double v11, double v22)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUseCenter</name>
      <anchor>a32</anchor>
      <arglist>(bool useCenter)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getUseCenter</name>
      <anchor>a33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfGoodPhotons</name>
      <anchor>a34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>countGoodPhotons</name>
      <anchor>a35</anchor>
      <arglist>(int npoints)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>countGoodPhotons_4</name>
      <anchor>a36</anchor>
      <arglist>(int npoints)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distToCentre</name>
      <anchor>a37</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartingPhotons</name>
      <anchor>a38</anchor>
      <arglist>(int numberOfPhotons)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getStartingPhotons</name>
      <anchor>a39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>unBiasNormalCase</name>
      <anchor>a40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCerenkov</name>
      <anchor>a41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getEmptyArc</name>
      <anchor>a42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCerenkovErr</name>
      <anchor>a43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getEmptyArcInit</name>
      <anchor>a44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSecondEmptyArcInit</name>
      <anchor>a45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEmptyArcInit</name>
      <anchor>a46</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSecondEmptyArcInit</name>
      <anchor>a47</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBestMomentum</name>
      <anchor>a48</anchor>
      <arglist>(double momentum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIDList</name>
      <anchor>a49</anchor>
      <arglist>(double CkList[5], double erList[5], int flagList[5])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>distanceIDs</name>
      <anchor>a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getDistanceIDs</name>
      <anchor>a51</anchor>
      <arglist>(double vectID[5])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getLikelihoods</name>
      <anchor>a52</anchor>
      <arglist>(double vectLikelies[5], int &amp;bestID)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>parametrizedBias</name>
      <anchor>a53</anchor>
      <arglist>(double emptyArc)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numberOfPoints</name>
      <anchor>a54</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>xPoints</name>
      <anchor>a55</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>yPoints</name>
      <anchor>a56</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_fitRadiusOnly</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FillTrgDecision</name>
    <filename>class_fill_trg_decision.html</filename>
    <base>GaudiAlgorithm</base>
    <member kind="function">
      <type></type>
      <name>FillTrgDecision</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FillTrgDecision</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FindKShortParams</name>
    <filename>class_find_k_short_params.html</filename>
    <base>Algorithm</base>
    <member kind="function">
      <type></type>
      <name>FindKShortParams</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FindKShortParams</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>solveMatrix</name>
      <anchor>b0</anchor>
      <arglist>(double m[5][5], double d[5])</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>fitLine</name>
      <anchor>b1</anchor>
      <arglist>(std::vector&lt; HepPoint3D &gt; &amp;hit, int mode, double z0, double &amp;a, double &amp;b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>fitParabola</name>
      <anchor>b2</anchor>
      <arglist>(std::vector&lt; HepPoint3D &gt; &amp;hit, int mode, double &amp;a, double &amp;b, double &amp;c)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>fitCubic</name>
      <anchor>b3</anchor>
      <arglist>(std::vector&lt; HepPoint3D &gt; &amp;hit, int mode, double &amp;a, double &amp;b, double &amp;c, double &amp;d)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>fitPion</name>
      <anchor>b4</anchor>
      <arglist>(std::vector&lt; HepPoint3D &gt; &amp;hitsTT, std::vector&lt; HepPoint3D &gt; &amp;hitsST, std::vector&lt; double &gt; &amp;params, MsgStream &amp;msg)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FindLongTrack</name>
    <filename>class_find_long_track.html</filename>
    <base>Algorithm</base>
    <member kind="function">
      <type></type>
      <name>FindLongTrack</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FindLongTrack</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>setSTLayers</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>setOTLayers</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillHisto</name>
      <anchor>a7</anchor>
      <arglist>(LongTrack &amp;track, std::vector&lt; double &gt; &amp;histo, bool verbose, MsgStream &amp;log)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xTol</name>
      <anchor>a8</anchor>
      <arglist>(int type)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>localLayer</name>
      <anchor>a9</anchor>
      <arglist>(int sta, int lay)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>typeOfWafer</name>
      <anchor>a10</anchor>
      <arglist>(int sta, int lay, int waf)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FindTrKShort</name>
    <filename>class_find_tr_k_short.html</filename>
    <base>Algorithm</base>
    <member kind="function">
      <type></type>
      <name>FindTrKShort</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FindTrKShort</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>StatusCode</type>
      <name>setSTLayers</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>localLayer</name>
      <anchor>b1</anchor>
      <arglist>(int sta, int lay)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>typeOfWafer</name>
      <anchor>b2</anchor>
      <arglist>(unsigned int index, int waf)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>decodeTTHits</name>
      <anchor>b3</anchor>
      <arglist>(MsgStream &amp;msg)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GSLSpline</name>
    <filename>class_g_s_l_spline.html</filename>
    <member kind="function">
      <type></type>
      <name>GSLSpline</name>
      <anchor>a0</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;x, const std::vector&lt; double &gt; &amp;y, const gsl_interp_type *interType=gsl_interp_cspline)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GSLSpline</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>value</name>
      <anchor>a2</anchor>
      <arglist>(const double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>firstDerivative</name>
      <anchor>a3</anchor>
      <arglist>(const double x) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>secondDerivative</name>
      <anchor>a4</anchor>
      <arglist>(const double x) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>integral</name>
      <anchor>a5</anchor>
      <arglist>(const double from, const double to) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IBIntegrator</name>
    <filename>class_i_b_integrator.html</filename>
    <base virtualness="virtual">IAlgTool</base>
    <member kind="function" virtualness="pure">
      <type>virtual StatusCode</type>
      <name>calculateBdlAndCenter</name>
      <anchor>a0</anchor>
      <arglist>(const HepPoint3D &amp;beginPoint, const HepPoint3D &amp;endPoint, const double tX, const double tY, double &amp;zCenter, HepVector3D &amp;Bdl) const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const InterfaceID &amp;</type>
      <name>interfaceID</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IClusterFilter</name>
    <filename>class_i_cluster_filter.html</filename>
    <base virtualness="virtual">IAlgTool</base>
    <member kind="function" virtualness="pure">
      <type>virtual StatusCode</type>
      <name>prepareEvent</name>
      <anchor>a0</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isUsed</name>
      <anchor>a1</anchor>
      <arglist>(VeloCluster *cl)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isUsed</name>
      <anchor>a2</anchor>
      <arglist>(ITCluster *cl)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isUsed</name>
      <anchor>a3</anchor>
      <arglist>(OTTime *cl)=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const InterfaceID &amp;</type>
      <name>interfaceID</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IITAmpliferResponse</name>
    <filename>class_i_i_t_amplifer_response.html</filename>
  </compound>
  <compound kind="class">
    <name>IITAmplifierResponse</name>
    <filename>class_i_i_t_amplifier_response.html</filename>
    <base virtualness="virtual">IAlgTool</base>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>response</name>
      <anchor>a0</anchor>
      <arglist>(const double time) const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const InterfaceID &amp;</type>
      <name>interfaceID</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IITBaryCentreEstimator</name>
    <filename>class_i_i_t_bary_centre_estimator.html</filename>
    <base virtualness="virtual">IAlgTool</base>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>meanStrip</name>
      <anchor>a0</anchor>
      <arglist>(const SmartRefVector&lt; ITDigit &gt; &amp;digits) const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const InterfaceID &amp;</type>
      <name>interfaceID</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IITChargeSharingTool</name>
    <filename>class_i_i_t_charge_sharing_tool.html</filename>
    <base virtualness="virtual">IAlgTool</base>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>sharing</name>
      <anchor>a0</anchor>
      <arglist>(const double relDist) const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const InterfaceID &amp;</type>
      <name>interfaceID</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IITClusterErrorEstimator</name>
    <filename>class_i_i_t_cluster_error_estimator.html</filename>
    <base virtualness="virtual">IAlgTool</base>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>error</name>
      <anchor>a0</anchor>
      <arglist>(const unsigned int nStrips) const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const InterfaceID &amp;</type>
      <name>interfaceID</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IITCrossTalk</name>
    <filename>class_i_i_t_cross_talk.html</filename>
    <base virtualness="virtual">IAlgTool</base>
    <member kind="function" virtualness="pure">
      <type>virtual StatusCode</type>
      <name>add</name>
      <anchor>a0</anchor>
      <arglist>(ITDigits *digits)=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const InterfaceID &amp;</type>
      <name>interfaceID</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IITDepositedCharge</name>
    <filename>class_i_i_t_deposited_charge.html</filename>
    <base virtualness="virtual">IAlgTool</base>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>charge</name>
      <anchor>a0</anchor>
      <arglist>(const MCHit *aHit) const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const InterfaceID &amp;</type>
      <name>interfaceID</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IITEffCalculator</name>
    <filename>class_i_i_t_eff_calculator.html</filename>
    <base virtualness="virtual">IAlgTool</base>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>accept</name>
      <anchor>a0</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const InterfaceID &amp;</type>
      <name>interfaceID</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IITSignalToNoiseTool</name>
    <filename>class_i_i_t_signal_to_noise_tool.html</filename>
    <base virtualness="virtual">IAlgTool</base>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>signalToNoise</name>
      <anchor>a0</anchor>
      <arglist>(const ITCluster *aCluster)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>signalToNoise</name>
      <anchor>a1</anchor>
      <arglist>(const SmartRefVector&lt; ITDigit &gt; &amp;digitCont)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>significance</name>
      <anchor>a2</anchor>
      <arglist>(const ITCluster *aCluster)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>significance</name>
      <anchor>a3</anchor>
      <arglist>(const SmartRefVector&lt; ITDigit &gt; &amp;digitCont)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>signalToNoise</name>
      <anchor>a4</anchor>
      <arglist>(const ITDigit *aDigit)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>noiseInADC</name>
      <anchor>a5</anchor>
      <arglist>(const ITChannelID &amp;aChan)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>noiseInElectrons</name>
      <anchor>a6</anchor>
      <arglist>(const ITChannelID &amp;aChan)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>convertToADC</name>
      <anchor>a7</anchor>
      <arglist>(const double aCharge, const ITChannelID &amp;aChan)=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const InterfaceID &amp;</type>
      <name>interfaceID</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMuonIDDLLTool</name>
    <filename>class_i_muon_i_d_d_l_l_tool.html</filename>
    <base virtualness="virtual">IAlgTool</base>
    <member kind="function" virtualness="pure">
      <type>virtual StatusCode</type>
      <name>calcMuonDLL</name>
      <anchor>a0</anchor>
      <arglist>(const MuonID *, double &amp;)=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const InterfaceID &amp;</type>
      <name>interfaceID</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IRichCherenkovAngle</name>
    <filename>class_i_rich_cherenkov_angle.html</filename>
    <base virtualness="virtual">IAlgTool</base>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>avgCherenkovTheta</name>
      <anchor>a0</anchor>
      <arglist>(RichRecSegment *segment, const Rich::ParticleIDType id) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>avgCherenkovTheta</name>
      <anchor>a1</anchor>
      <arglist>(RichRecSegment *segment) const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const InterfaceID &amp;</type>
      <name>interfaceID</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IRichCherenkovResolution</name>
    <filename>class_i_rich_cherenkov_resolution.html</filename>
    <base virtualness="virtual">IAlgTool</base>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>ckThetaResolution</name>
      <anchor>a0</anchor>
      <arglist>(RichRecSegment *segment, const Rich::ParticleIDType id=Rich::Pion) const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const InterfaceID &amp;</type>
      <name>interfaceID</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IRichExpectedTrackSignal</name>
    <filename>class_i_rich_expected_track_signal.html</filename>
    <base virtualness="virtual">IAlgTool</base>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>nSignalPhotons</name>
      <anchor>a0</anchor>
      <arglist>(RichRecTrack *track, const Rich::ParticleIDType id) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>nSignalPhotons</name>
      <anchor>a1</anchor>
      <arglist>(RichRecSegment *segment, const Rich::ParticleIDType id) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>nObservableSignalPhotons</name>
      <anchor>a2</anchor>
      <arglist>(RichRecTrack *track, const Rich::ParticleIDType id) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>nObservableSignalPhotons</name>
      <anchor>a3</anchor>
      <arglist>(RichRecSegment *segment, const Rich::ParticleIDType id) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>nScatteredPhotons</name>
      <anchor>a4</anchor>
      <arglist>(RichRecTrack *track, const Rich::ParticleIDType id) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>nScatteredPhotons</name>
      <anchor>a5</anchor>
      <arglist>(RichRecSegment *segment, const Rich::ParticleIDType id) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>nObservableScatteredPhotons</name>
      <anchor>a6</anchor>
      <arglist>(RichRecTrack *track, const Rich::ParticleIDType id) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>nObservableScatteredPhotons</name>
      <anchor>a7</anchor>
      <arglist>(RichRecSegment *segment, const Rich::ParticleIDType id) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>nTotalObservablePhotons</name>
      <anchor>a8</anchor>
      <arglist>(RichRecTrack *track, const Rich::ParticleIDType id) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>nTotalObservablePhotons</name>
      <anchor>a9</anchor>
      <arglist>(RichRecSegment *segment, const Rich::ParticleIDType id) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>nEmittedPhotons</name>
      <anchor>a10</anchor>
      <arglist>(RichRecTrack *track, const Rich::ParticleIDType id) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>nEmittedPhotons</name>
      <anchor>a11</anchor>
      <arglist>(RichRecSegment *segment, const Rich::ParticleIDType id) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>nDetectablePhotons</name>
      <anchor>a12</anchor>
      <arglist>(RichRecTrack *track, const Rich::ParticleIDType id) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>nDetectablePhotons</name>
      <anchor>a13</anchor>
      <arglist>(RichRecSegment *segment, const Rich::ParticleIDType id) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>avgSignalPhotEnergy</name>
      <anchor>a14</anchor>
      <arglist>(RichRecSegment *segment, const Rich::ParticleIDType id) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>avgEmitPhotEnergy</name>
      <anchor>a15</anchor>
      <arglist>(RichRecSegment *segment, const Rich::ParticleIDType id) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>hasRichInfo</name>
      <anchor>a16</anchor>
      <arglist>(RichRecTrack *track) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>hasRichInfo</name>
      <anchor>a17</anchor>
      <arglist>(RichRecSegment *segment) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>aboveThreshold</name>
      <anchor>a18</anchor>
      <arglist>(RichRecTrack *track, const Rich::ParticleIDType type) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>aboveThreshold</name>
      <anchor>a19</anchor>
      <arglist>(RichRecTrack *track, const Rich::ParticleIDType type, const Rich::RadiatorType radiator) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>aboveThreshold</name>
      <anchor>a20</anchor>
      <arglist>(RichRecSegment *segment, const Rich::ParticleIDType type) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setThresholdInfo</name>
      <anchor>a21</anchor>
      <arglist>(RichRecSegment *segment, RichPID *pid) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setThresholdInfo</name>
      <anchor>a22</anchor>
      <arglist>(RichRecTrack *track, RichPID *pid) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>activeInRadiator</name>
      <anchor>a23</anchor>
      <arglist>(RichRecTrack *track, const Rich::RadiatorType rad, const Rich::ParticleIDType id=Rich::Electron) const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const InterfaceID &amp;</type>
      <name>interfaceID</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IRichGasQuartzWindowAbs</name>
    <filename>class_i_rich_gas_quartz_window_abs.html</filename>
    <base virtualness="virtual">IAlgTool</base>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>photonTransProb</name>
      <anchor>a0</anchor>
      <arglist>(const RichRecSegment *segment, const double energy) const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const InterfaceID &amp;</type>
      <name>interfaceID</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IRichGeomEff</name>
    <filename>class_i_rich_geom_eff.html</filename>
    <base virtualness="virtual">IAlgTool</base>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>geomEfficiency</name>
      <anchor>a0</anchor>
      <arglist>(RichRecSegment *segment, const Rich::ParticleIDType id) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>geomEfficiencyScat</name>
      <anchor>a1</anchor>
      <arglist>(RichRecSegment *segment, const Rich::ParticleIDType id) const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const InterfaceID &amp;</type>
      <name>interfaceID</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IRichLocalPIDTool</name>
    <filename>class_i_rich_local_p_i_d_tool.html</filename>
    <base virtualness="virtual">IAlgTool</base>
    <member kind="function" virtualness="pure">
      <type>virtual RichLocalPID *</type>
      <name>particleID</name>
      <anchor>a0</anchor>
      <arglist>(RichRecTrack *track) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual RichLocalPIDs *</type>
      <name>localPIDs</name>
      <anchor>a1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const InterfaceID &amp;</type>
      <name>interfaceID</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IRichMassHypothesisRingCreator</name>
    <filename>class_i_rich_mass_hypothesis_ring_creator.html</filename>
    <base virtualness="virtual">IAlgTool</base>
    <member kind="function" virtualness="pure">
      <type>virtual RichRecRing *</type>
      <name>newMassHypoRing</name>
      <anchor>a0</anchor>
      <arglist>(RichRecSegment *segment, const Rich::ParticleIDType id) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual RichRecRing *</type>
      <name>newMassHypoRing</name>
      <anchor>a1</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>saveMassHypoRing</name>
      <anchor>a2</anchor>
      <arglist>(RichRecRing *ring) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>newMassHypoRings</name>
      <anchor>a3</anchor>
      <arglist>(RichRecSegment *segment) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual RichRecRings *</type>
      <name>massHypoRings</name>
      <anchor>a4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const InterfaceID &amp;</type>
      <name>interfaceID</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IRichParticleProperties</name>
    <filename>class_i_rich_particle_properties.html</filename>
    <base virtualness="virtual">IAlgTool</base>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>beta</name>
      <anchor>a0</anchor>
      <arglist>(RichRecSegment *segment, const Rich::ParticleIDType id) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>mass</name>
      <anchor>a1</anchor>
      <arglist>(const Rich::ParticleIDType id) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>massSq</name>
      <anchor>a2</anchor>
      <arglist>(const Rich::ParticleIDType id) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>thresholdMomentum</name>
      <anchor>a3</anchor>
      <arglist>(const Rich::ParticleIDType id, const Rich::RadiatorType rad) const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const InterfaceID &amp;</type>
      <name>interfaceID</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IRichPhotonCreator</name>
    <filename>class_i_rich_photon_creator.html</filename>
    <base virtualness="virtual">IAlgTool</base>
    <member kind="function" virtualness="pure">
      <type>virtual RichRecPhotons *</type>
      <name>richPhotons</name>
      <anchor>a0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual RichRecPhoton *</type>
      <name>reconstructPhoton</name>
      <anchor>a1</anchor>
      <arglist>(RichRecSegment *segment, RichRecPixel *pixel) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual RichRecTrack::Photons</type>
      <name>reconstructPhotons</name>
      <anchor>a2</anchor>
      <arglist>(RichRecTrack *track, RichRecPixel *pixel) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const RichRecTrack::Photons &amp;</type>
      <name>reconstructPhotons</name>
      <anchor>a3</anchor>
      <arglist>(RichRecTrack *track) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const RichRecPixel::Photons &amp;</type>
      <name>reconstructPhotons</name>
      <anchor>a4</anchor>
      <arglist>(RichRecPixel *pixel) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const RichRecSegment::Photons &amp;</type>
      <name>reconstructPhotons</name>
      <anchor>a5</anchor>
      <arglist>(RichRecSegment *segment) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reconstructPhotons</name>
      <anchor>a6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const InterfaceID &amp;</type>
      <name>interfaceID</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IRichPhotonPredictor</name>
    <filename>class_i_rich_photon_predictor.html</filename>
    <base virtualness="virtual">IAlgTool</base>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>photonPossible</name>
      <anchor>a0</anchor>
      <arglist>(RichRecSegment *segment, RichRecPixel *pixel) const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const InterfaceID &amp;</type>
      <name>interfaceID</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IRichPhotonSignal</name>
    <filename>class_i_rich_photon_signal.html</filename>
    <base virtualness="virtual">IAlgTool</base>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>predictedPixelSignal</name>
      <anchor>a0</anchor>
      <arglist>(RichRecPhoton *photon, const Rich::ParticleIDType id) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>signalProb</name>
      <anchor>a1</anchor>
      <arglist>(RichRecPhoton *photon, const Rich::ParticleIDType id) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>scatterProb</name>
      <anchor>a2</anchor>
      <arglist>(RichRecPhoton *photon, const Rich::ParticleIDType id) const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const InterfaceID &amp;</type>
      <name>interfaceID</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IRichPixelCreator</name>
    <filename>class_i_rich_pixel_creator.html</filename>
    <base virtualness="virtual">IAlgTool</base>
    <member kind="function" virtualness="pure">
      <type>virtual RichRecPixel *</type>
      <name>newPixel</name>
      <anchor>a0</anchor>
      <arglist>(const ContainedObject *obj) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual StatusCode</type>
      <name>newPixels</name>
      <anchor>a1</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual RichRecPixels *</type>
      <name>richPixels</name>
      <anchor>a2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const InterfaceID &amp;</type>
      <name>interfaceID</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IRichRayleighScatter</name>
    <filename>class_i_rich_rayleigh_scatter.html</filename>
    <base virtualness="virtual">IAlgTool</base>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>photonScatteredProb</name>
      <anchor>a0</anchor>
      <arglist>(const RichRecSegment *segment, const double energy) const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const InterfaceID &amp;</type>
      <name>interfaceID</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IRichRayTraceCherenkovCone</name>
    <filename>class_i_rich_ray_trace_cherenkov_cone.html</filename>
    <base virtualness="virtual">IAlgTool</base>
    <member kind="function" virtualness="pure">
      <type>virtual StatusCode</type>
      <name>rayTrace</name>
      <anchor>a0</anchor>
      <arglist>(RichRecSegment *segment, const Rich::ParticleIDType id, std::vector&lt; HepPoint3D &gt; &amp;points, const RichTraceMode mode=RichTraceMode()) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual StatusCode</type>
      <name>rayTrace</name>
      <anchor>a1</anchor>
      <arglist>(RichRecSegment *segment, const double ckTheta, std::vector&lt; HepPoint3D &gt; &amp;points, const RichTraceMode mode=RichTraceMode()) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual StatusCode</type>
      <name>rayTrace</name>
      <anchor>a2</anchor>
      <arglist>(const Rich::DetectorType rich, const HepPoint3D &amp;emissionPoint, const HepVector3D &amp;direction, const double ckTheta, std::vector&lt; HepPoint3D &gt; &amp;points, const RichTraceMode mode=RichTraceMode()) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const std::vector&lt; HepPoint3D &gt; &amp;</type>
      <name>rayTrace</name>
      <anchor>a3</anchor>
      <arglist>(RichRecRing *ring, const RichTraceMode mode=RichTraceMode()) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const std::vector&lt; HepPoint3D &gt; &amp;</type>
      <name>rayTraceLocal</name>
      <anchor>a4</anchor>
      <arglist>(RichRecRing *ring, const RichTraceMode mode=RichTraceMode()) const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const InterfaceID &amp;</type>
      <name>interfaceID</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IRichRecGeomTool</name>
    <filename>class_i_rich_rec_geom_tool.html</filename>
    <base virtualness="virtual">IAlgTool</base>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>trackPixelHitSep2Global</name>
      <anchor>a0</anchor>
      <arglist>(const RichRecSegment *segment, const RichRecPixel *pixel) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>trackPixelHitSep2Local</name>
      <anchor>a1</anchor>
      <arglist>(const RichRecSegment *segment, const RichRecPixel *pixel) const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const InterfaceID &amp;</type>
      <name>interfaceID</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IRichRecMCTruthTool</name>
    <filename>class_i_rich_rec_m_c_truth_tool.html</filename>
    <base virtualness="virtual">IAlgTool</base>
    <member kind="function" virtualness="pure">
      <type>virtual const MCParticle *</type>
      <name>mcParticle</name>
      <anchor>a0</anchor>
      <arglist>(const RichRecTrack *richTrack) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const MCParticle *</type>
      <name>mcParticle</name>
      <anchor>a1</anchor>
      <arglist>(const RichRecSegment *richSegment) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Rich::ParticleIDType</type>
      <name>mcParticleType</name>
      <anchor>a2</anchor>
      <arglist>(const RichRecTrack *richTrack) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Rich::ParticleIDType</type>
      <name>mcParticleType</name>
      <anchor>a3</anchor>
      <arglist>(const RichRecSegment *richSegment) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>mcParticle</name>
      <anchor>a4</anchor>
      <arglist>(const RichRecPixel *richPixel, std::vector&lt; const MCParticle * &gt; &amp;mcParts) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const MCRichDigit *</type>
      <name>mcRichDigit</name>
      <anchor>a5</anchor>
      <arglist>(const RichRecPixel *richPixel) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const SmartRefVector&lt; MCRichHit &gt; &amp;</type>
      <name>mcRichHits</name>
      <anchor>a6</anchor>
      <arglist>(const RichRecPixel *richPixel) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>mcRichOpticalPhoton</name>
      <anchor>a7</anchor>
      <arglist>(const RichRecPixel *richPixel, SmartRefVector&lt; MCRichOpticalPhoton &gt; &amp;phots) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const MCParticle *</type>
      <name>trueRecPhoton</name>
      <anchor>a8</anchor>
      <arglist>(const RichRecPhoton *photon) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const MCRichHit *</type>
      <name>trueCherenkovHit</name>
      <anchor>a9</anchor>
      <arglist>(const RichRecPhoton *photon) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const MCRichOpticalPhoton *</type>
      <name>trueOpticalPhoton</name>
      <anchor>a10</anchor>
      <arglist>(const RichRecPhoton *photon) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const MCRichOpticalPhoton *</type>
      <name>trueOpticalPhoton</name>
      <anchor>a11</anchor>
      <arglist>(const RichRecSegment *segment, const RichRecPixel *pixel) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const MCParticle *</type>
      <name>trueRecPhoton</name>
      <anchor>a12</anchor>
      <arglist>(const RichRecSegment *segment, const RichRecPixel *pixel) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const MCParticle *</type>
      <name>trueCherenkovPhoton</name>
      <anchor>a13</anchor>
      <arglist>(const RichRecPhoton *photon) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const MCParticle *</type>
      <name>trueCherenkovPhoton</name>
      <anchor>a14</anchor>
      <arglist>(const RichRecSegment *segment, const RichRecPixel *pixel) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const MCParticle *</type>
      <name>trueCherenkovRadiation</name>
      <anchor>a15</anchor>
      <arglist>(const RichRecPixel *pixel, const Rich::RadiatorType rad) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const MCRichSegment *</type>
      <name>mcRichSegment</name>
      <anchor>a16</anchor>
      <arglist>(const RichRecSegment *segment) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const MCRichTrack *</type>
      <name>mcRichTrack</name>
      <anchor>a17</anchor>
      <arglist>(const RichRecTrack *track) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const MCRichTrack *</type>
      <name>mcRichTrack</name>
      <anchor>a18</anchor>
      <arglist>(const RichRecSegment *segment) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const SmartRefVector&lt; MCRichSegment &gt; *</type>
      <name>mcRichSegments</name>
      <anchor>a19</anchor>
      <arglist>(const RichRecTrack *track) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isBackground</name>
      <anchor>a20</anchor>
      <arglist>(const RichRecPixel *pixel) const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const InterfaceID &amp;</type>
      <name>interfaceID</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IRichSegmentCreator</name>
    <filename>class_i_rich_segment_creator.html</filename>
    <base virtualness="virtual">IAlgTool</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>saveSegment</name>
      <anchor>a0</anchor>
      <arglist>(RichRecSegment *segment) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual RichRecSegment *</type>
      <name>newSegment</name>
      <anchor>a1</anchor>
      <arglist>(const RichTrackSegment &amp;segment, RichRecTrack *pTrk) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual RichRecSegments *</type>
      <name>richSegments</name>
      <anchor>a2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const InterfaceID &amp;</type>
      <name>interfaceID</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IRichSellmeirFunc</name>
    <filename>class_i_rich_sellmeir_func.html</filename>
    <base virtualness="virtual">IAlgTool</base>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>photonsInEnergyRange</name>
      <anchor>a0</anchor>
      <arglist>(RichRecSegment *segment, const Rich::ParticleIDType id, const double botEn, const double topEn) const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const InterfaceID &amp;</type>
      <name>interfaceID</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IRichSignalDetectionEff</name>
    <filename>class_i_rich_signal_detection_eff.html</filename>
    <base virtualness="virtual">IAlgTool</base>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>photonDetEfficiency</name>
      <anchor>a0</anchor>
      <arglist>(RichRecSegment *segment, const double energy) const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const InterfaceID &amp;</type>
      <name>interfaceID</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IRichStatusCreator</name>
    <filename>class_i_rich_status_creator.html</filename>
    <base virtualness="virtual">IAlgTool</base>
    <member kind="function" virtualness="pure">
      <type>virtual RichRecStatus *</type>
      <name>richStatus</name>
      <anchor>a0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const InterfaceID &amp;</type>
      <name>interfaceID</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IRichTrackCreator</name>
    <filename>class_i_rich_track_creator.html</filename>
    <base virtualness="virtual">IAlgTool</base>
    <member kind="function" virtualness="pure">
      <type>virtual RichRecTrack *</type>
      <name>newTrack</name>
      <anchor>a0</anchor>
      <arglist>(const ContainedObject *obj) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const StatusCode</type>
      <name>newTracks</name>
      <anchor>a1</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual RichRecTracks *</type>
      <name>richTracks</name>
      <anchor>a2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const long</type>
      <name>nInputTracks</name>
      <anchor>a3</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const InterfaceID &amp;</type>
      <name>interfaceID</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ITAmplifierResponse</name>
    <filename>class_i_t_amplifier_response.html</filename>
    <base>GaudiTool</base>
    <base virtualness="virtual">IITAmplifierResponse</base>
    <member kind="function">
      <type></type>
      <name>ITAmplifierResponse</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ITAmplifierResponse</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>response</name>
      <anchor>a3</anchor>
      <arglist>(const double time) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ITChargeSharingTool</name>
    <filename>class_i_t_charge_sharing_tool.html</filename>
    <base>GaudiTool</base>
    <base virtualness="virtual">IITChargeSharingTool</base>
    <member kind="function">
      <type></type>
      <name>ITChargeSharingTool</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ITChargeSharingTool</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sharing</name>
      <anchor>a3</anchor>
      <arglist>(const double relDist) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ITClusterChecker</name>
    <filename>class_i_t_cluster_checker.html</filename>
    <base>GaudiHistoAlg</base>
    <member kind="function">
      <type></type>
      <name>ITClusterChecker</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *svcloc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ITClusterChecker</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ITClusterCreator</name>
    <filename>class_i_t_cluster_creator.html</filename>
    <base>GaudiAlgorithm</base>
    <member kind="function">
      <type></type>
      <name>ITClusterCreator</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ITClusterCreator</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ITClusterErrorEstimator</name>
    <filename>class_i_t_cluster_error_estimator.html</filename>
    <base>GaudiTool</base>
    <base virtualness="virtual">IITClusterErrorEstimator</base>
    <member kind="function">
      <type></type>
      <name>ITClusterErrorEstimator</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ITClusterErrorEstimator</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>error</name>
      <anchor>a2</anchor>
      <arglist>(const unsigned int nStrips) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ITClusterOnTrack</name>
    <filename>class_i_t_cluster_on_track.html</filename>
    <base>TrMeasurement</base>
    <member kind="function">
      <type></type>
      <name>ITClusterOnTrack</name>
      <anchor>a0</anchor>
      <arglist>(ITCluster *itCluster, DeSTDetector *geom)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ITClusterOnTrack</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ITClusterOnTrack</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>fillStream</name>
      <anchor>a3</anchor>
      <arglist>(std::ostream &amp;s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TrMeasurement *</type>
      <name>clone</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>lastChiSqContr</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TrMeasurement::EMeasType</type>
      <name>measType</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>z</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>measure</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>measureError</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>measureError</name>
      <anchor>a10</anchor>
      <arglist>(const TrStateL *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>measureError</name>
      <anchor>a11</anchor>
      <arglist>(const TrStateP *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>projection</name>
      <anchor>a12</anchor>
      <arglist>(const TrStateL *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual HepVector</type>
      <name>projectionMatrix</name>
      <anchor>a13</anchor>
      <arglist>(const TrStateL *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>projection</name>
      <anchor>a14</anchor>
      <arglist>(const TrStateP *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual HepVector</type>
      <name>projectionMatrix</name>
      <anchor>a15</anchor>
      <arglist>(const TrStateP *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equal</name>
      <anchor>a16</anchor>
      <arglist>(const ITClusterOnTrack *hit) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equal</name>
      <anchor>a17</anchor>
      <arglist>(const TrMeasurement *meas) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>stereoAngle</name>
      <anchor>a18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>residual</name>
      <anchor>a19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setResidual</name>
      <anchor>a20</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>errorResidual</name>
      <anchor>a21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setErrorResidual</name>
      <anchor>a22</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>const ITCluster *</type>
      <name>cluster</name>
      <anchor>a23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ITCluster *</type>
      <name>cluster</name>
      <anchor>a24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCluster</name>
      <anchor>a25</anchor>
      <arglist>(ITCluster *value)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>n0</anchor>
      <arglist>(std::ostream &amp;str, const ITClusterOnTrack &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ITClusterResolution</name>
    <filename>class_i_t_cluster_resolution.html</filename>
    <base>GaudiHistoAlg</base>
    <member kind="function">
      <type></type>
      <name>ITClusterResolution</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *svcloc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ITClusterResolution</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ITClusterSmearer</name>
    <filename>class_i_t_cluster_smearer.html</filename>
    <base>GaudiAlgorithm</base>
    <member kind="function">
      <type></type>
      <name>ITClusterSmearer</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ITClusterSmearer</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ITCrossTalk</name>
    <filename>class_i_t_cross_talk.html</filename>
    <base>GaudiTool</base>
    <base virtualness="virtual">IITCrossTalk</base>
    <member kind="typedef">
      <type>std::pair&lt; double, ITChannelID &gt;</type>
      <name>digitPair</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ITCrossTalk</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ITCrossTalk</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>add</name>
      <anchor>a3</anchor>
      <arglist>(ITDigits *digits)</arglist>
    </member>
    <class kind="class">ITCrossTalk::Less_by_Channel</class>
  </compound>
  <compound kind="class">
    <name>ITDepositedCharge</name>
    <filename>class_i_t_deposited_charge.html</filename>
    <base>GaudiTool</base>
    <base virtualness="virtual">IITDepositedCharge</base>
    <member kind="function">
      <type></type>
      <name>ITDepositedCharge</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ITDepositedCharge</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>charge</name>
      <anchor>a3</anchor>
      <arglist>(const MCHit *aHit) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ITDigitChecker</name>
    <filename>class_i_t_digit_checker.html</filename>
    <base>GaudiHistoAlg</base>
    <member kind="function">
      <type></type>
      <name>ITDigitChecker</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *svcloc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ITDigitChecker</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ITDigitConsistencyMonitor</name>
    <filename>class_i_t_digit_consistency_monitor.html</filename>
    <base>GaudiAlgorithm</base>
    <member kind="function">
      <type></type>
      <name>ITDigitConsistencyMonitor</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *svcloc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ITDigitConsistencyMonitor</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ITDigitCreator</name>
    <filename>class_i_t_digit_creator.html</filename>
    <base>GaudiAlgorithm</base>
    <member kind="function">
      <type></type>
      <name>ITDigitCreator</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ITDigitCreator</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <class kind="class">ITDigitCreator::Less_by_Channel</class>
  </compound>
  <compound kind="class">
    <name>ITDigitInPool</name>
    <filename>class_i_t_digit_in_pool.html</filename>
    <member kind="function">
      <type></type>
      <name>ITDigitInPool</name>
      <anchor>a0</anchor>
      <arglist>(ITDigit *aDigit, bool used=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ITDigitInPool</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ITDigit *</type>
      <name>digit</name>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ITChannelID</type>
      <name>channelID</name>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>used</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUsed</name>
      <anchor>a5</anchor>
      <arglist>(bool value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ITDumpGeom</name>
    <filename>class_i_t_dump_geom.html</filename>
    <base>GaudiAlgorithm</base>
    <member kind="function">
      <type></type>
      <name>ITDumpGeom</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *svcloc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ITDumpGeom</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ITEffCalculator</name>
    <filename>class_i_t_eff_calculator.html</filename>
    <base>GaudiTool</base>
    <base virtualness="virtual">IITEffCalculator</base>
    <member kind="function">
      <type></type>
      <name>ITEffCalculator</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ITEffCalculator</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>accept</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ITEffMonitor</name>
    <filename>class_i_t_eff_monitor.html</filename>
    <base>GaudiHistoAlg</base>
    <member kind="typedef">
      <type>IAssociator&lt; MCParticle, MCHit &gt;</type>
      <name>MCHitAsct</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ITEffMonitor</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *svcloc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ITEffMonitor</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>finalize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ITGeantDepositedCharge</name>
    <filename>class_i_t_geant_deposited_charge.html</filename>
    <base>GaudiTool</base>
    <base virtualness="virtual">IITDepositedCharge</base>
    <member kind="function">
      <type></type>
      <name>ITGeantDepositedCharge</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ITGeantDepositedCharge</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>charge</name>
      <anchor>a2</anchor>
      <arglist>(const MCHit *aHit) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ITInitialization</name>
    <filename>class_i_t_initialization.html</filename>
    <base>Algorithm</base>
    <member kind="function">
      <type></type>
      <name>ITInitialization</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *svcloc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ITInitialization</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ITMCTuner</name>
    <filename>class_i_t_m_c_tuner.html</filename>
    <base>GaudiHistoAlg</base>
    <member kind="function">
      <type></type>
      <name>ITMCTuner</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *svcloc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ITMCTuner</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ITNoiseClusterMonitor</name>
    <filename>class_i_t_noise_cluster_monitor.html</filename>
    <base>GaudiHistoAlg</base>
    <member kind="function">
      <type></type>
      <name>ITNoiseClusterMonitor</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *svcloc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ITNoiseClusterMonitor</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ITOccupancy</name>
    <filename>class_i_t_occupancy.html</filename>
    <base>GaudiHistoAlg</base>
    <member kind="function">
      <type></type>
      <name>ITOccupancy</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *svcloc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ITOccupancy</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ITrackSelector</name>
    <filename>class_i_track_selector.html</filename>
    <base virtualness="virtual">IAlgTool</base>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>select</name>
      <anchor>a0</anchor>
      <arglist>(TrFitTrack *track) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>selectTrackType</name>
      <anchor>a1</anchor>
      <arglist>(TrFitTrack *track) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>select</name>
      <anchor>a2</anchor>
      <arglist>(MCParticle *mcParticle)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>selectTrackType</name>
      <anchor>a3</anchor>
      <arglist>(MCParticle *mcParticle)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getTrackType</name>
      <anchor>a4</anchor>
      <arglist>(TrFitTrack *track) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getTrackType</name>
      <anchor>a5</anchor>
      <arglist>(MCParticle *mcPart)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual StatusCode</type>
      <name>setTrackType</name>
      <anchor>a6</anchor>
      <arglist>(const int tracktype, TrFitTrack *&amp;track) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual StatusCode</type>
      <name>setTrackType</name>
      <anchor>a7</anchor>
      <arglist>(MCParticle *mcPart, TrFitTrack *&amp;track)=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const InterfaceID &amp;</type>
      <name>interfaceID</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ITrChi2Calculator</name>
    <filename>class_i_tr_chi2_calculator.html</filename>
    <base virtualness="virtual">IAlgTool</base>
    <member kind="function" virtualness="pure">
      <type>virtual StatusCode</type>
      <name>calculateChi2</name>
      <anchor>a0</anchor>
      <arglist>(const HepVector &amp;trackVector1, const HepSymMatrix &amp;trackCov1, const HepVector &amp;trackVector2, const HepSymMatrix &amp;trackCov2, double &amp;chi2) const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const InterfaceID &amp;</type>
      <name>interfaceID</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ITrFilter</name>
    <filename>class_i_tr_filter.html</filename>
    <base virtualness="virtual">IAlgTool</base>
    <member kind="function" virtualness="pure">
      <type>virtual StatusCode</type>
      <name>filter</name>
      <anchor>a0</anchor>
      <arglist>(TrState *state, TrMeasurement *measure)=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const InterfaceID &amp;</type>
      <name>interfaceID</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ITrFitter</name>
    <filename>class_i_tr_fitter.html</filename>
    <base virtualness="virtual">IAlgTool</base>
    <member kind="function" virtualness="pure">
      <type>virtual StatusCode</type>
      <name>fitDownstream</name>
      <anchor>a0</anchor>
      <arglist>(TrTrack *track, TrTrack::const_measure_iterator firstM, TrTrack::const_measure_iterator lastM)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual StatusCode</type>
      <name>fitUpstream</name>
      <anchor>a1</anchor>
      <arglist>(TrTrack *track, TrTrack::const_reverse_measure_iterator firstM, TrTrack::const_reverse_measure_iterator lastM)=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const InterfaceID &amp;</type>
      <name>interfaceID</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ITrOutlierKiller</name>
    <filename>class_i_tr_outlier_killer.html</filename>
    <base virtualness="virtual">IAlgTool</base>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>killOutliers</name>
      <anchor>a0</anchor>
      <arglist>(TrFitTrack *track) const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const InterfaceID &amp;</type>
      <name>interfaceID</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ITrPtKick</name>
    <filename>class_i_tr_pt_kick.html</filename>
    <base virtualness="virtual">IAlgTool</base>
    <member kind="function" virtualness="pure">
      <type>virtual StatusCode</type>
      <name>calculate</name>
      <anchor>a0</anchor>
      <arglist>(TrStateP *pState) const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const InterfaceID &amp;</type>
      <name>interfaceID</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ITrSmoother</name>
    <filename>class_i_tr_smoother.html</filename>
    <base virtualness="virtual">IAlgTool</base>
    <member kind="function" virtualness="pure">
      <type>virtual StatusCode</type>
      <name>smooth</name>
      <anchor>a0</anchor>
      <arglist>(TrNode *thisNode, TrNode *prevNode)=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const InterfaceID &amp;</type>
      <name>interfaceID</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ITrStateCreator</name>
    <filename>class_i_tr_state_creator.html</filename>
    <base virtualness="virtual">IAlgTool</base>
    <member kind="function" virtualness="pure">
      <type>virtual StatusCode</type>
      <name>createState</name>
      <anchor>a0</anchor>
      <arglist>(const MCParticle *mcPart, double zrec, TrState *&amp;pState) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual StatusCode</type>
      <name>createStateVertex</name>
      <anchor>a1</anchor>
      <arglist>(const MCParticle *mcPart, TrState *&amp;pState) const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const InterfaceID &amp;</type>
      <name>interfaceID</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ITSignalToNoiseTool</name>
    <filename>class_i_t_signal_to_noise_tool.html</filename>
    <base>GaudiTool</base>
    <base virtualness="virtual">IITSignalToNoiseTool</base>
    <member kind="function">
      <type></type>
      <name>ITSignalToNoiseTool</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ITSignalToNoiseTool</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>signalToNoise</name>
      <anchor>a3</anchor>
      <arglist>(const ITCluster *aCluster)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>signalToNoise</name>
      <anchor>a4</anchor>
      <arglist>(const SmartRefVector&lt; ITDigit &gt; &amp;digitCont)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>significance</name>
      <anchor>a5</anchor>
      <arglist>(const ITCluster *aCluster)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>significance</name>
      <anchor>a6</anchor>
      <arglist>(const SmartRefVector&lt; ITDigit &gt; &amp;digitCont)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>signalToNoise</name>
      <anchor>a7</anchor>
      <arglist>(const ITDigit *aDigit)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>noiseInADC</name>
      <anchor>a8</anchor>
      <arglist>(const ITChannelID &amp;aChan)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>noiseInElectrons</name>
      <anchor>a9</anchor>
      <arglist>(const ITChannelID &amp;aChan)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>convertToADC</name>
      <anchor>a10</anchor>
      <arglist>(const double aCharge, const ITChannelID &amp;aChan)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ITSummaryCreator</name>
    <filename>class_i_t_summary_creator.html</filename>
    <base>GaudiAlgorithm</base>
    <member kind="function">
      <type></type>
      <name>ITSummaryCreator</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ITSummaryCreator</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ITTruthFromDigit</name>
    <filename>class_i_t_truth_from_digit.html</filename>
    <base>Algorithm</base>
    <member kind="typedef">
      <type>ITDigit2MCHitAsct::IAsct</type>
      <name>ITDigAsct</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ITTruthFromDigit</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ITTruthFromDigit</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ITWeightedMean</name>
    <filename>class_i_t_weighted_mean.html</filename>
    <base>GaudiTool</base>
    <base virtualness="virtual">IITBaryCentreEstimator</base>
    <member kind="function">
      <type></type>
      <name>ITWeightedMean</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ITWeightedMean</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>meanStrip</name>
      <anchor>a2</anchor>
      <arglist>(const SmartRefVector&lt; ITDigit &gt; &amp;digits) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>k_tracking_digit</name>
    <filename>structk__tracking__digit.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>det</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>sta</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>lay</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>mod</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>cel</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>xc</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>yc</name>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>zc</name>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>yw</name>
      <anchor>o8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>sa</name>
      <anchor>o9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>sint</name>
      <anchor>o10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>cost</name>
      <anchor>o11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>ucel</name>
      <anchor>o12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>udist</name>
      <anchor>o13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>u</name>
      <anchor>o14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>uerr</name>
      <anchor>o15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ITCluster *</type>
      <name>pitclu</name>
      <anchor>o16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ITCluster *</type>
      <name>pitclu</name>
      <anchor>o17</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KsFitParameters</name>
    <filename>class_ks_fit_parameters.html</filename>
    <member kind="function">
      <type></type>
      <name>KsFitParameters</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~KsFitParameters</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchor>a2</anchor>
      <arglist>(std::string title, std::vector&lt; double &gt; param)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addEvent</name>
      <anchor>a3</anchor>
      <arglist>(double delta)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateParameters</name>
      <anchor>a4</anchor>
      <arglist>(MsgStream &amp;log)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printParams</name>
      <anchor>a5</anchor>
      <arglist>(std::string prefix)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>param</name>
      <anchor>a6</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFun</name>
      <anchor>a7</anchor>
      <arglist>(int i, double value)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sum</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KsHit</name>
    <filename>class_ks_hit.html</filename>
    <member kind="function">
      <type></type>
      <name>KsHit</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KsHit</name>
      <anchor>a1</anchor>
      <arglist>(int type, double z, double measure, double error, double angle)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~KsHit</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setITRef</name>
      <anchor>a3</anchor>
      <arglist>(ITCluster *ITRef)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPlaneCode</name>
      <anchor>a4</anchor>
      <arglist>(int planeCode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUsed</name>
      <anchor>a5</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setYMinMax</name>
      <anchor>a6</anchor>
      <arglist>(double yMin, double yMax)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSlopeX</name>
      <anchor>a7</anchor>
      <arglist>(double slX)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>type</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>z</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>measure</name>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ITCluster *</type>
      <name>ITRef</name>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cosT</name>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sinT</name>
      <anchor>a13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weight</name>
      <anchor>a14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>planeCode</name>
      <anchor>a15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yMin</name>
      <anchor>a16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yMax</name>
      <anchor>a17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUsed</name>
      <anchor>a18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>slopeX</name>
      <anchor>a19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCompatible</name>
      <anchor>a20</anchor>
      <arglist>(double y, double yTol)</arglist>
    </member>
    <class kind="class">KsHit::increasingByOrdinate</class>
    <class kind="class">KsHit::increasingByZ</class>
  </compound>
  <compound kind="class">
    <name>KsHit::increasingByOrdinate</name>
    <filename>class_ks_hit_1_1increasing_by_ordinate.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a0</anchor>
      <arglist>(const KsHit *firstHit, const KsHit *secondHit) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KsHit::increasingByZ</name>
    <filename>class_ks_hit_1_1increasing_by_z.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a0</anchor>
      <arglist>(const KsHit *firstHit, const KsHit *secondHit) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KShortMonitor</name>
    <filename>class_k_short_monitor.html</filename>
    <base>Algorithm</base>
    <member kind="typedef">
      <type>IAssociatorWeighted&lt; TrFitTrack, MCParticle, double &gt;</type>
      <name>TrAsct</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KShortMonitor</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~KShortMonitor</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printDecayHistory</name>
      <anchor>b0</anchor>
      <arglist>(MsgStream &amp;msg, MCParticle *part)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>trackType</name>
      <anchor>b1</anchor>
      <arglist>(int history)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isKChild</name>
      <anchor>b2</anchor>
      <arglist>(MCParticle *part)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KsPlane</name>
    <filename>class_ks_plane.html</filename>
    <member kind="function">
      <type></type>
      <name>KsPlane</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KsPlane</name>
      <anchor>a1</anchor>
      <arglist>(int sta, int lay, int typ, double z, double teta)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~KsPlane</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adjustYMinMax</name>
      <anchor>a3</anchor>
      <arglist>(double yMin, double yMax)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCompatible</name>
      <anchor>a4</anchor>
      <arglist>(KsTrack *tr, double tol)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>teta</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cosT</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sinT</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>z</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yMin</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yMax</name>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isXPlane</name>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>station</name>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>layer</name>
      <anchor>a13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>type</name>
      <anchor>a14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KsHits &amp;</type>
      <name>hits</name>
      <anchor>a15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sortHits</name>
      <anchor>a16</anchor>
      <arglist>()</arglist>
    </member>
    <class kind="class">KsPlane::increasingByType</class>
  </compound>
  <compound kind="class">
    <name>KsPlane::increasingByType</name>
    <filename>class_ks_plane_1_1increasing_by_type.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a0</anchor>
      <arglist>(const KsPlane *firstLay, const KsPlane *secondLay) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KsTrack</name>
    <filename>class_ks_track.html</filename>
    <member kind="function">
      <type></type>
      <name>KsTrack</name>
      <anchor>a0</anchor>
      <arglist>(TrFitTrack *tr, std::vector&lt; double &gt; magnetParams, std::vector&lt; double &gt; momentumParams, double zXSeed, double zYSeed, double errZMag)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~KsTrack</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TrFitTrack *</type>
      <name>track</name>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TrStateP *</type>
      <name>state</name>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xMagnet</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yMagnet</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>zMagnet</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>slopeX</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>slopeY</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>moment</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>errXMag</name>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>errYTT1</name>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yAtZ</name>
      <anchor>a12</anchor>
      <arglist>(double z) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xAtZ</name>
      <anchor>a13</anchor>
      <arglist>(double z) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xAtZ</name>
      <anchor>a14</anchor>
      <arglist>(double z, double slopeX) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>tolSlopeX</name>
      <anchor>a15</anchor>
      <arglist>(KsHit *hit)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchor>a16</anchor>
      <arglist>(KsHit *hit)</arglist>
    </member>
    <member kind="function">
      <type>KsHits &amp;</type>
      <name>xHits</name>
      <anchor>a17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KsHits &amp;</type>
      <name>uvHits</name>
      <anchor>a18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KsHits &amp;</type>
      <name>hits</name>
      <anchor>a19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startNewCandidate</name>
      <anchor>a20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBestY</name>
      <anchor>a21</anchor>
      <arglist>(double bestY)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>bestY</name>
      <anchor>a22</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>chisq</name>
      <anchor>a23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findMatchingHits</name>
      <anchor>a24</anchor>
      <arglist>(int plane, double tolLocal, double tol, double slopeX)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fitAndRemove</name>
      <anchor>a25</anchor>
      <arglist>(double tol, MsgStream &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addUVHits</name>
      <anchor>a26</anchor>
      <arglist>(double tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sortHits</name>
      <anchor>a27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sortFinalHits</name>
      <anchor>a28</anchor>
      <arglist>()</arglist>
    </member>
    <class kind="class">KsTrack::decreasingByPt</class>
  </compound>
  <compound kind="class">
    <name>KsTrack::decreasingByPt</name>
    <filename>class_ks_track_1_1decreasing_by_pt.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a0</anchor>
      <arglist>(const TrFitTrack *first, const TrFitTrack *second) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>L1InitEvent</name>
    <filename>class_l1_init_event.html</filename>
    <base>GaudiAlgorithm</base>
    <member kind="function">
      <type></type>
      <name>L1InitEvent</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~L1InitEvent</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LandauTest</name>
    <filename>class_landau_test.html</filename>
    <base>GaudiHistoAlg</base>
    <member kind="function">
      <type></type>
      <name>LandauTest</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LandauTest</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LongTrack</name>
    <filename>class_long_track.html</filename>
    <base>ContainedObject</base>
    <member kind="function">
      <type></type>
      <name>LongTrack</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LongTrack</name>
      <anchor>a1</anchor>
      <arglist>(int trkNum, Hep3Vector origin, Hep3Vector slope, std::vector&lt; double &gt; params)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LongTrack</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNewSeed</name>
      <anchor>a3</anchor>
      <arglist>(double xSeed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSeed</name>
      <anchor>a4</anchor>
      <arglist>(double xSeed)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xAtReference</name>
      <anchor>a5</anchor>
      <arglist>(double xSeed, double zSeed)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fitAndUpdate</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fitXAndUpdate</name>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>khi2</name>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>worstKhi2</name>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>removeWorstAndRefit</name>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HepVector</type>
      <name>fittedTrack</name>
      <anchor>a11</anchor>
      <arglist>(double z)</arglist>
    </member>
    <member kind="function">
      <type>HepSymMatrix</type>
      <name>covarianceMatrix</name>
      <anchor>a12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>errSlope</name>
      <anchor>a13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>trkNum</name>
      <anchor>a14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector &amp;</type>
      <name>slope</name>
      <anchor>a15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector &amp;</type>
      <name>origin</name>
      <anchor>a16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dxSlope</name>
      <anchor>a17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dySlope</name>
      <anchor>a18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>zSeed</name>
      <anchor>a19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateOrigin</name>
      <anchor>a20</anchor>
      <arglist>(double dx, double dy, double dsl)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xAtZ</name>
      <anchor>a21</anchor>
      <arglist>(double Z)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xAtTT1</name>
      <anchor>a22</anchor>
      <arglist>(double Z)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cosAtZ</name>
      <anchor>a23</anchor>
      <arglist>(double Z)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>XSlopeAtZ</name>
      <anchor>a24</anchor>
      <arglist>(double Z)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>YSlopeAtZ</name>
      <anchor>a25</anchor>
      <arglist>(double Z)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cosTT1</name>
      <anchor>a26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yAtZ</name>
      <anchor>a27</anchor>
      <arglist>(double Z)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yAtTT1</name>
      <anchor>a28</anchor>
      <arglist>(double Z)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>momentum</name>
      <anchor>a29</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>bx</name>
      <anchor>a30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ay</name>
      <anchor>a31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>by</name>
      <anchor>a32</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cy</name>
      <anchor>a33</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceHit</name>
      <anchor>a34</anchor>
      <arglist>(LtHit *hit)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceWire</name>
      <anchor>a35</anchor>
      <arglist>(LtHit *hit)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>driftDistance</name>
      <anchor>a36</anchor>
      <arglist>(LtHit *hit)</arglist>
    </member>
    <member kind="function">
      <type>LtHit *</type>
      <name>findHit</name>
      <anchor>a37</anchor>
      <arglist>(LtHits &amp;hitList, double &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>storeHits</name>
      <anchor>a38</anchor>
      <arglist>(LtHits &amp;hitList, double &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHits</name>
      <anchor>a39</anchor>
      <arglist>(LtHits hits)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addHit</name>
      <anchor>a40</anchor>
      <arglist>(LtHit *aHit)</arglist>
    </member>
    <member kind="function">
      <type>LtHits &amp;</type>
      <name>hits</name>
      <anchor>a41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValid</name>
      <anchor>a42</anchor>
      <arglist>(int valid)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>valid</name>
      <anchor>a43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nbUsedPlanes</name>
      <anchor>a44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nbXPlanes</name>
      <anchor>a45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nbTT1Hits</name>
      <anchor>a46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const CLID &amp;</type>
      <name>clID</name>
      <anchor>a47</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StreamBuffer &amp;</type>
      <name>serialize</name>
      <anchor>a48</anchor>
      <arglist>(StreamBuffer &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StreamBuffer &amp;</type>
      <name>serialize</name>
      <anchor>a49</anchor>
      <arglist>(StreamBuffer &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>fillStream</name>
      <anchor>a50</anchor>
      <arglist>(std::ostream &amp;) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const CLID &amp;</type>
      <name>classID</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LtFitParams</name>
    <filename>class_lt_fit_params.html</filename>
    <base>Algorithm</base>
    <member kind="typedef">
      <type>IAssociatorWeighted&lt; TrFitTrack, MCParticle, double &gt;</type>
      <name>VeloTrAssociator</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LtFitParams</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LtFitParams</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>solveMatrix</name>
      <anchor>a5</anchor>
      <arglist>(double m[10][10], double d[10])</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LtHit</name>
    <filename>class_lt_hit.html</filename>
    <base>ContainedObject</base>
    <member kind="function">
      <type></type>
      <name>LtHit</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LtHit</name>
      <anchor>a1</anchor>
      <arglist>(int type, double z, double measure, double error, double angle)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LtHit</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>type</name>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>z</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>measure</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDriftTime</name>
      <anchor>a6</anchor>
      <arglist>(double drift)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>driftTime</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWireLength</name>
      <anchor>a8</anchor>
      <arglist>(double wireLength)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>wireLength</name>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOTRef</name>
      <anchor>a10</anchor>
      <arglist>(OTTime *OTRef)</arglist>
    </member>
    <member kind="function">
      <type>OTTime *</type>
      <name>OTRef</name>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setITRef</name>
      <anchor>a12</anchor>
      <arglist>(ITCluster *ITRef)</arglist>
    </member>
    <member kind="function">
      <type>ITCluster *</type>
      <name>ITRef</name>
      <anchor>a13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cosT</name>
      <anchor>a14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sinT</name>
      <anchor>a15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weight</name>
      <anchor>a16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPlaneCode</name>
      <anchor>a17</anchor>
      <arglist>(int planeCode)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>planeCode</name>
      <anchor>a18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setYMinMax</name>
      <anchor>a19</anchor>
      <arglist>(double yMin, double yMax)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yMin</name>
      <anchor>a20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yMax</name>
      <anchor>a21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUsed</name>
      <anchor>a22</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUsed</name>
      <anchor>a23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const CLID &amp;</type>
      <name>clID</name>
      <anchor>a24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StreamBuffer &amp;</type>
      <name>serialize</name>
      <anchor>a25</anchor>
      <arglist>(StreamBuffer &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StreamBuffer &amp;</type>
      <name>serialize</name>
      <anchor>a26</anchor>
      <arglist>(StreamBuffer &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>fillStream</name>
      <anchor>a27</anchor>
      <arglist>(std::ostream &amp;) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const CLID &amp;</type>
      <name>classID</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
    <class kind="class">LtHit::increasingByOrdinate</class>
  </compound>
  <compound kind="class">
    <name>LtHit::increasingByOrdinate</name>
    <filename>class_lt_hit_1_1increasing_by_ordinate.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a0</anchor>
      <arglist>(const LtHit *firstHit, const LtHit *secondHit) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LtParameters</name>
    <filename>class_lt_parameters.html</filename>
    <member kind="function">
      <type></type>
      <name>LtParameters</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LtParameters</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchor>a2</anchor>
      <arglist>(std::string title, std::vector&lt; double &gt; param)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addEvent</name>
      <anchor>a3</anchor>
      <arglist>(double delta)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateParameters</name>
      <anchor>a4</anchor>
      <arglist>(MsgStream &amp;log)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printParams</name>
      <anchor>a5</anchor>
      <arglist>(std::string prefix)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>param</name>
      <anchor>a6</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFun</name>
      <anchor>a7</anchor>
      <arglist>(int i, double value)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sum</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LtPlane</name>
    <filename>class_lt_plane.html</filename>
    <base>ContainedObject</base>
    <member kind="function">
      <type></type>
      <name>LtPlane</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LtPlane</name>
      <anchor>a1</anchor>
      <arglist>(int sta, int lay, int typ, double z, double teta)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LtPlane</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const CLID &amp;</type>
      <name>clID</name>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StreamBuffer &amp;</type>
      <name>serialize</name>
      <anchor>a4</anchor>
      <arglist>(StreamBuffer &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StreamBuffer &amp;</type>
      <name>serialize</name>
      <anchor>a5</anchor>
      <arglist>(StreamBuffer &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>fillStream</name>
      <anchor>a6</anchor>
      <arglist>(std::ostream &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adjustYMinMax</name>
      <anchor>a7</anchor>
      <arglist>(double yMin, double yMax)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOutside</name>
      <anchor>a8</anchor>
      <arglist>(LongTrack &amp;tr, double tol)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isYCompatible</name>
      <anchor>a9</anchor>
      <arglist>(LongTrack &amp;tr, double tol)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTT1Compatible</name>
      <anchor>a10</anchor>
      <arglist>(LongTrack *tr, double tol)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>teta</name>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cosT</name>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sinT</name>
      <anchor>a13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>z</name>
      <anchor>a14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yMin</name>
      <anchor>a15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yMax</name>
      <anchor>a16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isXPlane</name>
      <anchor>a17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>station</name>
      <anchor>a18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>layer</name>
      <anchor>a19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>type</name>
      <anchor>a20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>LtHits &amp;</type>
      <name>hits</name>
      <anchor>a21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sortHits</name>
      <anchor>a22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const CLID &amp;</type>
      <name>classID</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
    <class kind="class">LtPlane::increasingByType</class>
  </compound>
  <compound kind="class">
    <name>LtPlane::increasingByType</name>
    <filename>class_lt_plane_1_1increasing_by_type.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a0</anchor>
      <arglist>(const LtPlane *firstLay, const LtPlane *secondLay) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MCHitMonitor</name>
    <filename>class_m_c_hit_monitor.html</filename>
    <base>GaudiHistoAlg</base>
    <member kind="function">
      <type></type>
      <name>MCHitMonitor</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MCHitMonitor</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MCITDepositChecker</name>
    <filename>class_m_c_i_t_deposit_checker.html</filename>
    <base>GaudiHistoAlg</base>
    <member kind="function">
      <type></type>
      <name>MCITDepositChecker</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *svcloc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MCITDepositChecker</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MCITDepositCreator</name>
    <filename>class_m_c_i_t_deposit_creator.html</filename>
    <base>GaudiAlgorithm</base>
    <member kind="function">
      <type></type>
      <name>MCITDepositCreator</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MCITDepositCreator</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MCITDigitChecker</name>
    <filename>class_m_c_i_t_digit_checker.html</filename>
    <base>GaudiHistoAlg</base>
    <member kind="function">
      <type></type>
      <name>MCITDigitChecker</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *svcloc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MCITDigitChecker</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MCITDigitCreator</name>
    <filename>class_m_c_i_t_digit_creator.html</filename>
    <base>GaudiAlgorithm</base>
    <member kind="function">
      <type></type>
      <name>MCITDigitCreator</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MCITDigitCreator</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>execute</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MCOTDepositMonitor</name>
    <filename>class_m_c_o_t_deposit_monitor.html</filename>
    <base>OTMonitorAlgorithm</base>
    <member kind="function">
      <type></type>
      <name>MCOTDepositMonitor</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *svcloc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MCOTDepositMonitor</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MuonDSTPrepare</name>
    <filename>class_muon_d_s_t_prepare.html</filename>
    <base>Algorithm</base>
    <member kind="function">
      <type></type>
      <name>MuonDSTPrepare</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MuonDSTPrepare</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MuonIDDLLTool</name>
    <filename>class_muon_i_d_d_l_l_tool.html</filename>
    <base>AlgTool</base>
    <base virtualness="virtual">IMuonIDDLLTool</base>
    <member kind="function">
      <type></type>
      <name>MuonIDDLLTool</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MuonIDDLLTool</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>calcMuonDLL</name>
      <anchor>a3</anchor>
      <arglist>(const MuonID *muonid, double &amp;dll)</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>trackExtrapolate</name>
      <anchor>a4</anchor>
      <arglist>(const TrStoredTrack *pTrack)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTrackLocals</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_trackSlopeX</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>m_trackX</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>m_trackY</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_Momentum</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IMuonTileXYZTool *</type>
      <name>m_iTileTool</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IMuonGeometryTool *</type>
      <name>m_iGeomTool</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>m_NStation</name>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>m_stationZ</name>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>m_distPion</name>
      <anchor>o8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>m_distMuon</name>
      <anchor>o9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MuonIDFOI</name>
    <filename>class_muon_i_d_f_o_i.html</filename>
    <base>Algorithm</base>
    <member kind="function">
      <type></type>
      <name>MuonIDFOI</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MuonIDFOI</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <class kind="class">MuonIDFOI::coordExtent_</class>
  </compound>
  <compound kind="class">
    <name>MuonRec</name>
    <filename>class_muon_rec.html</filename>
    <base>Algorithm</base>
    <member kind="function">
      <type></type>
      <name>MuonRec</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MuonRec</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OTClusterOnTrack</name>
    <filename>class_o_t_cluster_on_track.html</filename>
    <base>TrMeasurement</base>
    <member kind="function">
      <type></type>
      <name>OTClusterOnTrack</name>
      <anchor>a0</anchor>
      <arglist>(OTTime *otTime, int ambiguity, DeOTDetector *geom, double tu=999.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OTClusterOnTrack</name>
      <anchor>a1</anchor>
      <arglist>(OTTime *otTime, int ambiguity, DeOTDetector *geom, const HepVector &amp;refVec)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OTClusterOnTrack</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OTClusterOnTrack</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>fillStream</name>
      <anchor>a4</anchor>
      <arglist>(std::ostream &amp;s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TrMeasurement *</type>
      <name>clone</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>lastChiSqContr</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRefVector</name>
      <anchor>a7</anchor>
      <arglist>(const HepVector &amp;refVec)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TrMeasurement::EMeasType</type>
      <name>measType</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>z</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>measure</name>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>measureError</name>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>measureError</name>
      <anchor>a12</anchor>
      <arglist>(const TrStateL *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>measureError</name>
      <anchor>a13</anchor>
      <arglist>(const TrStateP *state) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>projection</name>
      <anchor>a14</anchor>
      <arglist>(double x, double y, double tx, double ty) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>projection</name>
      <anchor>a15</anchor>
      <arglist>(const TrStateL *state) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeMatrix</name>
      <anchor>a16</anchor>
      <arglist>(HepVector &amp;H, double x, double y, double tx, double ty) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual HepVector</type>
      <name>projectionMatrix</name>
      <anchor>a17</anchor>
      <arglist>(const TrStateL *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>projection</name>
      <anchor>a18</anchor>
      <arglist>(const TrStateP *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual HepVector</type>
      <name>projectionMatrix</name>
      <anchor>a19</anchor>
      <arglist>(const TrStateP *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equal</name>
      <anchor>a20</anchor>
      <arglist>(const OTClusterOnTrack *hit) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equal</name>
      <anchor>a21</anchor>
      <arglist>(const TrMeasurement *meas) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equalHit</name>
      <anchor>a22</anchor>
      <arglist>(const OTClusterOnTrack *hit) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equalHit</name>
      <anchor>a23</anchor>
      <arglist>(const TrMeasurement *meas) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>stereoAngle</name>
      <anchor>a24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>residual</name>
      <anchor>a25</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setResidual</name>
      <anchor>a26</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>errorResidual</name>
      <anchor>a27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setErrorResidual</name>
      <anchor>a28</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ambiguity</name>
      <anchor>a29</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAmbiguity</name>
      <anchor>a30</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>const OTTime *</type>
      <name>time</name>
      <anchor>a31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OTTime *</type>
      <name>time</name>
      <anchor>a32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTime</name>
      <anchor>a33</anchor>
      <arglist>(OTTime *value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTu</name>
      <anchor>a34</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>n0</anchor>
      <arglist>(std::ostream &amp;str, const OTClusterOnTrack &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OTMonitorAlgorithm</name>
    <filename>class_o_t_monitor_algorithm.html</filename>
    <base>GaudiAlgorithm</base>
    <member kind="function">
      <type></type>
      <name>OTMonitorAlgorithm</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OTMonitorAlgorithm</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>histoDirPath</name>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>intToString</name>
      <anchor>a3</anchor>
      <arglist>(const int id) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fullDetail</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OTTimeChecker</name>
    <filename>class_o_t_time_checker.html</filename>
    <base>OTMonitorAlgorithm</base>
    <member kind="function">
      <type></type>
      <name>OTTimeChecker</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *svcloc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OTTimeChecker</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <class kind="struct">OTTimeChecker::HitMultiplicity</class>
    <class kind="struct">OTTimeChecker::PartMultiplicity</class>
  </compound>
  <compound kind="class">
    <name>OTTimeMonitor</name>
    <filename>class_o_t_time_monitor.html</filename>
    <base>OTMonitorAlgorithm</base>
    <member kind="function">
      <type></type>
      <name>OTTimeMonitor</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *svcloc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OTTimeMonitor</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OTTruthFromOTTime</name>
    <filename>class_o_t_truth_from_o_t_time.html</filename>
    <base>Algorithm</base>
    <member kind="typedef">
      <type>OTTime2MCHitAsct::IAsct</type>
      <name>OTTimeAsct</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OTTruthFromOTTime</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OTTruthFromOTTime</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>paraVTT</name>
    <filename>classpara_v_t_t.html</filename>
    <base>Algorithm</base>
    <member kind="function">
      <type></type>
      <name>paraVTT</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~paraVTT</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>finalize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NTuple::Item&lt; long &gt;</type>
      <name>m_nVelo</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NTuple::Array&lt; long &gt;</type>
      <name>m_keyVelo</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NTuple::Item&lt; long &gt;</type>
      <name>m_nTTCL</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NTuple::Array&lt; long &gt;</type>
      <name>m_iZ</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NTuple::Array&lt; float &gt;</type>
      <name>m_dx</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NTuple::Array&lt; float &gt;</type>
      <name>m_QPxz</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NTuple::Array&lt; float &gt;</type>
      <name>m_dxQPxz</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NTuple::Array&lt; long &gt;</type>
      <name>m_key</name>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NTuple::Array&lt; long &gt;</type>
      <name>m_id</name>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NTuple::Array&lt; long &gt;</type>
      <name>m_beforeVtx</name>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NTuple::Item&lt; long &gt;</type>
      <name>m_nTTHit</name>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NTuple::Array&lt; long &gt;</type>
      <name>m_iZHit</name>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NTuple::Array&lt; float &gt;</type>
      <name>m_dxHit</name>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NTuple::Array&lt; float &gt;</type>
      <name>m_QPxzHit</name>
      <anchor>p13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NTuple::Array&lt; float &gt;</type>
      <name>m_dxQPxzHit</name>
      <anchor>p14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NTuple::Array&lt; long &gt;</type>
      <name>m_keyHit</name>
      <anchor>p15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NTuple::Array&lt; long &gt;</type>
      <name>m_idHit</name>
      <anchor>p16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NTuple::Array&lt; long &gt;</type>
      <name>m_beforeVtxHit</name>
      <anchor>p17</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PatternChecker</name>
    <filename>class_pattern_checker.html</filename>
    <base>Algorithm</base>
    <member kind="function">
      <type></type>
      <name>PatternChecker</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatternChecker</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>peakPoint</name>
    <filename>classpeak_point.html</filename>
    <member kind="function">
      <type></type>
      <name>peakPoint</name>
      <anchor>a0</anchor>
      <arglist>(double position, double height, int bin)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~peakPoint</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>position</name>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>height</name>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bin</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <class kind="class">peakPoint::decreasingByHeight</class>
  </compound>
  <compound kind="class">
    <name>peakPoint::decreasingByHeight</name>
    <filename>classpeak_point_1_1decreasing_by_height.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a0</anchor>
      <arglist>(const peakPoint *first, const peakPoint *second) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PointOnTrack</name>
    <filename>class_point_on_track.html</filename>
    <base>TrMeasurement</base>
    <member kind="function">
      <type></type>
      <name>PointOnTrack</name>
      <anchor>a0</anchor>
      <arglist>(double measure, double error, double z, int xOrY)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PointOnTrack</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PointOnTrack</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>fillStream</name>
      <anchor>a3</anchor>
      <arglist>(std::ostream &amp;s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TrMeasurement *</type>
      <name>clone</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>lastChiSqContr</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TrMeasurement::EMeasType</type>
      <name>measType</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>z</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>measure</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>measureError</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>measureError</name>
      <anchor>a10</anchor>
      <arglist>(const TrStateL *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>measureError</name>
      <anchor>a11</anchor>
      <arglist>(const TrStateP *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>projection</name>
      <anchor>a12</anchor>
      <arglist>(const TrStateL *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual HepVector</type>
      <name>projectionMatrix</name>
      <anchor>a13</anchor>
      <arglist>(const TrStateL *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>projection</name>
      <anchor>a14</anchor>
      <arglist>(const TrStateP *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual HepVector</type>
      <name>projectionMatrix</name>
      <anchor>a15</anchor>
      <arglist>(const TrStateP *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equal</name>
      <anchor>a16</anchor>
      <arglist>(const PointOnTrack *hit) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equal</name>
      <anchor>a17</anchor>
      <arglist>(const TrMeasurement *meas) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>residual</name>
      <anchor>a18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setResidual</name>
      <anchor>a19</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>errorResidual</name>
      <anchor>a20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setErrorResidual</name>
      <anchor>a21</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>n0</anchor>
      <arglist>(std::ostream &amp;str, const PointOnTrack &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichAlignmentMonitor</name>
    <filename>class_rich_alignment_monitor.html</filename>
    <base>RichRecAlgBase</base>
    <member kind="typedef">
      <type>RichGeomPhotonCode::ShortType</type>
      <name>MirrorNumber</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RichAlignmentMonitor</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichAlignmentMonitor</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichBinnedCKResVthetaForTrStoredTracks</name>
    <filename>class_rich_binned_c_k_res_vtheta_for_tr_stored_tracks.html</filename>
    <base>RichRecToolBase</base>
    <base virtualness="virtual">IRichCherenkovResolution</base>
    <member kind="function">
      <type></type>
      <name>RichBinnedCKResVthetaForTrStoredTracks</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichBinnedCKResVthetaForTrStoredTracks</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ckThetaResolution</name>
      <anchor>a4</anchor>
      <arglist>(RichRecSegment *segment, const Rich::ParticleIDType id=Rich::Pion) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichCherenkovAngle</name>
    <filename>class_rich_cherenkov_angle.html</filename>
    <base>RichRecToolBase</base>
    <base virtualness="virtual">IRichCherenkovAngle</base>
    <member kind="function">
      <type></type>
      <name>RichCherenkovAngle</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichCherenkovAngle</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>avgCherenkovTheta</name>
      <anchor>a4</anchor>
      <arglist>(RichRecSegment *segment, const Rich::ParticleIDType id) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>avgCherenkovTheta</name>
      <anchor>a5</anchor>
      <arglist>(RichRecSegment *segment) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichDelegatedTrackCreatorFromTrStoredTracks</name>
    <filename>class_rich_delegated_track_creator_from_tr_stored_tracks.html</filename>
    <base>RichRecToolBase</base>
    <base virtualness="virtual">IRichTrackCreator</base>
    <base virtualness="virtual">IIncidentListener</base>
    <member kind="function">
      <type></type>
      <name>RichDelegatedTrackCreatorFromTrStoredTracks</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichDelegatedTrackCreatorFromTrStoredTracks</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handle</name>
      <anchor>a4</anchor>
      <arglist>(const Incident &amp;incident)</arglist>
    </member>
    <member kind="function">
      <type>RichRecTrack *</type>
      <name>newTrack</name>
      <anchor>a5</anchor>
      <arglist>(const ContainedObject *obj) const </arglist>
    </member>
    <member kind="function">
      <type>const StatusCode</type>
      <name>newTracks</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RichRecTracks *</type>
      <name>richTracks</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const long</type>
      <name>nInputTracks</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichExpectedTrackSignal</name>
    <filename>class_rich_expected_track_signal.html</filename>
    <base>RichRecToolBase</base>
    <base virtualness="virtual">IRichExpectedTrackSignal</base>
    <member kind="function">
      <type></type>
      <name>RichExpectedTrackSignal</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichExpectedTrackSignal</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>nSignalPhotons</name>
      <anchor>a4</anchor>
      <arglist>(RichRecTrack *track, const Rich::ParticleIDType id) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>nSignalPhotons</name>
      <anchor>a5</anchor>
      <arglist>(RichRecSegment *segment, const Rich::ParticleIDType id) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>nObservableSignalPhotons</name>
      <anchor>a6</anchor>
      <arglist>(RichRecTrack *track, const Rich::ParticleIDType id) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>nObservableSignalPhotons</name>
      <anchor>a7</anchor>
      <arglist>(RichRecSegment *segment, const Rich::ParticleIDType id) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>nScatteredPhotons</name>
      <anchor>a8</anchor>
      <arglist>(RichRecTrack *track, const Rich::ParticleIDType id) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>nScatteredPhotons</name>
      <anchor>a9</anchor>
      <arglist>(RichRecSegment *segment, const Rich::ParticleIDType id) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>nObservableScatteredPhotons</name>
      <anchor>a10</anchor>
      <arglist>(RichRecTrack *track, const Rich::ParticleIDType id) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>nObservableScatteredPhotons</name>
      <anchor>a11</anchor>
      <arglist>(RichRecSegment *segment, const Rich::ParticleIDType id) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>nTotalObservablePhotons</name>
      <anchor>a12</anchor>
      <arglist>(RichRecTrack *track, const Rich::ParticleIDType id) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>nTotalObservablePhotons</name>
      <anchor>a13</anchor>
      <arglist>(RichRecSegment *segment, const Rich::ParticleIDType id) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>nEmittedPhotons</name>
      <anchor>a14</anchor>
      <arglist>(RichRecTrack *track, const Rich::ParticleIDType id) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>nEmittedPhotons</name>
      <anchor>a15</anchor>
      <arglist>(RichRecSegment *segment, const Rich::ParticleIDType id) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>nDetectablePhotons</name>
      <anchor>a16</anchor>
      <arglist>(RichRecTrack *track, const Rich::ParticleIDType id) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>nDetectablePhotons</name>
      <anchor>a17</anchor>
      <arglist>(RichRecSegment *segment, const Rich::ParticleIDType id) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>avgSignalPhotEnergy</name>
      <anchor>a18</anchor>
      <arglist>(RichRecSegment *segment, const Rich::ParticleIDType id) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>avgEmitPhotEnergy</name>
      <anchor>a19</anchor>
      <arglist>(RichRecSegment *segment, const Rich::ParticleIDType id) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasRichInfo</name>
      <anchor>a20</anchor>
      <arglist>(RichRecTrack *track) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasRichInfo</name>
      <anchor>a21</anchor>
      <arglist>(RichRecSegment *segment) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>aboveThreshold</name>
      <anchor>a22</anchor>
      <arglist>(RichRecTrack *track, const Rich::ParticleIDType type) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>aboveThreshold</name>
      <anchor>a23</anchor>
      <arglist>(RichRecTrack *track, const Rich::ParticleIDType type, const Rich::RadiatorType radiator) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>aboveThreshold</name>
      <anchor>a24</anchor>
      <arglist>(RichRecSegment *segment, const Rich::ParticleIDType type) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setThresholdInfo</name>
      <anchor>a25</anchor>
      <arglist>(RichRecTrack *track, RichPID *pid) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setThresholdInfo</name>
      <anchor>a26</anchor>
      <arglist>(RichRecSegment *segment, RichPID *pid) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>activeInRadiator</name>
      <anchor>a27</anchor>
      <arglist>(RichRecTrack *track, const Rich::RadiatorType rad, const Rich::ParticleIDType id=Rich::Electron) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichFunctionalCKResVpForTrStoredTracks</name>
    <filename>class_rich_functional_c_k_res_vp_for_tr_stored_tracks.html</filename>
    <base>RichRecToolBase</base>
    <base virtualness="virtual">IRichCherenkovResolution</base>
    <member kind="function">
      <type></type>
      <name>RichFunctionalCKResVpForTrStoredTracks</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichFunctionalCKResVpForTrStoredTracks</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ckThetaResolution</name>
      <anchor>a4</anchor>
      <arglist>(RichRecSegment *segment, const Rich::ParticleIDType id=Rich::Pion) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichFunctionalRayleighScatter</name>
    <filename>class_rich_functional_rayleigh_scatter.html</filename>
    <base>RichRecToolBase</base>
    <base virtualness="virtual">IRichRayleighScatter</base>
    <member kind="function">
      <type></type>
      <name>RichFunctionalRayleighScatter</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichFunctionalRayleighScatter</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>photonScatteredProb</name>
      <anchor>a4</anchor>
      <arglist>(const RichRecSegment *segment, const double energy) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichGeomEffFixedValue</name>
    <filename>class_rich_geom_eff_fixed_value.html</filename>
    <base>RichRecToolBase</base>
    <base virtualness="virtual">IRichGeomEff</base>
    <member kind="function">
      <type></type>
      <name>RichGeomEffFixedValue</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichGeomEffFixedValue</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>geomEfficiency</name>
      <anchor>a4</anchor>
      <arglist>(RichRecSegment *segment, const Rich::ParticleIDType id) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>geomEfficiencyScat</name>
      <anchor>a5</anchor>
      <arglist>(RichRecSegment *segment, const Rich::ParticleIDType id) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichGeomEffPhotonTracing</name>
    <filename>class_rich_geom_eff_photon_tracing.html</filename>
    <base>RichRecToolBase</base>
    <base virtualness="virtual">IRichGeomEff</base>
    <member kind="function">
      <type></type>
      <name>RichGeomEffPhotonTracing</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichGeomEffPhotonTracing</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>geomEfficiency</name>
      <anchor>a4</anchor>
      <arglist>(RichRecSegment *segment, const Rich::ParticleIDType id) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>geomEfficiencyScat</name>
      <anchor>a5</anchor>
      <arglist>(RichRecSegment *segment, const Rich::ParticleIDType id) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichGlobalPID</name>
    <filename>class_rich_global_p_i_d.html</filename>
    <base>RichPID</base>
    <member kind="function">
      <type></type>
      <name>RichGlobalPID</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichGlobalPID</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const CLID &amp;</type>
      <name>clID</name>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>fillStream</name>
      <anchor>a3</anchor>
      <arglist>(std::ostream &amp;s) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const CLID &amp;</type>
      <name>classID</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>n0</anchor>
      <arglist>(std::ostream &amp;str, const RichGlobalPID &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichGlobalPIDAlg</name>
    <filename>class_rich_global_p_i_d_alg.html</filename>
    <base>RichGlobalPIDAlgBase</base>
    <member kind="function">
      <type></type>
      <name>RichGlobalPIDAlg</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichGlobalPIDAlg</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichGlobalPIDAlgBase</name>
    <filename>class_rich_global_p_i_d_alg_base.html</filename>
    <base>RichRecAlgBase</base>
    <member kind="function">
      <type></type>
      <name>RichGlobalPIDAlgBase</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual</type>
      <name>~RichGlobalPIDAlgBase</name>
      <anchor>a1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>StatusCode</type>
      <name>gpidTracks</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>StatusCode</type>
      <name>gpidPIDs</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>StatusCode</type>
      <name>gpidSummary</name>
      <anchor>b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RichGlobalPIDTracks *</type>
      <name>m_GPIDtracks</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RichGlobalPIDSummary *</type>
      <name>m_GPIDSummary</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RichGlobalPIDs *</type>
      <name>m_GPIDs</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_richGPIDTrackLocation</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_richGPIDSummaryLocation</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_richGPIDLocation</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_richGPIDName</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichGlobalPIDDigitSel</name>
    <filename>class_rich_global_p_i_d_digit_sel.html</filename>
    <base>RichGlobalPIDAlgBase</base>
    <member kind="function">
      <type></type>
      <name>RichGlobalPIDDigitSel</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichGlobalPIDDigitSel</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichGlobalPIDFinalize</name>
    <filename>class_rich_global_p_i_d_finalize.html</filename>
    <base>RichGlobalPIDAlgBase</base>
    <member kind="function">
      <type></type>
      <name>RichGlobalPIDFinalize</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichGlobalPIDFinalize</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichGlobalPIDInitialize</name>
    <filename>class_rich_global_p_i_d_initialize.html</filename>
    <base>RichGlobalPIDAlgBase</base>
    <member kind="function">
      <type></type>
      <name>RichGlobalPIDInitialize</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichGlobalPIDInitialize</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichGlobalPIDMonitor</name>
    <filename>class_rich_global_p_i_d_monitor.html</filename>
    <base>RichGlobalPIDAlgBase</base>
    <member kind="function">
      <type></type>
      <name>RichGlobalPIDMonitor</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichGlobalPIDMonitor</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichGlobalPIDSummary</name>
    <filename>class_rich_global_p_i_d_summary.html</filename>
    <base>DataObject</base>
    <member kind="function">
      <type></type>
      <name>RichGlobalPIDSummary</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichGlobalPIDSummary</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const CLID &amp;</type>
      <name>clID</name>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>fillStream</name>
      <anchor>a3</anchor>
      <arglist>(std::ostream &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToEventLL</name>
      <anchor>a4</anchor>
      <arglist>(double logL)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>eventLL</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt; &amp;</type>
      <name>eventLL</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEventLL</name>
      <anchor>a7</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const CLID &amp;</type>
      <name>classID</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>n0</anchor>
      <arglist>(std::ostream &amp;str, const RichGlobalPIDSummary &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichGlobalPIDTrack</name>
    <filename>class_rich_global_p_i_d_track.html</filename>
    <base>KeyedObject&lt; long &gt;</base>
    <member kind="function">
      <type></type>
      <name>RichGlobalPIDTrack</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichGlobalPIDTrack</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const CLID &amp;</type>
      <name>clID</name>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>fillStream</name>
      <anchor>a3</anchor>
      <arglist>(std::ostream &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>const Rich::GlobalPID::TkQuality &amp;</type>
      <name>trQuality</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Rich::GlobalPID::TkQuality &amp;</type>
      <name>trQuality</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTrQuality</name>
      <anchor>a6</anchor>
      <arglist>(const Rich::GlobalPID::TkQuality &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const RichRecTrack *</type>
      <name>richRecTrack</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RichRecTrack *</type>
      <name>richRecTrack</name>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRichRecTrack</name>
      <anchor>a9</anchor>
      <arglist>(const SmartRef&lt; RichRecTrack &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRichRecTrack</name>
      <anchor>a10</anchor>
      <arglist>(const RichRecTrack *value)</arglist>
    </member>
    <member kind="function">
      <type>const RichGlobalPID *</type>
      <name>globalPID</name>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RichGlobalPID *</type>
      <name>globalPID</name>
      <anchor>a12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGlobalPID</name>
      <anchor>a13</anchor>
      <arglist>(const SmartRef&lt; RichGlobalPID &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGlobalPID</name>
      <anchor>a14</anchor>
      <arglist>(const RichGlobalPID *value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const CLID &amp;</type>
      <name>classID</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>n0</anchor>
      <arglist>(std::ostream &amp;str, const RichGlobalPIDTrack &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichGlobalPIDTrTrackSel</name>
    <filename>class_rich_global_p_i_d_tr_track_sel.html</filename>
    <base>RichGlobalPIDAlgBase</base>
    <member kind="function">
      <type></type>
      <name>RichGlobalPIDTrTrackSel</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichGlobalPIDTrTrackSel</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichGPIDSelByRing</name>
    <filename>class_rich_g_p_i_d_sel_by_ring.html</filename>
    <base>RichAlgBase</base>
    <member kind="function">
      <type></type>
      <name>RichGPIDSelByRing</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichGPIDSelByRing</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichHierarchicalPIDMerge</name>
    <filename>class_rich_hierarchical_p_i_d_merge.html</filename>
    <base>RichAlgBase</base>
    <member kind="function">
      <type></type>
      <name>RichHierarchicalPIDMerge</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichHierarchicalPIDMerge</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichInterpCKResVpForTrStoredTracks</name>
    <filename>class_rich_interp_c_k_res_vp_for_tr_stored_tracks.html</filename>
    <base>RichRecToolBase</base>
    <base virtualness="virtual">IRichCherenkovResolution</base>
    <member kind="function">
      <type></type>
      <name>RichInterpCKResVpForTrStoredTracks</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichInterpCKResVpForTrStoredTracks</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ckThetaResolution</name>
      <anchor>a4</anchor>
      <arglist>(RichRecSegment *segment, const Rich::ParticleIDType id=Rich::Pion) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichInterpCKResVthetaForTrStoredTracks</name>
    <filename>class_rich_interp_c_k_res_vtheta_for_tr_stored_tracks.html</filename>
    <base>RichRecToolBase</base>
    <base virtualness="virtual">IRichCherenkovResolution</base>
    <member kind="function">
      <type></type>
      <name>RichInterpCKResVthetaForTrStoredTracks</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichInterpCKResVthetaForTrStoredTracks</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ckThetaResolution</name>
      <anchor>a4</anchor>
      <arglist>(RichRecSegment *segment, const Rich::ParticleIDType id=Rich::Pion) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichLocalPID</name>
    <filename>class_rich_local_p_i_d.html</filename>
    <base>RichPID</base>
    <member kind="function">
      <type></type>
      <name>RichLocalPID</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichLocalPID</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const CLID &amp;</type>
      <name>clID</name>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>fillStream</name>
      <anchor>a3</anchor>
      <arglist>(std::ostream &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>const RichHypoData&lt; double &gt; &amp;</type>
      <name>gaussianSignal</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RichHypoData&lt; double &gt; &amp;</type>
      <name>gaussianSignal</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGaussianSignal</name>
      <anchor>a6</anchor>
      <arglist>(const RichHypoData&lt; double &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const RichHypoData&lt; double &gt; &amp;</type>
      <name>gaussianBackgrd</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RichHypoData&lt; double &gt; &amp;</type>
      <name>gaussianBackgrd</name>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGaussianBackgrd</name>
      <anchor>a9</anchor>
      <arglist>(const RichHypoData&lt; double &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const RichHypoData&lt; int &gt; &amp;</type>
      <name>signalCount</name>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RichHypoData&lt; int &gt; &amp;</type>
      <name>signalCount</name>
      <anchor>a11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSignalCount</name>
      <anchor>a12</anchor>
      <arglist>(const RichHypoData&lt; int &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const RichHypoData&lt; int &gt; &amp;</type>
      <name>sideCount</name>
      <anchor>a13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RichHypoData&lt; int &gt; &amp;</type>
      <name>sideCount</name>
      <anchor>a14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSideCount</name>
      <anchor>a15</anchor>
      <arglist>(const RichHypoData&lt; int &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const RichHypoData&lt; double &gt; &amp;</type>
      <name>overallProbability</name>
      <anchor>a16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RichHypoData&lt; double &gt; &amp;</type>
      <name>overallProbability</name>
      <anchor>a17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOverallProbability</name>
      <anchor>a18</anchor>
      <arglist>(const RichHypoData&lt; double &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const RichHypoData&lt; double &gt; &amp;</type>
      <name>signalProbability</name>
      <anchor>a19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RichHypoData&lt; double &gt; &amp;</type>
      <name>signalProbability</name>
      <anchor>a20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSignalProbability</name>
      <anchor>a21</anchor>
      <arglist>(const RichHypoData&lt; double &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const RichHypoData&lt; double &gt; &amp;</type>
      <name>ringProbability</name>
      <anchor>a22</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RichHypoData&lt; double &gt; &amp;</type>
      <name>ringProbability</name>
      <anchor>a23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRingProbability</name>
      <anchor>a24</anchor>
      <arglist>(const RichHypoData&lt; double &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const SmartRefVector&lt; RichLocalPID &gt; &amp;</type>
      <name>relatedPIDs</name>
      <anchor>a25</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SmartRefVector&lt; RichLocalPID &gt; &amp;</type>
      <name>relatedPIDs</name>
      <anchor>a26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRelatedPIDs</name>
      <anchor>a27</anchor>
      <arglist>(const SmartRefVector&lt; RichLocalPID &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToRelatedPIDs</name>
      <anchor>a28</anchor>
      <arglist>(const SmartRef&lt; RichLocalPID &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToRelatedPIDs</name>
      <anchor>a29</anchor>
      <arglist>(const RichLocalPID *value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromRelatedPIDs</name>
      <anchor>a30</anchor>
      <arglist>(const SmartRef&lt; RichLocalPID &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearRelatedPIDs</name>
      <anchor>a31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const CLID &amp;</type>
      <name>classID</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>n0</anchor>
      <arglist>(std::ostream &amp;str, const RichLocalPID &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichLocalPIDAlg</name>
    <filename>class_rich_local_p_i_d_alg.html</filename>
    <base>RichRecAlgBase</base>
    <member kind="function">
      <type></type>
      <name>RichLocalPIDAlg</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichLocalPIDAlg</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichLocalPIDMonitor</name>
    <filename>class_rich_local_p_i_d_monitor.html</filename>
    <base>RichRecAlgBase</base>
    <member kind="function">
      <type></type>
      <name>RichLocalPIDMonitor</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichLocalPIDMonitor</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichLocalPIDToolAngleSpace</name>
    <filename>class_rich_local_p_i_d_tool_angle_space.html</filename>
    <base>RichRecToolBase</base>
    <base virtualness="virtual">IRichLocalPIDTool</base>
    <base virtualness="virtual">IIncidentListener</base>
    <member kind="function">
      <type></type>
      <name>RichLocalPIDToolAngleSpace</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichLocalPIDToolAngleSpace</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handle</name>
      <anchor>a4</anchor>
      <arglist>(const Incident &amp;incident)</arglist>
    </member>
    <member kind="function">
      <type>RichLocalPID *</type>
      <name>particleID</name>
      <anchor>a5</anchor>
      <arglist>(RichRecTrack *trTrack) const </arglist>
    </member>
    <member kind="function">
      <type>RichLocalPIDs *</type>
      <name>localPIDs</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichLocalPIDToolLocalXYSpace</name>
    <filename>class_rich_local_p_i_d_tool_local_x_y_space.html</filename>
    <base>RichRecToolBase</base>
    <base virtualness="virtual">IRichLocalPIDTool</base>
    <base virtualness="virtual">IIncidentListener</base>
    <member kind="function">
      <type></type>
      <name>RichLocalPIDToolLocalXYSpace</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichLocalPIDToolLocalXYSpace</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handle</name>
      <anchor>a4</anchor>
      <arglist>(const Incident &amp;incident)</arglist>
    </member>
    <member kind="function">
      <type>RichLocalPID *</type>
      <name>particleID</name>
      <anchor>a5</anchor>
      <arglist>(RichRecTrack *trTrack) const </arglist>
    </member>
    <member kind="function">
      <type>RichLocalPIDs *</type>
      <name>localPIDs</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichMassHypothesisRingCreator</name>
    <filename>class_rich_mass_hypothesis_ring_creator.html</filename>
    <base>RichRecToolBase</base>
    <base virtualness="virtual">IRichMassHypothesisRingCreator</base>
    <base virtualness="virtual">IIncidentListener</base>
    <member kind="function">
      <type></type>
      <name>RichMassHypothesisRingCreator</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichMassHypothesisRingCreator</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handle</name>
      <anchor>a4</anchor>
      <arglist>(const Incident &amp;incident)</arglist>
    </member>
    <member kind="function">
      <type>RichRecRing *</type>
      <name>newMassHypoRing</name>
      <anchor>a5</anchor>
      <arglist>(RichRecSegment *segment, const Rich::ParticleIDType id) const </arglist>
    </member>
    <member kind="function">
      <type>RichRecRing *</type>
      <name>newMassHypoRing</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveMassHypoRing</name>
      <anchor>a7</anchor>
      <arglist>(RichRecRing *ring) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>newMassHypoRings</name>
      <anchor>a8</anchor>
      <arglist>(RichRecSegment *segment) const </arglist>
    </member>
    <member kind="function">
      <type>RichRecRings *</type>
      <name>massHypoRings</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichMCMassHypoRingsAlg</name>
    <filename>class_rich_m_c_mass_hypo_rings_alg.html</filename>
    <base>RichRecAlgBase</base>
    <member kind="function">
      <type></type>
      <name>RichMCMassHypoRingsAlg</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichMCMassHypoRingsAlg</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichParticleProperties</name>
    <filename>class_rich_particle_properties.html</filename>
    <base>RichRecToolBase</base>
    <base virtualness="virtual">IRichParticleProperties</base>
    <member kind="function">
      <type></type>
      <name>RichParticleProperties</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichParticleProperties</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>beta</name>
      <anchor>a4</anchor>
      <arglist>(RichRecSegment *segment, const Rich::ParticleIDType id) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>mass</name>
      <anchor>a5</anchor>
      <arglist>(const Rich::ParticleIDType id) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>massSq</name>
      <anchor>a6</anchor>
      <arglist>(const Rich::ParticleIDType id) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>thresholdMomentum</name>
      <anchor>a7</anchor>
      <arglist>(const Rich::ParticleIDType id, const Rich::RadiatorType rad) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichPhotonCreator</name>
    <filename>class_rich_photon_creator.html</filename>
    <base>RichRecToolBase</base>
    <base virtualness="virtual">IRichPhotonCreator</base>
    <base virtualness="virtual">IIncidentListener</base>
    <member kind="function">
      <type></type>
      <name>RichPhotonCreator</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichPhotonCreator</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handle</name>
      <anchor>a4</anchor>
      <arglist>(const Incident &amp;incident)</arglist>
    </member>
    <member kind="function">
      <type>RichRecPhotons *</type>
      <name>richPhotons</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RichRecPhoton *</type>
      <name>reconstructPhoton</name>
      <anchor>a6</anchor>
      <arglist>(RichRecSegment *segment, RichRecPixel *pixel) const </arglist>
    </member>
    <member kind="function">
      <type>RichRecTrack::Photons</type>
      <name>reconstructPhotons</name>
      <anchor>a7</anchor>
      <arglist>(RichRecTrack *track, RichRecPixel *pixel) const </arglist>
    </member>
    <member kind="function">
      <type>const RichRecTrack::Photons &amp;</type>
      <name>reconstructPhotons</name>
      <anchor>a8</anchor>
      <arglist>(RichRecTrack *track) const </arglist>
    </member>
    <member kind="function">
      <type>const RichRecPixel::Photons &amp;</type>
      <name>reconstructPhotons</name>
      <anchor>a9</anchor>
      <arglist>(RichRecPixel *pixel) const </arglist>
    </member>
    <member kind="function">
      <type>const RichRecSegment::Photons &amp;</type>
      <name>reconstructPhotons</name>
      <anchor>a10</anchor>
      <arglist>(RichRecSegment *segment) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reconstructPhotons</name>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichPhotonCreatorFromMCRichOpticalPhotons</name>
    <filename>class_rich_photon_creator_from_m_c_rich_optical_photons.html</filename>
    <base>RichRecToolBase</base>
    <base virtualness="virtual">IRichPhotonCreator</base>
    <base virtualness="virtual">IIncidentListener</base>
    <member kind="function">
      <type></type>
      <name>RichPhotonCreatorFromMCRichOpticalPhotons</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichPhotonCreatorFromMCRichOpticalPhotons</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handle</name>
      <anchor>a4</anchor>
      <arglist>(const Incident &amp;incident)</arglist>
    </member>
    <member kind="function">
      <type>RichRecPhotons *</type>
      <name>richPhotons</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RichRecPhoton *</type>
      <name>reconstructPhoton</name>
      <anchor>a6</anchor>
      <arglist>(RichRecSegment *segment, RichRecPixel *pixel) const </arglist>
    </member>
    <member kind="function">
      <type>RichRecTrack::Photons</type>
      <name>reconstructPhotons</name>
      <anchor>a7</anchor>
      <arglist>(RichRecTrack *track, RichRecPixel *pixel) const </arglist>
    </member>
    <member kind="function">
      <type>const RichRecTrack::Photons &amp;</type>
      <name>reconstructPhotons</name>
      <anchor>a8</anchor>
      <arglist>(RichRecTrack *track) const </arglist>
    </member>
    <member kind="function">
      <type>const RichRecPixel::Photons &amp;</type>
      <name>reconstructPhotons</name>
      <anchor>a9</anchor>
      <arglist>(RichRecPixel *pixel) const </arglist>
    </member>
    <member kind="function">
      <type>const RichRecSegment::Photons &amp;</type>
      <name>reconstructPhotons</name>
      <anchor>a10</anchor>
      <arglist>(RichRecSegment *segment) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reconstructPhotons</name>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichPhotonMonitor</name>
    <filename>class_rich_photon_monitor.html</filename>
    <base>RichRecAlgBase</base>
    <member kind="function">
      <type></type>
      <name>RichPhotonMonitor</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichPhotonMonitor</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichPhotonPredictor</name>
    <filename>class_rich_photon_predictor.html</filename>
    <base>RichRecToolBase</base>
    <base virtualness="virtual">IRichPhotonPredictor</base>
    <member kind="function">
      <type></type>
      <name>RichPhotonPredictor</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichPhotonPredictor</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>photonPossible</name>
      <anchor>a4</anchor>
      <arglist>(RichRecSegment *segment, RichRecPixel *pixel) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichPhotonPredictorUsingMCRichOpticalPhotons</name>
    <filename>class_rich_photon_predictor_using_m_c_rich_optical_photons.html</filename>
    <base>RichRecToolBase</base>
    <base virtualness="virtual">IRichPhotonPredictor</base>
    <member kind="function">
      <type></type>
      <name>RichPhotonPredictorUsingMCRichOpticalPhotons</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichPhotonPredictorUsingMCRichOpticalPhotons</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>photonPossible</name>
      <anchor>a4</anchor>
      <arglist>(RichRecSegment *segment, RichRecPixel *pixel) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichPhotonPredictorUsingRings</name>
    <filename>class_rich_photon_predictor_using_rings.html</filename>
    <base>RichRecToolBase</base>
    <base virtualness="virtual">IRichPhotonPredictor</base>
    <base virtualness="virtual">IIncidentListener</base>
    <member kind="function">
      <type></type>
      <name>RichPhotonPredictorUsingRings</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichPhotonPredictorUsingRings</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>photonPossible</name>
      <anchor>a4</anchor>
      <arglist>(RichRecSegment *segment, RichRecPixel *pixel) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handle</name>
      <anchor>a5</anchor>
      <arglist>(const Incident &amp;incident)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichPhotonSignal</name>
    <filename>class_rich_photon_signal.html</filename>
    <base>RichRecToolBase</base>
    <base virtualness="virtual">IRichPhotonSignal</base>
    <member kind="function">
      <type></type>
      <name>RichPhotonSignal</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichPhotonSignal</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>predictedPixelSignal</name>
      <anchor>a4</anchor>
      <arglist>(RichRecPhoton *photon, const Rich::ParticleIDType id) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>signalProb</name>
      <anchor>a5</anchor>
      <arglist>(RichRecPhoton *photon, const Rich::ParticleIDType id) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>scatterProb</name>
      <anchor>a6</anchor>
      <arglist>(RichRecPhoton *photon, const Rich::ParticleIDType id) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichPhotonSpectra</name>
    <filename>class_rich_photon_spectra.html</filename>
    <templarg>TYPE</templarg>
    <member kind="typedef">
      <type>std::vector&lt; TYPE &gt;</type>
      <name>PhotonData</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; PhotonData &gt;</type>
      <name>HypoPhotonData</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RichPhotonSpectra</name>
      <anchor>a0</anchor>
      <arglist>(const unsigned int enBins=5, const TYPE minEn=0, const TYPE maxEn=5)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RichPhotonSpectra</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>energyBins</name>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnergyBins</name>
      <anchor>a3</anchor>
      <arglist>(const unsigned int bins)</arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>minEnergy</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinEnergy</name>
      <anchor>a5</anchor>
      <arglist>(const TYPE en)</arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>maxEnergy</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxEnergy</name>
      <anchor>a7</anchor>
      <arglist>(const TYPE en)</arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>binSize</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBinSize</name>
      <anchor>a9</anchor>
      <arglist>(const TYPE size)</arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>binEnergyLowerEdge</name>
      <anchor>a10</anchor>
      <arglist>(const unsigned int bin) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>binEnergyUpperEdge</name>
      <anchor>a11</anchor>
      <arglist>(const unsigned int bin) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>binEnergy</name>
      <anchor>a12</anchor>
      <arglist>(const unsigned int bin) const </arglist>
    </member>
    <member kind="function">
      <type>RichPhotonSpectra::PhotonData &amp;</type>
      <name>energyDist</name>
      <anchor>a13</anchor>
      <arglist>(const Rich::ParticleIDType id)</arglist>
    </member>
    <member kind="function">
      <type>const RichPhotonSpectra::PhotonData &amp;</type>
      <name>energyDist</name>
      <anchor>a14</anchor>
      <arglist>(const Rich::ParticleIDType id) const </arglist>
    </member>
    <member kind="function">
      <type>RichPhotonSpectra::HypoPhotonData &amp;</type>
      <name>hypoData</name>
      <anchor>a15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const RichPhotonSpectra::HypoPhotonData &amp;</type>
      <name>hypoData</name>
      <anchor>a16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>integral</name>
      <anchor>a17</anchor>
      <arglist>(const Rich::ParticleIDType id) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>multiply</name>
      <anchor>a18</anchor>
      <arglist>(const Rich::ParticleIDType id, const typename RichPhotonSpectra::PhotonData &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchor>a19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnergyRange</name>
      <anchor>a20</anchor>
      <arglist>(const TYPE min, const TYPE max)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichPIDQC</name>
    <filename>class_rich_p_i_d_q_c.html</filename>
    <base>RichAlgBase</base>
    <member kind="function">
      <type></type>
      <name>RichPIDQC</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichPIDQC</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichPixelCreatorFromCheatedRichDigits</name>
    <filename>class_rich_pixel_creator_from_cheated_rich_digits.html</filename>
    <base>RichRecToolBase</base>
    <base virtualness="virtual">IRichPixelCreator</base>
    <base virtualness="virtual">IIncidentListener</base>
    <member kind="function">
      <type></type>
      <name>RichPixelCreatorFromCheatedRichDigits</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichPixelCreatorFromCheatedRichDigits</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handle</name>
      <anchor>a4</anchor>
      <arglist>(const Incident &amp;incident)</arglist>
    </member>
    <member kind="function">
      <type>RichRecPixel *</type>
      <name>newPixel</name>
      <anchor>a5</anchor>
      <arglist>(const ContainedObject *obj) const </arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>newPixels</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RichRecPixels *</type>
      <name>richPixels</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichPixelCreatorFromMCRichHits</name>
    <filename>class_rich_pixel_creator_from_m_c_rich_hits.html</filename>
    <base>RichRecToolBase</base>
    <base virtualness="virtual">IRichPixelCreator</base>
    <base virtualness="virtual">IIncidentListener</base>
    <member kind="function">
      <type></type>
      <name>RichPixelCreatorFromMCRichHits</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichPixelCreatorFromMCRichHits</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handle</name>
      <anchor>a4</anchor>
      <arglist>(const Incident &amp;incident)</arglist>
    </member>
    <member kind="function">
      <type>RichRecPixel *</type>
      <name>newPixel</name>
      <anchor>a5</anchor>
      <arglist>(const ContainedObject *obj) const </arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>newPixels</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RichRecPixels *</type>
      <name>richPixels</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichPixelCreatorFromRawBuffer</name>
    <filename>class_rich_pixel_creator_from_raw_buffer.html</filename>
    <base>RichRecToolBase</base>
    <base virtualness="virtual">IRichPixelCreator</base>
    <base virtualness="virtual">IIncidentListener</base>
    <member kind="function">
      <type></type>
      <name>RichPixelCreatorFromRawBuffer</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichPixelCreatorFromRawBuffer</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handle</name>
      <anchor>a4</anchor>
      <arglist>(const Incident &amp;incident)</arglist>
    </member>
    <member kind="function">
      <type>RichRecPixel *</type>
      <name>newPixel</name>
      <anchor>a5</anchor>
      <arglist>(const ContainedObject *obj) const </arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>newPixels</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RichRecPixels *</type>
      <name>richPixels</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichPixelCreatorFromRichDigits</name>
    <filename>class_rich_pixel_creator_from_rich_digits.html</filename>
    <base>RichRecToolBase</base>
    <base virtualness="virtual">IRichPixelCreator</base>
    <base virtualness="virtual">IIncidentListener</base>
    <member kind="function">
      <type></type>
      <name>RichPixelCreatorFromRichDigits</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichPixelCreatorFromRichDigits</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handle</name>
      <anchor>a4</anchor>
      <arglist>(const Incident &amp;incident)</arglist>
    </member>
    <member kind="function">
      <type>RichRecPixel *</type>
      <name>newPixel</name>
      <anchor>a5</anchor>
      <arglist>(const ContainedObject *obj) const </arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>newPixels</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RichRecPixels *</type>
      <name>richPixels</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichPixelCreatorFromRichDigitsWithBg</name>
    <filename>class_rich_pixel_creator_from_rich_digits_with_bg.html</filename>
    <base>RichRecToolBase</base>
    <base virtualness="virtual">IRichPixelCreator</base>
    <base virtualness="virtual">IIncidentListener</base>
    <member kind="function">
      <type></type>
      <name>RichPixelCreatorFromRichDigitsWithBg</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichPixelCreatorFromRichDigitsWithBg</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handle</name>
      <anchor>a4</anchor>
      <arglist>(const Incident &amp;incident)</arglist>
    </member>
    <member kind="function">
      <type>RichRecPixel *</type>
      <name>newPixel</name>
      <anchor>a5</anchor>
      <arglist>(const ContainedObject *obj) const </arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>newPixels</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RichRecPixels *</type>
      <name>richPixels</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichPixelCreatorFromSignalRichDigits</name>
    <filename>class_rich_pixel_creator_from_signal_rich_digits.html</filename>
    <base>RichRecToolBase</base>
    <base virtualness="virtual">IRichPixelCreator</base>
    <base virtualness="virtual">IIncidentListener</base>
    <member kind="function">
      <type></type>
      <name>RichPixelCreatorFromSignalRichDigits</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichPixelCreatorFromSignalRichDigits</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handle</name>
      <anchor>a4</anchor>
      <arglist>(const Incident &amp;incident)</arglist>
    </member>
    <member kind="function">
      <type>RichRecPixel *</type>
      <name>newPixel</name>
      <anchor>a5</anchor>
      <arglist>(const ContainedObject *obj) const </arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>newPixels</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RichRecPixels *</type>
      <name>richPixels</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichPixelMonitor</name>
    <filename>class_rich_pixel_monitor.html</filename>
    <base>RichRecAlgBase</base>
    <member kind="function">
      <type></type>
      <name>RichPixelMonitor</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichPixelMonitor</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichRayTraceCherenkovCone</name>
    <filename>class_rich_ray_trace_cherenkov_cone.html</filename>
    <base>RichRecToolBase</base>
    <base virtualness="virtual">IRichRayTraceCherenkovCone</base>
    <member kind="function">
      <type></type>
      <name>RichRayTraceCherenkovCone</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichRayTraceCherenkovCone</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>rayTrace</name>
      <anchor>a4</anchor>
      <arglist>(RichRecSegment *segment, const Rich::ParticleIDType id, std::vector&lt; HepPoint3D &gt; &amp;points, const RichTraceMode mode=RichTraceMode()) const </arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>rayTrace</name>
      <anchor>a5</anchor>
      <arglist>(RichRecSegment *segment, const double ckTheta, std::vector&lt; HepPoint3D &gt; &amp;points, const RichTraceMode mode=RichTraceMode()) const </arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>rayTrace</name>
      <anchor>a6</anchor>
      <arglist>(const Rich::DetectorType rich, const HepPoint3D &amp;emissionPoint, const HepVector3D &amp;direction, const double ckTheta, std::vector&lt; HepPoint3D &gt; &amp;points, const RichTraceMode mode=RichTraceMode()) const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; HepPoint3D &gt; &amp;</type>
      <name>rayTrace</name>
      <anchor>a7</anchor>
      <arglist>(RichRecRing *ring, const RichTraceMode mode=RichTraceMode()) const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; HepPoint3D &gt; &amp;</type>
      <name>rayTraceLocal</name>
      <anchor>a8</anchor>
      <arglist>(RichRecRing *ring, const RichTraceMode mode=RichTraceMode()) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichRecAlgBase</name>
    <filename>class_rich_rec_alg_base.html</filename>
    <base>RichAlgBase</base>
    <member kind="function">
      <type></type>
      <name>RichRecAlgBase</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual</type>
      <name>~RichRecAlgBase</name>
      <anchor>a1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>RichRecTracks *</type>
      <name>richTracks</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>RichRecPixels *</type>
      <name>richPixels</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>RichRecSegments *</type>
      <name>richSegments</name>
      <anchor>b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>RichRecPhotons *</type>
      <name>richPhotons</name>
      <anchor>b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>RichRecStatus *</type>
      <name>richStatus</name>
      <anchor>b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const RichRecTracks *</type>
      <name>richTracks</name>
      <anchor>b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const RichRecPixels *</type>
      <name>richPixels</name>
      <anchor>b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const RichRecSegments *</type>
      <name>richSegments</name>
      <anchor>b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const RichRecPhotons *</type>
      <name>richPhotons</name>
      <anchor>b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const RichRecStatus *</type>
      <name>richStatus</name>
      <anchor>b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const IRichPixelCreator *</type>
      <name>pixelCreator</name>
      <anchor>b10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const IRichTrackCreator *</type>
      <name>trackCreator</name>
      <anchor>b11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const IRichSegmentCreator *</type>
      <name>segmentCreator</name>
      <anchor>b12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const IRichPhotonCreator *</type>
      <name>photonCreator</name>
      <anchor>b13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const IRichStatusCreator *</type>
      <name>statusCreator</name>
      <anchor>b14</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichRecBackgroundEsti</name>
    <filename>class_rich_rec_background_esti.html</filename>
    <base>RichRecAlgBase</base>
    <member kind="function">
      <type></type>
      <name>RichRecBackgroundEsti</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichRecBackgroundEsti</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichRecDataObjVerifier</name>
    <filename>class_rich_rec_data_obj_verifier.html</filename>
    <base>RichRecAlgBase</base>
    <member kind="function">
      <type></type>
      <name>RichRecDataObjVerifier</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichRecDataObjVerifier</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichRecGeomTool</name>
    <filename>class_rich_rec_geom_tool.html</filename>
    <base>RichRecToolBase</base>
    <base virtualness="virtual">IRichRecGeomTool</base>
    <member kind="function">
      <type></type>
      <name>RichRecGeomTool</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichRecGeomTool</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>trackPixelHitSep2Global</name>
      <anchor>a4</anchor>
      <arglist>(const RichRecSegment *segment, const RichRecPixel *pixel) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>trackPixelHitSep2Local</name>
      <anchor>a5</anchor>
      <arglist>(const RichRecSegment *segment, const RichRecPixel *pixel) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichRecMCTruthTool</name>
    <filename>class_rich_rec_m_c_truth_tool.html</filename>
    <base>RichRecToolBase</base>
    <base virtualness="virtual">IRichRecMCTruthTool</base>
    <member kind="function">
      <type></type>
      <name>RichRecMCTruthTool</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>finalize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const MCParticle *</type>
      <name>mcParticle</name>
      <anchor>a3</anchor>
      <arglist>(const RichRecTrack *richTrack) const </arglist>
    </member>
    <member kind="function">
      <type>const MCParticle *</type>
      <name>mcParticle</name>
      <anchor>a4</anchor>
      <arglist>(const RichRecSegment *richSegment) const </arglist>
    </member>
    <member kind="function">
      <type>Rich::ParticleIDType</type>
      <name>mcParticleType</name>
      <anchor>a5</anchor>
      <arglist>(const RichRecTrack *richTrack) const </arglist>
    </member>
    <member kind="function">
      <type>Rich::ParticleIDType</type>
      <name>mcParticleType</name>
      <anchor>a6</anchor>
      <arglist>(const RichRecSegment *richSegment) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mcParticle</name>
      <anchor>a7</anchor>
      <arglist>(const RichRecPixel *richPixel, std::vector&lt; const MCParticle * &gt; &amp;mcParts) const </arglist>
    </member>
    <member kind="function">
      <type>const MCRichDigit *</type>
      <name>mcRichDigit</name>
      <anchor>a8</anchor>
      <arglist>(const RichRecPixel *richPixel) const </arglist>
    </member>
    <member kind="function">
      <type>const SmartRefVector&lt; MCRichHit &gt; &amp;</type>
      <name>mcRichHits</name>
      <anchor>a9</anchor>
      <arglist>(const RichRecPixel *richPixel) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mcRichOpticalPhoton</name>
      <anchor>a10</anchor>
      <arglist>(const RichRecPixel *richPixel, SmartRefVector&lt; MCRichOpticalPhoton &gt; &amp;phots) const </arglist>
    </member>
    <member kind="function">
      <type>const MCParticle *</type>
      <name>trueRecPhoton</name>
      <anchor>a11</anchor>
      <arglist>(const RichRecPhoton *photon) const </arglist>
    </member>
    <member kind="function">
      <type>const MCParticle *</type>
      <name>trueRecPhoton</name>
      <anchor>a12</anchor>
      <arglist>(const RichRecSegment *segment, const RichRecPixel *pixel) const </arglist>
    </member>
    <member kind="function">
      <type>const MCRichHit *</type>
      <name>trueCherenkovHit</name>
      <anchor>a13</anchor>
      <arglist>(const RichRecPhoton *photon) const </arglist>
    </member>
    <member kind="function">
      <type>const MCRichOpticalPhoton *</type>
      <name>trueOpticalPhoton</name>
      <anchor>a14</anchor>
      <arglist>(const RichRecPhoton *photon) const </arglist>
    </member>
    <member kind="function">
      <type>const MCRichOpticalPhoton *</type>
      <name>trueOpticalPhoton</name>
      <anchor>a15</anchor>
      <arglist>(const RichRecSegment *segment, const RichRecPixel *pixel) const </arglist>
    </member>
    <member kind="function">
      <type>const MCParticle *</type>
      <name>trueCherenkovPhoton</name>
      <anchor>a16</anchor>
      <arglist>(const RichRecPhoton *photon) const </arglist>
    </member>
    <member kind="function">
      <type>const MCParticle *</type>
      <name>trueCherenkovPhoton</name>
      <anchor>a17</anchor>
      <arglist>(const RichRecSegment *segment, const RichRecPixel *pixel) const </arglist>
    </member>
    <member kind="function">
      <type>const MCParticle *</type>
      <name>trueCherenkovRadiation</name>
      <anchor>a18</anchor>
      <arglist>(const RichRecPixel *pixel, const Rich::RadiatorType rad) const </arglist>
    </member>
    <member kind="function">
      <type>const MCRichSegment *</type>
      <name>mcRichSegment</name>
      <anchor>a19</anchor>
      <arglist>(const RichRecSegment *segment) const </arglist>
    </member>
    <member kind="function">
      <type>const MCRichTrack *</type>
      <name>mcRichTrack</name>
      <anchor>a20</anchor>
      <arglist>(const RichRecTrack *track) const </arglist>
    </member>
    <member kind="function">
      <type>const MCRichTrack *</type>
      <name>mcRichTrack</name>
      <anchor>a21</anchor>
      <arglist>(const TrStoredTrack *track) const </arglist>
    </member>
    <member kind="function">
      <type>const MCRichTrack *</type>
      <name>mcRichTrack</name>
      <anchor>a22</anchor>
      <arglist>(const RichRecSegment *segment) const </arglist>
    </member>
    <member kind="function">
      <type>const SmartRefVector&lt; MCRichSegment &gt; *</type>
      <name>mcRichSegments</name>
      <anchor>a23</anchor>
      <arglist>(const RichRecTrack *track) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBackground</name>
      <anchor>a24</anchor>
      <arglist>(const RichRecPixel *pixel) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichRecoQC</name>
    <filename>class_rich_reco_q_c.html</filename>
    <base>RichRecAlgBase</base>
    <member kind="function">
      <type></type>
      <name>RichRecoQC</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichRecoQC</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichRecPhoton</name>
    <filename>class_rich_rec_photon.html</filename>
    <base>KeyedObject&lt; RichRecPhotonKey &gt;</base>
    <member kind="typedef">
      <type>float</type>
      <name>FloatType</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RichRecPhoton</name>
      <anchor>a0</anchor>
      <arglist>(RichGeomPhoton &amp;photon, RichRecSegment *pSeg, RichRecTrack *pTrk, RichRecPixel *pPix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RichRecPhoton</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichRecPhoton</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const CLID &amp;</type>
      <name>clID</name>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>fillStream</name>
      <anchor>a4</anchor>
      <arglist>(std::ostream &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExpPixelSignalPhots</name>
      <anchor>a5</anchor>
      <arglist>(const Rich::ParticleIDType type, const RichRecPhoton::FloatType photons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExpPixelScattPhots</name>
      <anchor>a6</anchor>
      <arglist>(const Rich::ParticleIDType type, const RichRecPhoton::FloatType photons)</arglist>
    </member>
    <member kind="function">
      <type>RichRecPhoton::FloatType</type>
      <name>expPixelSignalPhots</name>
      <anchor>a7</anchor>
      <arglist>(const Rich::ParticleIDType type) const </arglist>
    </member>
    <member kind="function">
      <type>RichRecPhoton::FloatType</type>
      <name>expPixelScattPhots</name>
      <anchor>a8</anchor>
      <arglist>(const Rich::ParticleIDType type) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const RichGeomPhoton &amp;</type>
      <name>geomPhoton</name>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RichGeomPhoton &amp;</type>
      <name>geomPhoton</name>
      <anchor>a11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGeomPhoton</name>
      <anchor>a12</anchor>
      <arglist>(const RichGeomPhoton &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const RichHypoData&lt; RichRecPhoton::FloatType &gt; &amp;</type>
      <name>expPixelSignalPhots</name>
      <anchor>a13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RichHypoData&lt; RichRecPhoton::FloatType &gt; &amp;</type>
      <name>expPixelSignalPhots</name>
      <anchor>a14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExpPixelSignalPhots</name>
      <anchor>a15</anchor>
      <arglist>(const RichHypoData&lt; RichRecPhoton::FloatType &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const RichHypoData&lt; RichRecPhoton::FloatType &gt; &amp;</type>
      <name>expPixelScattPhots</name>
      <anchor>a16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RichHypoData&lt; RichRecPhoton::FloatType &gt; &amp;</type>
      <name>expPixelScattPhots</name>
      <anchor>a17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExpPixelScattPhots</name>
      <anchor>a18</anchor>
      <arglist>(const RichHypoData&lt; RichRecPhoton::FloatType &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const RichRecSegment *</type>
      <name>richRecSegment</name>
      <anchor>a19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RichRecSegment *</type>
      <name>richRecSegment</name>
      <anchor>a20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRichRecSegment</name>
      <anchor>a21</anchor>
      <arglist>(RichRecSegment *value)</arglist>
    </member>
    <member kind="function">
      <type>const RichRecTrack *</type>
      <name>richRecTrack</name>
      <anchor>a22</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RichRecTrack *</type>
      <name>richRecTrack</name>
      <anchor>a23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRichRecTrack</name>
      <anchor>a24</anchor>
      <arglist>(RichRecTrack *value)</arglist>
    </member>
    <member kind="function">
      <type>const RichRecPixel *</type>
      <name>richRecPixel</name>
      <anchor>a25</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RichRecPixel *</type>
      <name>richRecPixel</name>
      <anchor>a26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRichRecPixel</name>
      <anchor>a27</anchor>
      <arglist>(RichRecPixel *value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const CLID &amp;</type>
      <name>classID</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>n0</anchor>
      <arglist>(std::ostream &amp;str, const RichRecPhoton &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichRecPhotonKey</name>
    <filename>class_rich_rec_photon_key.html</filename>
    <member kind="function">
      <type></type>
      <name>RichRecPhotonKey</name>
      <anchor>a0</anchor>
      <arglist>(const long key=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RichRecPhotonKey</name>
      <anchor>a1</anchor>
      <arglist>(const long pixelKey, const long segmentKey)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RichRecPhotonKey</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>key</name>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator long</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setKey</name>
      <anchor>a5</anchor>
      <arglist>(const long key)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>segmentNumber</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pixelNumber</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StreamBuffer &amp;</type>
      <name>serialize</name>
      <anchor>a8</anchor>
      <arglist>(StreamBuffer &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>StreamBuffer &amp;</type>
      <name>serialize</name>
      <anchor>a9</anchor>
      <arglist>(StreamBuffer &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>fillStream</name>
      <anchor>a10</anchor>
      <arglist>(std::ostream &amp;s) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichRecPixel</name>
    <filename>class_rich_rec_pixel.html</filename>
    <base>KeyedObject&lt; int &gt;</base>
    <member kind="typedef">
      <type>float</type>
      <name>FloatType</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; RichRecTrack * &gt;</type>
      <name>Tracks</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; RichRecPhoton * &gt;</type>
      <name>Photons</name>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RichRecPixel</name>
      <anchor>a0</anchor>
      <arglist>(const RichSmartID smartID, const HepPoint3D &amp;gPos, const HepPoint3D &amp;lPos, const Rich::PixelParent::Type parentType, const ContainedObject *parent)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RichRecPixel</name>
      <anchor>a1</anchor>
      <arglist>(const RichRecPixel &amp;pixel)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RichRecPixel</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichRecPixel</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const CLID &amp;</type>
      <name>clID</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>fillStream</name>
      <anchor>a5</anchor>
      <arglist>(std::ostream &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>Rich::DetectorType</type>
      <name>detector</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RichSmartID</type>
      <name>pd</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RichSmartID</type>
      <name>panel</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToRichRecTracks</name>
      <anchor>a9</anchor>
      <arglist>(RichRecTrack *track)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToRichRecPhotons</name>
      <anchor>a10</anchor>
      <arglist>(RichRecPhoton *photon)</arglist>
    </member>
    <member kind="function">
      <type>const RichSmartID &amp;</type>
      <name>smartID</name>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RichSmartID &amp;</type>
      <name>smartID</name>
      <anchor>a12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSmartID</name>
      <anchor>a13</anchor>
      <arglist>(const RichSmartID &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const HepPoint3D &amp;</type>
      <name>globalPosition</name>
      <anchor>a14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepPoint3D &amp;</type>
      <name>globalPosition</name>
      <anchor>a15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGlobalPosition</name>
      <anchor>a16</anchor>
      <arglist>(const HepPoint3D &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const HepPoint3D &amp;</type>
      <name>localPosition</name>
      <anchor>a17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepPoint3D &amp;</type>
      <name>localPosition</name>
      <anchor>a18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLocalPosition</name>
      <anchor>a19</anchor>
      <arglist>(const HepPoint3D &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const RichRecPixel::FloatType &amp;</type>
      <name>currentBackground</name>
      <anchor>a20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RichRecPixel::FloatType &amp;</type>
      <name>currentBackground</name>
      <anchor>a21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurrentBackground</name>
      <anchor>a22</anchor>
      <arglist>(const RichRecPixel::FloatType &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const Rich::PixelParent::Type &amp;</type>
      <name>parentType</name>
      <anchor>a23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Rich::PixelParent::Type &amp;</type>
      <name>parentType</name>
      <anchor>a24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParentType</name>
      <anchor>a25</anchor>
      <arglist>(const Rich::PixelParent::Type &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const Tracks &amp;</type>
      <name>richRecTracks</name>
      <anchor>a26</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Tracks &amp;</type>
      <name>richRecTracks</name>
      <anchor>a27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRichRecTracks</name>
      <anchor>a28</anchor>
      <arglist>(const Tracks &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const Photons &amp;</type>
      <name>richRecPhotons</name>
      <anchor>a29</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Photons &amp;</type>
      <name>richRecPhotons</name>
      <anchor>a30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRichRecPhotons</name>
      <anchor>a31</anchor>
      <arglist>(const Photons &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const ContainedObject *</type>
      <name>parentPixel</name>
      <anchor>a32</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ContainedObject *</type>
      <name>parentPixel</name>
      <anchor>a33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParentPixel</name>
      <anchor>a34</anchor>
      <arglist>(const SmartRef&lt; ContainedObject &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParentPixel</name>
      <anchor>a35</anchor>
      <arglist>(const ContainedObject *value)</arglist>
    </member>
    <member kind="function">
      <type>const SmartRefVector&lt; RichRecTrack &gt; &amp;</type>
      <name>richRecTracksSmartRefs</name>
      <anchor>a36</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SmartRefVector&lt; RichRecTrack &gt; &amp;</type>
      <name>richRecTracksSmartRefs</name>
      <anchor>a37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRichRecTracksSmartRefs</name>
      <anchor>a38</anchor>
      <arglist>(const SmartRefVector&lt; RichRecTrack &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToRichRecTracksSmartRefs</name>
      <anchor>a39</anchor>
      <arglist>(const SmartRef&lt; RichRecTrack &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToRichRecTracksSmartRefs</name>
      <anchor>a40</anchor>
      <arglist>(const RichRecTrack *value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromRichRecTracksSmartRefs</name>
      <anchor>a41</anchor>
      <arglist>(const SmartRef&lt; RichRecTrack &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearRichRecTracksSmartRefs</name>
      <anchor>a42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SmartRefVector&lt; RichRecPhoton &gt; &amp;</type>
      <name>richRecPhotonsSmartRefs</name>
      <anchor>a43</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SmartRefVector&lt; RichRecPhoton &gt; &amp;</type>
      <name>richRecPhotonsSmartRefs</name>
      <anchor>a44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRichRecPhotonsSmartRefs</name>
      <anchor>a45</anchor>
      <arglist>(const SmartRefVector&lt; RichRecPhoton &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToRichRecPhotonsSmartRefs</name>
      <anchor>a46</anchor>
      <arglist>(const SmartRef&lt; RichRecPhoton &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToRichRecPhotonsSmartRefs</name>
      <anchor>a47</anchor>
      <arglist>(const RichRecPhoton *value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromRichRecPhotonsSmartRefs</name>
      <anchor>a48</anchor>
      <arglist>(const SmartRef&lt; RichRecPhoton &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearRichRecPhotonsSmartRefs</name>
      <anchor>a49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const CLID &amp;</type>
      <name>classID</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>n0</anchor>
      <arglist>(std::ostream &amp;str, const RichRecPixel &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichRecRing</name>
    <filename>class_rich_rec_ring.html</filename>
    <base>KeyedObject&lt; long &gt;</base>
    <member kind="typedef">
      <type>float</type>
      <name>FloatType</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RichRecRing</name>
      <anchor>a0</anchor>
      <arglist>(const RichRecRing &amp;ring)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RichRecRing</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichRecRing</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const CLID &amp;</type>
      <name>clID</name>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>fillStream</name>
      <anchor>a4</anchor>
      <arglist>(std::ostream &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRich</name>
      <anchor>a5</anchor>
      <arglist>(const Rich::DetectorType rich)</arglist>
    </member>
    <member kind="function">
      <type>Rich::DetectorType</type>
      <name>rich</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPanel</name>
      <anchor>a7</anchor>
      <arglist>(const Rich::Side panel)</arglist>
    </member>
    <member kind="function">
      <type>Rich::Side</type>
      <name>panel</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const HepPoint3D &amp;</type>
      <name>centrePointGlobal</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepPoint3D &amp;</type>
      <name>centrePointGlobal</name>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCentrePointGlobal</name>
      <anchor>a11</anchor>
      <arglist>(const HepPoint3D &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const HepPoint3D &amp;</type>
      <name>centrePointLocal</name>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepPoint3D &amp;</type>
      <name>centrePointLocal</name>
      <anchor>a13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCentrePointLocal</name>
      <anchor>a14</anchor>
      <arglist>(const HepPoint3D &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const RichRecRing::FloatType &amp;</type>
      <name>radius</name>
      <anchor>a15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RichRecRing::FloatType &amp;</type>
      <name>radius</name>
      <anchor>a16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRadius</name>
      <anchor>a17</anchor>
      <arglist>(const RichRecRing::FloatType &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const Rich::ParticleIDType &amp;</type>
      <name>massHypo</name>
      <anchor>a18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Rich::ParticleIDType &amp;</type>
      <name>massHypo</name>
      <anchor>a19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMassHypo</name>
      <anchor>a20</anchor>
      <arglist>(const Rich::ParticleIDType &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; HepPoint3D &gt; &amp;</type>
      <name>ringPoints</name>
      <anchor>a21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; HepPoint3D &gt; &amp;</type>
      <name>ringPoints</name>
      <anchor>a22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRingPoints</name>
      <anchor>a23</anchor>
      <arglist>(const std::vector&lt; HepPoint3D &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; HepPoint3D &gt; &amp;</type>
      <name>ringPointsLocal</name>
      <anchor>a24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; HepPoint3D &gt; &amp;</type>
      <name>ringPointsLocal</name>
      <anchor>a25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRingPointsLocal</name>
      <anchor>a26</anchor>
      <arglist>(const std::vector&lt; HepPoint3D &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>historyCode</name>
      <anchor>a27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHistoryCode</name>
      <anchor>a28</anchor>
      <arglist>(unsigned int value)</arglist>
    </member>
    <member kind="function">
      <type>const RichRecSegment *</type>
      <name>richRecSegment</name>
      <anchor>a29</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RichRecSegment *</type>
      <name>richRecSegment</name>
      <anchor>a30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRichRecSegment</name>
      <anchor>a31</anchor>
      <arglist>(const SmartRef&lt; RichRecSegment &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRichRecSegment</name>
      <anchor>a32</anchor>
      <arglist>(const RichRecSegment *value)</arglist>
    </member>
    <member kind="function">
      <type>const SmartRefVector&lt; RichRecPixel &gt; &amp;</type>
      <name>richRecPixels</name>
      <anchor>a33</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SmartRefVector&lt; RichRecPixel &gt; &amp;</type>
      <name>richRecPixels</name>
      <anchor>a34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRichRecPixels</name>
      <anchor>a35</anchor>
      <arglist>(const SmartRefVector&lt; RichRecPixel &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToRichRecPixels</name>
      <anchor>a36</anchor>
      <arglist>(const SmartRef&lt; RichRecPixel &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToRichRecPixels</name>
      <anchor>a37</anchor>
      <arglist>(const RichRecPixel *value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromRichRecPixels</name>
      <anchor>a38</anchor>
      <arglist>(const SmartRef&lt; RichRecPixel &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearRichRecPixels</name>
      <anchor>a39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const CLID &amp;</type>
      <name>classID</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>n0</anchor>
      <arglist>(std::ostream &amp;str, const RichRecRing &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichRecSegment</name>
    <filename>class_rich_rec_segment.html</filename>
    <base>KeyedObject&lt; int &gt;</base>
    <member kind="typedef">
      <type>float</type>
      <name>FloatType</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; RichSmartID::KeyType, RichRecSegment::FloatType &gt;</type>
      <name>PDGeomEffs</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; PDGeomEffs &gt;</type>
      <name>PDGeomEffsVector</name>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; RichRecPixel * &gt;</type>
      <name>Pixels</name>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; RichRecPhoton * &gt;</type>
      <name>Photons</name>
      <anchor>w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RichRecSegment</name>
      <anchor>a0</anchor>
      <arglist>(const RichTrackSegment &amp;segment, RichRecTrack *pTrk, const unsigned int enBins, const RichRecSegment::FloatType minEn, const RichRecSegment::FloatType maxEn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RichRecSegment</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichRecSegment</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const CLID &amp;</type>
      <name>clID</name>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>fillStream</name>
      <anchor>a4</anchor>
      <arglist>(std::ostream &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGeomEfficiency</name>
      <anchor>a5</anchor>
      <arglist>(const Rich::ParticleIDType type, const RichRecSegment::FloatType eff)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGeomEfficiencyScat</name>
      <anchor>a6</anchor>
      <arglist>(const Rich::ParticleIDType type, const RichRecSegment::FloatType eff)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNEmittedPhotons</name>
      <anchor>a7</anchor>
      <arglist>(const Rich::ParticleIDType type, const RichRecSegment::FloatType photons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNDetectablePhotons</name>
      <anchor>a8</anchor>
      <arglist>(const Rich::ParticleIDType type, const RichRecSegment::FloatType photons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNSignalPhotons</name>
      <anchor>a9</anchor>
      <arglist>(const Rich::ParticleIDType type, const RichRecSegment::FloatType photons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNScatteredPhotons</name>
      <anchor>a10</anchor>
      <arglist>(const Rich::ParticleIDType type, const RichRecSegment::FloatType photons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAverageCKTheta</name>
      <anchor>a11</anchor>
      <arglist>(const Rich::ParticleIDType type, const RichRecSegment::FloatType angle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToGeomEfficiencyPerPD</name>
      <anchor>a12</anchor>
      <arglist>(const Rich::ParticleIDType type, const RichSmartID::KeyType pd, const RichRecSegment::FloatType signal)</arglist>
    </member>
    <member kind="function">
      <type>RichRecSegment::FloatType</type>
      <name>nEmittedPhotons</name>
      <anchor>a13</anchor>
      <arglist>(const Rich::ParticleIDType type) const </arglist>
    </member>
    <member kind="function">
      <type>RichRecSegment::FloatType</type>
      <name>nDetectablePhotons</name>
      <anchor>a14</anchor>
      <arglist>(const Rich::ParticleIDType type) const </arglist>
    </member>
    <member kind="function">
      <type>RichRecSegment::FloatType</type>
      <name>nSignalPhotons</name>
      <anchor>a15</anchor>
      <arglist>(const Rich::ParticleIDType type) const </arglist>
    </member>
    <member kind="function">
      <type>RichRecSegment::FloatType</type>
      <name>nScatteredPhotons</name>
      <anchor>a16</anchor>
      <arglist>(const Rich::ParticleIDType type) const </arglist>
    </member>
    <member kind="function">
      <type>RichRecSegment::FloatType</type>
      <name>nTotalObservablePhotons</name>
      <anchor>a17</anchor>
      <arglist>(const Rich::ParticleIDType type) const </arglist>
    </member>
    <member kind="function">
      <type>RichRecSegment::FloatType</type>
      <name>geomEfficiency</name>
      <anchor>a18</anchor>
      <arglist>(const Rich::ParticleIDType type) const </arglist>
    </member>
    <member kind="function">
      <type>RichRecSegment::FloatType</type>
      <name>geomEfficiencyScat</name>
      <anchor>a19</anchor>
      <arglist>(const Rich::ParticleIDType type) const </arglist>
    </member>
    <member kind="function">
      <type>RichRecSegment::FloatType</type>
      <name>averageCKTheta</name>
      <anchor>a20</anchor>
      <arglist>(const Rich::ParticleIDType type) const </arglist>
    </member>
    <member kind="function">
      <type>RichRecSegment::PDGeomEffs &amp;</type>
      <name>geomEfficiencyPerPD</name>
      <anchor>a21</anchor>
      <arglist>(const Rich::ParticleIDType type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchor>a22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToRichRecPixels</name>
      <anchor>a23</anchor>
      <arglist>(RichRecPixel *pixel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToRichRecPhotons</name>
      <anchor>a24</anchor>
      <arglist>(RichRecPhoton *photon)</arglist>
    </member>
    <member kind="function">
      <type>const RichHypoData&lt; RichRecSegment::FloatType &gt; &amp;</type>
      <name>nEmittedPhotons</name>
      <anchor>a25</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RichHypoData&lt; RichRecSegment::FloatType &gt; &amp;</type>
      <name>nEmittedPhotons</name>
      <anchor>a26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNEmittedPhotons</name>
      <anchor>a27</anchor>
      <arglist>(const RichHypoData&lt; RichRecSegment::FloatType &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const RichHypoData&lt; RichRecSegment::FloatType &gt; &amp;</type>
      <name>nDetectablePhotons</name>
      <anchor>a28</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RichHypoData&lt; RichRecSegment::FloatType &gt; &amp;</type>
      <name>nDetectablePhotons</name>
      <anchor>a29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNDetectablePhotons</name>
      <anchor>a30</anchor>
      <arglist>(const RichHypoData&lt; RichRecSegment::FloatType &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const RichHypoData&lt; RichRecSegment::FloatType &gt; &amp;</type>
      <name>nSignalPhotons</name>
      <anchor>a31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RichHypoData&lt; RichRecSegment::FloatType &gt; &amp;</type>
      <name>nSignalPhotons</name>
      <anchor>a32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNSignalPhotons</name>
      <anchor>a33</anchor>
      <arglist>(const RichHypoData&lt; RichRecSegment::FloatType &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const RichHypoData&lt; RichRecSegment::FloatType &gt; &amp;</type>
      <name>nScatteredPhotons</name>
      <anchor>a34</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RichHypoData&lt; RichRecSegment::FloatType &gt; &amp;</type>
      <name>nScatteredPhotons</name>
      <anchor>a35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNScatteredPhotons</name>
      <anchor>a36</anchor>
      <arglist>(const RichHypoData&lt; RichRecSegment::FloatType &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const RichPhotonSpectra&lt; RichRecSegment::FloatType &gt; &amp;</type>
      <name>emittedPhotonSpectra</name>
      <anchor>a37</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RichPhotonSpectra&lt; RichRecSegment::FloatType &gt; &amp;</type>
      <name>emittedPhotonSpectra</name>
      <anchor>a38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEmittedPhotonSpectra</name>
      <anchor>a39</anchor>
      <arglist>(const RichPhotonSpectra&lt; RichRecSegment::FloatType &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const RichPhotonSpectra&lt; RichRecSegment::FloatType &gt; &amp;</type>
      <name>detectablePhotonSpectra</name>
      <anchor>a40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RichPhotonSpectra&lt; RichRecSegment::FloatType &gt; &amp;</type>
      <name>detectablePhotonSpectra</name>
      <anchor>a41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDetectablePhotonSpectra</name>
      <anchor>a42</anchor>
      <arglist>(const RichPhotonSpectra&lt; RichRecSegment::FloatType &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const RichPhotonSpectra&lt; RichRecSegment::FloatType &gt; &amp;</type>
      <name>signalPhotonSpectra</name>
      <anchor>a43</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RichPhotonSpectra&lt; RichRecSegment::FloatType &gt; &amp;</type>
      <name>signalPhotonSpectra</name>
      <anchor>a44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSignalPhotonSpectra</name>
      <anchor>a45</anchor>
      <arglist>(const RichPhotonSpectra&lt; RichRecSegment::FloatType &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const PDGeomEffsVector &amp;</type>
      <name>geomEfficiencyPerPD</name>
      <anchor>a46</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>PDGeomEffsVector &amp;</type>
      <name>geomEfficiencyPerPD</name>
      <anchor>a47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGeomEfficiencyPerPD</name>
      <anchor>a48</anchor>
      <arglist>(const PDGeomEffsVector &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const RichHypoData&lt; RichRecSegment::FloatType &gt; &amp;</type>
      <name>geomEfficiency</name>
      <anchor>a49</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RichHypoData&lt; RichRecSegment::FloatType &gt; &amp;</type>
      <name>geomEfficiency</name>
      <anchor>a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGeomEfficiency</name>
      <anchor>a51</anchor>
      <arglist>(const RichHypoData&lt; RichRecSegment::FloatType &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const RichHypoData&lt; RichRecSegment::FloatType &gt; &amp;</type>
      <name>geomEfficiencyScat</name>
      <anchor>a52</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RichHypoData&lt; RichRecSegment::FloatType &gt; &amp;</type>
      <name>geomEfficiencyScat</name>
      <anchor>a53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGeomEfficiencyScat</name>
      <anchor>a54</anchor>
      <arglist>(const RichHypoData&lt; RichRecSegment::FloatType &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const RichHypoData&lt; RichRecSegment::FloatType &gt; &amp;</type>
      <name>averageCKTheta</name>
      <anchor>a55</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RichHypoData&lt; RichRecSegment::FloatType &gt; &amp;</type>
      <name>averageCKTheta</name>
      <anchor>a56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAverageCKTheta</name>
      <anchor>a57</anchor>
      <arglist>(const RichHypoData&lt; RichRecSegment::FloatType &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const RichTrackSegment &amp;</type>
      <name>trackSegment</name>
      <anchor>a58</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RichTrackSegment &amp;</type>
      <name>trackSegment</name>
      <anchor>a59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTrackSegment</name>
      <anchor>a60</anchor>
      <arglist>(const RichTrackSegment &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const HepPoint3D &amp;</type>
      <name>pdPanelHitPoint</name>
      <anchor>a61</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepPoint3D &amp;</type>
      <name>pdPanelHitPoint</name>
      <anchor>a62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPdPanelHitPoint</name>
      <anchor>a63</anchor>
      <arglist>(const HepPoint3D &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const HepPoint3D &amp;</type>
      <name>pdPanelHitPointLocal</name>
      <anchor>a64</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepPoint3D &amp;</type>
      <name>pdPanelHitPointLocal</name>
      <anchor>a65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPdPanelHitPointLocal</name>
      <anchor>a66</anchor>
      <arglist>(const HepPoint3D &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>trackInfo</name>
      <anchor>a67</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTrackInfo</name>
      <anchor>a68</anchor>
      <arglist>(unsigned int value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>photonsInXPlus</name>
      <anchor>a69</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPhotonsInXPlus</name>
      <anchor>a70</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>photonsInXMinus</name>
      <anchor>a71</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPhotonsInXMinus</name>
      <anchor>a72</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>photonsInYPlus</name>
      <anchor>a73</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPhotonsInYPlus</name>
      <anchor>a74</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>photonsInYMinus</name>
      <anchor>a75</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPhotonsInYMinus</name>
      <anchor>a76</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>allPhotonsDone</name>
      <anchor>a77</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAllPhotonsDone</name>
      <anchor>a78</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>const RichRecTrack *</type>
      <name>richRecTrack</name>
      <anchor>a79</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RichRecTrack *</type>
      <name>richRecTrack</name>
      <anchor>a80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRichRecTrack</name>
      <anchor>a81</anchor>
      <arglist>(RichRecTrack *value)</arglist>
    </member>
    <member kind="function">
      <type>const Pixels &amp;</type>
      <name>richRecPixels</name>
      <anchor>a82</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Pixels &amp;</type>
      <name>richRecPixels</name>
      <anchor>a83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRichRecPixels</name>
      <anchor>a84</anchor>
      <arglist>(const Pixels &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const Photons &amp;</type>
      <name>richRecPhotons</name>
      <anchor>a85</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Photons &amp;</type>
      <name>richRecPhotons</name>
      <anchor>a86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRichRecPhotons</name>
      <anchor>a87</anchor>
      <arglist>(const Photons &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const RichHypoData&lt; RichRecRing * &gt; &amp;</type>
      <name>hypothesisRings</name>
      <anchor>a88</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RichHypoData&lt; RichRecRing * &gt; &amp;</type>
      <name>hypothesisRings</name>
      <anchor>a89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHypothesisRings</name>
      <anchor>a90</anchor>
      <arglist>(const RichHypoData&lt; RichRecRing * &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const RichRecTrack *</type>
      <name>richRecTrackSmartRef</name>
      <anchor>a91</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RichRecTrack *</type>
      <name>richRecTrackSmartRef</name>
      <anchor>a92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRichRecTrackSmartRef</name>
      <anchor>a93</anchor>
      <arglist>(const SmartRef&lt; RichRecTrack &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRichRecTrackSmartRef</name>
      <anchor>a94</anchor>
      <arglist>(const RichRecTrack *value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const CLID &amp;</type>
      <name>classID</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>n0</anchor>
      <arglist>(std::ostream &amp;str, const RichRecSegment &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichRecStatus</name>
    <filename>class_rich_rec_status.html</filename>
    <base>DataObject</base>
    <member kind="typedef">
      <type>float</type>
      <name>FloatType</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RichRecStatus</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichRecStatus</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const CLID &amp;</type>
      <name>clID</name>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>fillStream</name>
      <anchor>a3</anchor>
      <arglist>(std::ostream &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDetOverallBkg</name>
      <anchor>a4</anchor>
      <arglist>(const Rich::DetectorType rich, const RichRecStatus::FloatType &amp;bkg)</arglist>
    </member>
    <member kind="function">
      <type>RichRecStatus::FloatType</type>
      <name>detOverallBkg</name>
      <anchor>a5</anchor>
      <arglist>(const Rich::DetectorType rich) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>eventOK</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEventOK</name>
      <anchor>a7</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; RichRecStatus::FloatType &gt; &amp;</type>
      <name>detOverallBkg</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; RichRecStatus::FloatType &gt; &amp;</type>
      <name>detOverallBkg</name>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDetOverallBkg</name>
      <anchor>a10</anchor>
      <arglist>(const std::vector&lt; RichRecStatus::FloatType &gt; &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const CLID &amp;</type>
      <name>classID</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>n0</anchor>
      <arglist>(std::ostream &amp;str, const RichRecStatus &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichRecTimeMonitor</name>
    <filename>class_rich_rec_time_monitor.html</filename>
    <base>RichRecAlgBase</base>
    <member kind="function">
      <type></type>
      <name>RichRecTimeMonitor</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichRecTimeMonitor</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichRecToolBase</name>
    <filename>class_rich_rec_tool_base.html</filename>
    <base>RichToolBase</base>
    <member kind="function">
      <type></type>
      <name>RichRecToolBase</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichRecToolBase</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>RichRecTracks *</type>
      <name>richTracks</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>RichRecPixels *</type>
      <name>richPixels</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>RichRecSegments *</type>
      <name>richSegments</name>
      <anchor>b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>RichRecPhotons *</type>
      <name>richPhotons</name>
      <anchor>b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>RichRecStatus *</type>
      <name>richStatus</name>
      <anchor>b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const RichRecTracks *</type>
      <name>richTracks</name>
      <anchor>b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const RichRecPixels *</type>
      <name>richPixels</name>
      <anchor>b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const RichRecSegments *</type>
      <name>richSegments</name>
      <anchor>b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const RichRecPhotons *</type>
      <name>richPhotons</name>
      <anchor>b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const RichRecStatus *</type>
      <name>richStatus</name>
      <anchor>b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const IRichTrackCreator *</type>
      <name>trackCreator</name>
      <anchor>b10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const IRichSegmentCreator *</type>
      <name>segmentCreator</name>
      <anchor>b11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const IRichPixelCreator *</type>
      <name>pixelCreator</name>
      <anchor>b12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const IRichPhotonCreator *</type>
      <name>photonCreator</name>
      <anchor>b13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const IRichStatusCreator *</type>
      <name>statusCreator</name>
      <anchor>b14</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichRecTrack</name>
    <filename>class_rich_rec_track.html</filename>
    <base>KeyedObject&lt; int &gt;</base>
    <member kind="typedef">
      <type>float</type>
      <name>FloatType</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; RichRecSegment * &gt;</type>
      <name>Segments</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; RichRecPixel * &gt;</type>
      <name>Pixels</name>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; RichRecPhoton * &gt;</type>
      <name>Photons</name>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RichRecTrack</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichRecTrack</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const CLID &amp;</type>
      <name>clID</name>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>fillStream</name>
      <anchor>a3</anchor>
      <arglist>(std::ostream &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNEmittedPhotons</name>
      <anchor>a4</anchor>
      <arglist>(const Rich::ParticleIDType type, const RichRecTrack::FloatType photons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNDetectablePhotons</name>
      <anchor>a5</anchor>
      <arglist>(const Rich::ParticleIDType type, const RichRecTrack::FloatType photons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNSignalPhotons</name>
      <anchor>a6</anchor>
      <arglist>(const Rich::ParticleIDType type, const RichRecTrack::FloatType photons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNObservableSignalPhotons</name>
      <anchor>a7</anchor>
      <arglist>(const Rich::ParticleIDType type, const RichRecTrack::FloatType photons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNScatteredPhotons</name>
      <anchor>a8</anchor>
      <arglist>(const Rich::ParticleIDType type, const RichRecTrack::FloatType photons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNObservableScatteredPhotons</name>
      <anchor>a9</anchor>
      <arglist>(const Rich::ParticleIDType type, const RichRecTrack::FloatType photons)</arglist>
    </member>
    <member kind="function">
      <type>RichRecTrack::FloatType</type>
      <name>nEmittedPhotons</name>
      <anchor>a10</anchor>
      <arglist>(const Rich::ParticleIDType type) const </arglist>
    </member>
    <member kind="function">
      <type>RichRecTrack::FloatType</type>
      <name>nDetectablePhotons</name>
      <anchor>a11</anchor>
      <arglist>(const Rich::ParticleIDType type) const </arglist>
    </member>
    <member kind="function">
      <type>RichRecTrack::FloatType</type>
      <name>nSignalPhotons</name>
      <anchor>a12</anchor>
      <arglist>(const Rich::ParticleIDType type) const </arglist>
    </member>
    <member kind="function">
      <type>RichRecTrack::FloatType</type>
      <name>nObservableSignalPhotons</name>
      <anchor>a13</anchor>
      <arglist>(const Rich::ParticleIDType type) const </arglist>
    </member>
    <member kind="function">
      <type>RichRecTrack::FloatType</type>
      <name>nScatteredPhotons</name>
      <anchor>a14</anchor>
      <arglist>(const Rich::ParticleIDType type) const </arglist>
    </member>
    <member kind="function">
      <type>RichRecTrack::FloatType</type>
      <name>nObservableScatteredPhotons</name>
      <anchor>a15</anchor>
      <arglist>(const Rich::ParticleIDType type) const </arglist>
    </member>
    <member kind="function">
      <type>RichRecTrack::FloatType</type>
      <name>nTotalObservablePhotons</name>
      <anchor>a16</anchor>
      <arglist>(const Rich::ParticleIDType type) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchor>a17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToRichRecSegments</name>
      <anchor>a18</anchor>
      <arglist>(RichRecSegment *segment)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToRichRecPixels</name>
      <anchor>a19</anchor>
      <arglist>(RichRecPixel *pixel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToRichRecPhotons</name>
      <anchor>a20</anchor>
      <arglist>(RichRecPhoton *photon)</arglist>
    </member>
    <member kind="function">
      <type>const RichRecTrack::FloatType &amp;</type>
      <name>vertexMomentum</name>
      <anchor>a21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RichRecTrack::FloatType &amp;</type>
      <name>vertexMomentum</name>
      <anchor>a22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVertexMomentum</name>
      <anchor>a23</anchor>
      <arglist>(const RichRecTrack::FloatType &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const RichRecTrack::FloatType &amp;</type>
      <name>charge</name>
      <anchor>a24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RichRecTrack::FloatType &amp;</type>
      <name>charge</name>
      <anchor>a25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCharge</name>
      <anchor>a26</anchor>
      <arglist>(const RichRecTrack::FloatType &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const RichHypoData&lt; RichRecTrack::FloatType &gt; &amp;</type>
      <name>nEmittedPhotons</name>
      <anchor>a27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RichHypoData&lt; RichRecTrack::FloatType &gt; &amp;</type>
      <name>nEmittedPhotons</name>
      <anchor>a28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNEmittedPhotons</name>
      <anchor>a29</anchor>
      <arglist>(const RichHypoData&lt; RichRecTrack::FloatType &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const RichHypoData&lt; RichRecTrack::FloatType &gt; &amp;</type>
      <name>nDetectablePhotons</name>
      <anchor>a30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RichHypoData&lt; RichRecTrack::FloatType &gt; &amp;</type>
      <name>nDetectablePhotons</name>
      <anchor>a31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNDetectablePhotons</name>
      <anchor>a32</anchor>
      <arglist>(const RichHypoData&lt; RichRecTrack::FloatType &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const RichHypoData&lt; RichRecTrack::FloatType &gt; &amp;</type>
      <name>nSignalPhotons</name>
      <anchor>a33</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RichHypoData&lt; RichRecTrack::FloatType &gt; &amp;</type>
      <name>nSignalPhotons</name>
      <anchor>a34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNSignalPhotons</name>
      <anchor>a35</anchor>
      <arglist>(const RichHypoData&lt; RichRecTrack::FloatType &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const RichHypoData&lt; RichRecTrack::FloatType &gt; &amp;</type>
      <name>nObservableSignalPhotons</name>
      <anchor>a36</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RichHypoData&lt; RichRecTrack::FloatType &gt; &amp;</type>
      <name>nObservableSignalPhotons</name>
      <anchor>a37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNObservableSignalPhotons</name>
      <anchor>a38</anchor>
      <arglist>(const RichHypoData&lt; RichRecTrack::FloatType &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const RichHypoData&lt; RichRecTrack::FloatType &gt; &amp;</type>
      <name>nScatteredPhotons</name>
      <anchor>a39</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RichHypoData&lt; RichRecTrack::FloatType &gt; &amp;</type>
      <name>nScatteredPhotons</name>
      <anchor>a40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNScatteredPhotons</name>
      <anchor>a41</anchor>
      <arglist>(const RichHypoData&lt; RichRecTrack::FloatType &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const RichHypoData&lt; RichRecTrack::FloatType &gt; &amp;</type>
      <name>nObservableScatteredPhotons</name>
      <anchor>a42</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RichHypoData&lt; RichRecTrack::FloatType &gt; &amp;</type>
      <name>nObservableScatteredPhotons</name>
      <anchor>a43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNObservableScatteredPhotons</name>
      <anchor>a44</anchor>
      <arglist>(const RichHypoData&lt; RichRecTrack::FloatType &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const Rich::ParticleIDType &amp;</type>
      <name>currentHypothesis</name>
      <anchor>a45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Rich::ParticleIDType &amp;</type>
      <name>currentHypothesis</name>
      <anchor>a46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurrentHypothesis</name>
      <anchor>a47</anchor>
      <arglist>(const Rich::ParticleIDType &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const RichTrackID &amp;</type>
      <name>trackID</name>
      <anchor>a48</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RichTrackID &amp;</type>
      <name>trackID</name>
      <anchor>a49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTrackID</name>
      <anchor>a50</anchor>
      <arglist>(const RichTrackID &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>richTrackInfo</name>
      <anchor>a51</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRichTrackInfo</name>
      <anchor>a52</anchor>
      <arglist>(unsigned int value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inRICH1</name>
      <anchor>a53</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInRICH1</name>
      <anchor>a54</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inRICH2</name>
      <anchor>a55</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInRICH2</name>
      <anchor>a56</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inAerogel</name>
      <anchor>a57</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInAerogel</name>
      <anchor>a58</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inGas1</name>
      <anchor>a59</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInGas1</name>
      <anchor>a60</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inGas2</name>
      <anchor>a61</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInGas2</name>
      <anchor>a62</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inUse</name>
      <anchor>a63</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInUse</name>
      <anchor>a64</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>allPhotonsDone</name>
      <anchor>a65</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAllPhotonsDone</name>
      <anchor>a66</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>const Segments &amp;</type>
      <name>richRecSegments</name>
      <anchor>a67</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Segments &amp;</type>
      <name>richRecSegments</name>
      <anchor>a68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRichRecSegments</name>
      <anchor>a69</anchor>
      <arglist>(const Segments &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const Pixels &amp;</type>
      <name>richRecPixels</name>
      <anchor>a70</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Pixels &amp;</type>
      <name>richRecPixels</name>
      <anchor>a71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRichRecPixels</name>
      <anchor>a72</anchor>
      <arglist>(const Pixels &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const Photons &amp;</type>
      <name>richRecPhotons</name>
      <anchor>a73</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Photons &amp;</type>
      <name>richRecPhotons</name>
      <anchor>a74</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRichRecPhotons</name>
      <anchor>a75</anchor>
      <arglist>(const Photons &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const ContainedObject *</type>
      <name>parentTrack</name>
      <anchor>a76</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ContainedObject *</type>
      <name>parentTrack</name>
      <anchor>a77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParentTrack</name>
      <anchor>a78</anchor>
      <arglist>(const SmartRef&lt; ContainedObject &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParentTrack</name>
      <anchor>a79</anchor>
      <arglist>(const ContainedObject *value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const CLID &amp;</type>
      <name>classID</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>n0</anchor>
      <arglist>(std::ostream &amp;str, const RichRecTrack &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichRingRefit</name>
    <filename>class_rich_ring_refit.html</filename>
    <base>KeyedObject&lt; int &gt;</base>
    <member kind="typedef">
      <type>SmartRefVector&lt; RichRecPhoton &gt;</type>
      <name>Photons</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RichRingRefit</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichRingRefit</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const CLID &amp;</type>
      <name>clID</name>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>fillStream</name>
      <anchor>a3</anchor>
      <arglist>(std::ostream &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>const HepPoint3D &amp;</type>
      <name>avgEmissionPnt</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>avgCkTheta</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>circleFit</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fittedCherenkovTheta</name>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fittedCherenkovThetaError</name>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateSegmentDirection</name>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateAllPhotonAngles</name>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HepRotation &amp;</type>
      <name>toUnitSphere</name>
      <anchor>a11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FastRingFitter &amp;</type>
      <name>circleFitter</name>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FastRingFitter &amp;</type>
      <name>circleFitter</name>
      <anchor>a13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCircleFitter</name>
      <anchor>a14</anchor>
      <arglist>(const FastRingFitter &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAvgEmissionPnt</name>
      <anchor>a15</anchor>
      <arglist>(const HepPoint3D &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>infoField</name>
      <anchor>a16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInfoField</name>
      <anchor>a17</anchor>
      <arglist>(unsigned int value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>avgEmissDone</name>
      <anchor>a18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAvgEmissDone</name>
      <anchor>a19</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>circleFitDone</name>
      <anchor>a20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCircleFitDone</name>
      <anchor>a21</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>segUpdateDone</name>
      <anchor>a22</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSegUpdateDone</name>
      <anchor>a23</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>photonUpdateDone</name>
      <anchor>a24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPhotonUpdateDone</name>
      <anchor>a25</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>originalAvCkTheta</name>
      <anchor>a26</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOriginalAvCkTheta</name>
      <anchor>a27</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>refittedAvCkTheta</name>
      <anchor>a28</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRefittedAvCkTheta</name>
      <anchor>a29</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>originalCKThetaAngles</name>
      <anchor>a30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt; &amp;</type>
      <name>originalCKThetaAngles</name>
      <anchor>a31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>refittedCKThetaAngles</name>
      <anchor>a32</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt; &amp;</type>
      <name>refittedCKThetaAngles</name>
      <anchor>a33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>originalCKPhiAngles</name>
      <anchor>a34</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt; &amp;</type>
      <name>originalCKPhiAngles</name>
      <anchor>a35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>refittedCKPhiAngles</name>
      <anchor>a36</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt; &amp;</type>
      <name>refittedCKPhiAngles</name>
      <anchor>a37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toUnitSphereDone</name>
      <anchor>a38</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToUnitSphereDone</name>
      <anchor>a39</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>const RichRecSegment *</type>
      <name>richRecSegment</name>
      <anchor>a40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RichRecSegment *</type>
      <name>richRecSegment</name>
      <anchor>a41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRichRecSegment</name>
      <anchor>a42</anchor>
      <arglist>(const SmartRef&lt; RichRecSegment &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRichRecSegment</name>
      <anchor>a43</anchor>
      <arglist>(const RichRecSegment *value)</arglist>
    </member>
    <member kind="function">
      <type>const SmartRefVector&lt; RichRecPhoton &gt; &amp;</type>
      <name>richRecPhotons</name>
      <anchor>a44</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SmartRefVector&lt; RichRecPhoton &gt; &amp;</type>
      <name>richRecPhotons</name>
      <anchor>a45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRichRecPhotons</name>
      <anchor>a46</anchor>
      <arglist>(const SmartRefVector&lt; RichRecPhoton &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToRichRecPhotons</name>
      <anchor>a47</anchor>
      <arglist>(const SmartRef&lt; RichRecPhoton &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToRichRecPhotons</name>
      <anchor>a48</anchor>
      <arglist>(const RichRecPhoton *value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromRichRecPhotons</name>
      <anchor>a49</anchor>
      <arglist>(const SmartRef&lt; RichRecPhoton &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearRichRecPhotons</name>
      <anchor>a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const RichRingRefitPID *</type>
      <name>refitPID</name>
      <anchor>a51</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RichRingRefitPID *</type>
      <name>refitPID</name>
      <anchor>a52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRefitPID</name>
      <anchor>a53</anchor>
      <arglist>(const SmartRef&lt; RichRingRefitPID &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRefitPID</name>
      <anchor>a54</anchor>
      <arglist>(const RichRingRefitPID *value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const CLID &amp;</type>
      <name>classID</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>n0</anchor>
      <arglist>(std::ostream &amp;str, const RichRingRefit &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichRingRefitAlg</name>
    <filename>class_rich_ring_refit_alg.html</filename>
    <base>RichRecAlgBase</base>
    <member kind="function">
      <type></type>
      <name>RichRingRefitAlg</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichRingRefitAlg</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichRingRefitMoni</name>
    <filename>class_rich_ring_refit_moni.html</filename>
    <base>RichRecAlgBase</base>
    <member kind="function">
      <type></type>
      <name>RichRingRefitMoni</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichRingRefitMoni</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichRingRefitPID</name>
    <filename>class_rich_ring_refit_p_i_d.html</filename>
    <base>RichPID</base>
    <member kind="function">
      <type></type>
      <name>RichRingRefitPID</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichRingRefitPID</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const CLID &amp;</type>
      <name>clID</name>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>fillStream</name>
      <anchor>a3</anchor>
      <arglist>(std::ostream &amp;s) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const CLID &amp;</type>
      <name>classID</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>n0</anchor>
      <arglist>(std::ostream &amp;str, const RichRingRefitPID &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichSegmentCreator</name>
    <filename>class_rich_segment_creator.html</filename>
    <base>RichRecToolBase</base>
    <base virtualness="virtual">IRichSegmentCreator</base>
    <base virtualness="virtual">IIncidentListener</base>
    <member kind="function">
      <type></type>
      <name>RichSegmentCreator</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichSegmentCreator</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handle</name>
      <anchor>a4</anchor>
      <arglist>(const Incident &amp;incident)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveSegment</name>
      <anchor>a5</anchor>
      <arglist>(RichRecSegment *segment) const </arglist>
    </member>
    <member kind="function">
      <type>RichRecSegment *</type>
      <name>newSegment</name>
      <anchor>a6</anchor>
      <arglist>(const RichTrackSegment &amp;segment, RichRecTrack *pTrk) const </arglist>
    </member>
    <member kind="function">
      <type>RichRecSegments *</type>
      <name>richSegments</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichSellmeirFunc</name>
    <filename>class_rich_sellmeir_func.html</filename>
    <base>RichRecToolBase</base>
    <base virtualness="virtual">IRichSellmeirFunc</base>
    <member kind="function">
      <type></type>
      <name>RichSellmeirFunc</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichSellmeirFunc</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>photonsInEnergyRange</name>
      <anchor>a4</anchor>
      <arglist>(RichRecSegment *segment, const Rich::ParticleIDType id, const double botEn, const double topEn) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichStatusCreator</name>
    <filename>class_rich_status_creator.html</filename>
    <base>RichRecToolBase</base>
    <base virtualness="virtual">IRichStatusCreator</base>
    <base virtualness="virtual">IIncidentListener</base>
    <member kind="function">
      <type></type>
      <name>RichStatusCreator</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichStatusCreator</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handle</name>
      <anchor>a4</anchor>
      <arglist>(const Incident &amp;incident)</arglist>
    </member>
    <member kind="function">
      <type>RichRecStatus *</type>
      <name>richStatus</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichTabulatedGasQuartzWindowAbs</name>
    <filename>class_rich_tabulated_gas_quartz_window_abs.html</filename>
    <base>RichRecToolBase</base>
    <base virtualness="virtual">IRichGasQuartzWindowAbs</base>
    <member kind="function">
      <type></type>
      <name>RichTabulatedGasQuartzWindowAbs</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichTabulatedGasQuartzWindowAbs</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>photonTransProb</name>
      <anchor>a4</anchor>
      <arglist>(const RichRecSegment *segment, const double energy) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichTabulatedRayleighScatter</name>
    <filename>class_rich_tabulated_rayleigh_scatter.html</filename>
    <base>RichRecToolBase</base>
    <base virtualness="virtual">IRichRayleighScatter</base>
    <member kind="function">
      <type></type>
      <name>RichTabulatedRayleighScatter</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichTabulatedRayleighScatter</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>photonScatteredProb</name>
      <anchor>a4</anchor>
      <arglist>(const RichRecSegment *segment, const double energy) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichTabulatedSignalDetectionEff</name>
    <filename>class_rich_tabulated_signal_detection_eff.html</filename>
    <base>RichRecToolBase</base>
    <base virtualness="virtual">IRichSignalDetectionEff</base>
    <member kind="function">
      <type></type>
      <name>RichTabulatedSignalDetectionEff</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichTabulatedSignalDetectionEff</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>photonDetEfficiency</name>
      <anchor>a4</anchor>
      <arglist>(RichRecSegment *segment, const double energy) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichTrackCreatorFromTrStoredTracks</name>
    <filename>class_rich_track_creator_from_tr_stored_tracks.html</filename>
    <base>RichRecToolBase</base>
    <base virtualness="virtual">IRichTrackCreator</base>
    <base virtualness="virtual">IIncidentListener</base>
    <member kind="function">
      <type></type>
      <name>RichTrackCreatorFromTrStoredTracks</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichTrackCreatorFromTrStoredTracks</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handle</name>
      <anchor>a4</anchor>
      <arglist>(const Incident &amp;incident)</arglist>
    </member>
    <member kind="function">
      <type>RichRecTrack *</type>
      <name>newTrack</name>
      <anchor>a5</anchor>
      <arglist>(const ContainedObject *obj) const </arglist>
    </member>
    <member kind="function">
      <type>const StatusCode</type>
      <name>newTracks</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RichRecTracks *</type>
      <name>richTracks</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const long</type>
      <name>nInputTracks</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichTrackGeomMoni</name>
    <filename>class_rich_track_geom_moni.html</filename>
    <base>RichRecAlgBase</base>
    <member kind="function">
      <type></type>
      <name>RichTrackGeomMoni</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichTrackGeomMoni</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichTrackID</name>
    <filename>class_rich_track_i_d.html</filename>
    <member kind="function">
      <type></type>
      <name>RichTrackID</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RichTrackID</name>
      <anchor>a1</anchor>
      <arglist>(const TrStoredTrack *track)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RichTrackID</name>
      <anchor>a2</anchor>
      <arglist>(const TrgTrack *track)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RichTrackID</name>
      <anchor>a3</anchor>
      <arglist>(const MCParticle *mcPart)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RichTrackID</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Rich::Track::Type</type>
      <name>trackType</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTrackType</name>
      <anchor>a6</anchor>
      <arglist>(const Rich::Track::Type type)</arglist>
    </member>
    <member kind="function">
      <type>Rich::TrackParent::Type</type>
      <name>parentType</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParentType</name>
      <anchor>a8</anchor>
      <arglist>(const Rich::TrackParent::Type type)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unique</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUnique</name>
      <anchor>a10</anchor>
      <arglist>(bool unique)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialiseFor</name>
      <anchor>a11</anchor>
      <arglist>(const TrStoredTrack *track)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialiseFor</name>
      <anchor>a12</anchor>
      <arglist>(const TrgTrack *track)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialiseFor</name>
      <anchor>a13</anchor>
      <arglist>(const MCParticle *track)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichTrackResolutionMoni</name>
    <filename>class_rich_track_resolution_moni.html</filename>
    <base>RichRecAlgBase</base>
    <member kind="function">
      <type></type>
      <name>RichTrackResolutionMoni</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RichTrackResolutionMoni</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RichTrackSelector</name>
    <filename>class_rich_track_selector.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; std::string &gt;</type>
      <name>MomentumCutData</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RichTrackSelector</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RichTrackSelector</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MomentumCutData &amp;</type>
      <name>setMomentumCuts</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const double</type>
      <name>minMomentum</name>
      <anchor>a3</anchor>
      <arglist>(const Rich::Track::Type type) const </arglist>
    </member>
    <member kind="function">
      <type>const double</type>
      <name>maxMomentum</name>
      <anchor>a4</anchor>
      <arglist>(const Rich::Track::Type type) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>trackSelected</name>
      <anchor>a5</anchor>
      <arglist>(const TrStoredTrack *track) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>trackSelected</name>
      <anchor>a6</anchor>
      <arglist>(const TrgTrack *track) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>trackSelected</name>
      <anchor>a7</anchor>
      <arglist>(const RichRecTrack *track) const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt; &amp;</type>
      <name>selectedTrackTypes</name>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>selectedTrackTypes</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>typeSelected</name>
      <anchor>a10</anchor>
      <arglist>(const Rich::Track::Type track) const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>selectedTracksAsString</name>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>configureTrackTypes</name>
      <anchor>a12</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RZTrack</name>
    <filename>class_r_z_track.html</filename>
    <member kind="function">
      <type></type>
      <name>RZTrack</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RZTrack</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRCoord</name>
      <anchor>a2</anchor>
      <arglist>(VeloCoord *coord)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>meanZ</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>rSlope</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>errR2</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>errSl2</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>rPred</name>
      <anchor>a7</anchor>
      <arglist>(double z)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>rErr2</name>
      <anchor>a8</anchor>
      <arglist>(double z)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; VeloCoord * &gt; *</type>
      <name>coords</name>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>nbCoords</name>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tagUsedCoords</name>
      <anchor>a11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValid</name>
      <anchor>a12</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchor>a13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMissedStations</name>
      <anchor>a14</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>missedStations</name>
      <anchor>a15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZone</name>
      <anchor>a16</anchor>
      <arglist>(int zone)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>zone</name>
      <anchor>a17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackward</name>
      <anchor>a18</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>backward</name>
      <anchor>a19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>rInterpolated</name>
      <anchor>a20</anchor>
      <arglist>(double z)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SpaceTrack</name>
    <filename>class_space_track.html</filename>
    <member kind="function">
      <type></type>
      <name>SpaceTrack</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SpaceTrack</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRCoord</name>
      <anchor>a3</anchor>
      <arglist>(VeloCoord *coord)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>meanZ</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>rPred</name>
      <anchor>a5</anchor>
      <arglist>(double z)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>rErr2</name>
      <anchor>a6</anchor>
      <arglist>(double z)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; VeloCoord * &gt; *</type>
      <name>coords</name>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>nbCoords</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; VeloCoord * &gt; *</type>
      <name>phiCoords</name>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tagUsedCoords</name>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPhi</name>
      <anchor>a11</anchor>
      <arglist>(VeloCoord *phiCoord)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValid</name>
      <anchor>a12</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchor>a13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInVertex</name>
      <anchor>a14</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inVertex</name>
      <anchor>a15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>firstZ</name>
      <anchor>a16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>lastZ</name>
      <anchor>a17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>rSlope</name>
      <anchor>a18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZone</name>
      <anchor>a19</anchor>
      <arglist>(int zone)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>zone</name>
      <anchor>a20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackward</name>
      <anchor>a21</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>backward</name>
      <anchor>a22</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>rInterpolated</name>
      <anchor>a23</anchor>
      <arglist>(double z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPhiInterpolated</name>
      <anchor>a24</anchor>
      <arglist>(VeloCoord *myCoord)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fitSpaceTrack</name>
      <anchor>a25</anchor>
      <arglist>(double stepError)</arglist>
    </member>
    <member kind="function">
      <type>HepPoint3D &amp;</type>
      <name>point</name>
      <anchor>a26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>slopeX</name>
      <anchor>a27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>slopeY</name>
      <anchor>a28</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepSymMatrix</type>
      <name>covariance</name>
      <anchor>a29</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>chiSquared</name>
      <anchor>a30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAncestor</name>
      <anchor>a31</anchor>
      <arglist>(TrgTrack *tr)</arglist>
    </member>
    <member kind="function">
      <type>TrgTrack *</type>
      <name>ancestor</name>
      <anchor>a32</anchor>
      <arglist>() const </arglist>
    </member>
    <class kind="class">SpaceTrack::decreasingByLength</class>
  </compound>
  <compound kind="class">
    <name>SpaceTrack::decreasingByLength</name>
    <filename>class_space_track_1_1decreasing_by_length.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a0</anchor>
      <arglist>(const SpaceTrack *first, const SpaceTrack *second) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StatVar</name>
    <filename>class_stat_var.html</filename>
    <member kind="function">
      <type></type>
      <name>StatVar</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StatVar</name>
      <anchor>a1</anchor>
      <arglist>(std::string name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StatVar</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addEntry</name>
      <anchor>a3</anchor>
      <arglist>(float value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeEntry</name>
      <anchor>a4</anchor>
      <arglist>(float value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfEntries</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>mean</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>rms</name>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>variableName</name>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printVariableSummary</name>
      <anchor>a9</anchor>
      <arglist>(MsgStream &amp;msg)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>STL1BufferMonitor</name>
    <filename>class_s_t_l1_buffer_monitor.html</filename>
    <base>GaudiHistoAlg</base>
    <member kind="function">
      <type></type>
      <name>STL1BufferMonitor</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *svcloc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~STL1BufferMonitor</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>STL1ClusterChecker</name>
    <filename>class_s_t_l1_cluster_checker.html</filename>
    <base>GaudiHistoAlg</base>
    <member kind="function">
      <type></type>
      <name>STL1ClusterChecker</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *svcloc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~STL1ClusterChecker</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>STL1ClusterCreator</name>
    <filename>class_s_t_l1_cluster_creator.html</filename>
    <base>GaudiAlgorithm</base>
    <member kind="function">
      <type></type>
      <name>STL1ClusterCreator</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~STL1ClusterCreator</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>STRawBufferMonitor</name>
    <filename>class_s_t_raw_buffer_monitor.html</filename>
    <base>GaudiHistoAlg</base>
    <member kind="function">
      <type></type>
      <name>STRawBufferMonitor</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *svcloc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~STRawBufferMonitor</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SubClusterSelector3x3</name>
    <filename>class_sub_cluster_selector3x3.html</filename>
    <base>SubClusterSelectorBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>tag</name>
      <anchor>a1</anchor>
      <arglist>(CaloCluster *cluster) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>untag</name>
      <anchor>a2</anchor>
      <arglist>(CaloCluster *cluster) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SubClusterSelector3x3</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SubClusterSelector3x3</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ToolFactory&lt;SubClusterSelector3x3&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SubClusterSelectorAll</name>
    <filename>class_sub_cluster_selector_all.html</filename>
    <base>SubClusterSelectorBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>tag</name>
      <anchor>a0</anchor>
      <arglist>(CaloCluster *cluster) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>untag</name>
      <anchor>a1</anchor>
      <arglist>(CaloCluster *cluster) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SubClusterSelectorAll</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SubClusterSelectorAll</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ToolFactory&lt;SubClusterSelectorAll&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SubClusterSelectorBase</name>
    <filename>class_sub_cluster_selector_base.html</filename>
    <base virtualness="virtual">ICaloSubClusterTag</base>
    <base>CaloTool</base>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>process</name>
      <anchor>a2</anchor>
      <arglist>(CaloCluster *cluster) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>operator()</name>
      <anchor>a3</anchor>
      <arglist>(CaloCluster *cluster) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>modify</name>
      <anchor>b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setModify</name>
      <anchor>b1</anchor>
      <arglist>(const bool value) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SubClusterSelectorBase</name>
      <anchor>b2</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SubClusterSelectorBase</name>
      <anchor>b3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SubClusterSelectorMax2x2</name>
    <filename>class_sub_cluster_selector_max2x2.html</filename>
    <base>SubClusterSelectorBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>tag</name>
      <anchor>a1</anchor>
      <arglist>(CaloCluster *cluster) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>untag</name>
      <anchor>a2</anchor>
      <arglist>(CaloCluster *cluster) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SubClusterSelectorMax2x2</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SubClusterSelectorMax2x2</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ToolFactory&lt;SubClusterSelectorMax2x2&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SubClusterSelectorNeighbors</name>
    <filename>class_sub_cluster_selector_neighbors.html</filename>
    <base>SubClusterSelectorBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>tag</name>
      <anchor>a1</anchor>
      <arglist>(CaloCluster *cluster) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>untag</name>
      <anchor>a2</anchor>
      <arglist>(CaloCluster *cluster) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SubClusterSelectorNeighbors</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;Type, const std::string &amp;Name, const IInterface *Parent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SubClusterSelectorNeighbors</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ToolFactory&lt;SubClusterSelectorNeighbors&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SubClusterSelectorSwissCross</name>
    <filename>class_sub_cluster_selector_swiss_cross.html</filename>
    <base>SubClusterSelectorBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>tag</name>
      <anchor>a1</anchor>
      <arglist>(CaloCluster *cluster) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>untag</name>
      <anchor>a2</anchor>
      <arglist>(CaloCluster *cluster) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SubClusterSelectorSwissCross</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SubClusterSelectorSwissCross</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ToolFactory&lt;SubClusterSelectorSwissCross&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Tr2TracksMatch</name>
    <filename>class_tr2_tracks_match.html</filename>
    <member kind="function">
      <type></type>
      <name>Tr2TracksMatch</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tr2TracksMatch</name>
      <anchor>a1</anchor>
      <arglist>(const TrTrack *chTrack, const TrTrack *prTrack)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Tr2TracksMatch</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>fillStream</name>
      <anchor>a3</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>const TrTrack *</type>
      <name>chTrack</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const TrTrack *</type>
      <name>prTrack</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>goodNVelo</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>chTotNVelo</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>prTotNVelo</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>effVelo</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>chTotNMeas</name>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>chTotNOT</name>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>chTotNIT</name>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>prTotNMeas</name>
      <anchor>a13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>prTotNOT</name>
      <anchor>a14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>prTotNIT</name>
      <anchor>a15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>goodNMeas</name>
      <anchor>a16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>goodNOT</name>
      <anchor>a17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>goodHitNOT</name>
      <anchor>a18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>goodNIT</name>
      <anchor>a19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>goodNStHit</name>
      <anchor>a20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>goodNXHit</name>
      <anchor>a21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>wrongNMeas</name>
      <anchor>a22</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>wrongNOT</name>
      <anchor>a23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>wrongHitNOT</name>
      <anchor>a24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>wrongNIT</name>
      <anchor>a25</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>misNMeas</name>
      <anchor>a26</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>misNOT</name>
      <anchor>a27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>misHitNOT</name>
      <anchor>a28</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>misNIT</name>
      <anchor>a29</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eff</name>
      <anchor>a30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>effOT</name>
      <anchor>a31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>effIT</name>
      <anchor>a32</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>pure</name>
      <anchor>a33</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>pureOT</name>
      <anchor>a34</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>pureIT</name>
      <anchor>a35</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>chSpan</name>
      <anchor>a36</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>prSpan</name>
      <anchor>a37</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>relPRSpan</name>
      <anchor>a38</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>firstMatchZPos</name>
      <anchor>a39</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>firstTrackerMatchZPos</name>
      <anchor>a40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>lastMatchZPos</name>
      <anchor>a41</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>prSpanOnCh</name>
      <anchor>a42</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>relPRSpanOnCh</name>
      <anchor>a43</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrAcceptance</name>
    <filename>class_tr_acceptance.html</filename>
    <base>AlgTool</base>
    <base virtualness="virtual">ITrReconstructible</base>
    <member kind="typedef">
      <type>IAssociator&lt; MCParticle, MCHit &gt;</type>
      <name>MCHitAsct</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IAssociator&lt; MCParticle, MCVeloHit &gt;</type>
      <name>MCVeloHitAsct</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TrAcceptance</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrAcceptance</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasVelo</name>
      <anchor>a3</anchor>
      <arglist>(MCParticle *mcPart)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasTT1</name>
      <anchor>a4</anchor>
      <arglist>(MCParticle *mcPart)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasSeed</name>
      <anchor>a5</anchor>
      <arglist>(MCParticle *mcPart)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasVeloAndSeed</name>
      <anchor>a6</anchor>
      <arglist>(MCParticle *mcPart)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrackSelector</name>
    <filename>class_track_selector.html</filename>
    <base>AlgTool</base>
    <base virtualness="virtual">ITrackSelector</base>
    <member kind="enumeration">
      <name>ETrackType</name>
      <anchor>w7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>unknown</name>
      <anchor>w7w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>velo</name>
      <anchor>w7w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>seed</name>
      <anchor>w7w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>longtrack</name>
      <anchor>w7w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>upstream</name>
      <anchor>w7w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>downstream</name>
      <anchor>w7w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>veloBack</name>
      <anchor>w7w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TrackSelector</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrackSelector</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>select</name>
      <anchor>a4</anchor>
      <arglist>(TrFitTrack *track) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>selectTrackType</name>
      <anchor>a5</anchor>
      <arglist>(TrFitTrack *track) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>select</name>
      <anchor>a6</anchor>
      <arglist>(MCParticle *mcParticle)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>selectTrackType</name>
      <anchor>a7</anchor>
      <arglist>(MCParticle *mcParticle)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTrackType</name>
      <anchor>a8</anchor>
      <arglist>(TrFitTrack *track) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTrackType</name>
      <anchor>a9</anchor>
      <arglist>(MCParticle *mcPart)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>setTrackType</name>
      <anchor>a10</anchor>
      <arglist>(const int tracktype, TrFitTrack *&amp;track) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>setTrackType</name>
      <anchor>a11</anchor>
      <arglist>(MCParticle *mcPart, TrFitTrack *&amp;track)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrAnalyse</name>
    <filename>class_tr_analyse.html</filename>
    <base>Algorithm</base>
    <member kind="typedef">
      <type>ITCluster2MCParticleAsct::IAsct</type>
      <name>ITClusAsct</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OTTime2MCParticleAsct::IAsct</type>
      <name>OTTimAsct</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VeloCluster2MCParticleAsct::IAsct</type>
      <name>VeClusAsct</name>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IAssociatorWeighted&lt; TrFitTrack, MCParticle, double &gt;</type>
      <name>TrAsct</name>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TrAnalyse</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrAnalyse</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printMCParticle</name>
      <anchor>a5</anchor>
      <arglist>(MsgStream &amp;log, MCParticle *myMCPart)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printTrack</name>
      <anchor>a6</anchor>
      <arglist>(MsgStream &amp;log, MCParticle *myMCPart, TrFitTrack *tr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printDecayHistory</name>
      <anchor>a7</anchor>
      <arglist>(MsgStream &amp;log, MCParticle *myMCPart)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TYPE *</type>
      <name>get</name>
      <anchor>b0</anchor>
      <arglist>(const std::string &amp;location, const TYPE *) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TYPE *</type>
      <name>getIf</name>
      <anchor>b1</anchor>
      <arglist>(const std::string &amp;location, const TYPE *) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrChecker</name>
    <filename>class_tr_checker.html</filename>
    <base>Algorithm</base>
    <member kind="function">
      <type></type>
      <name>TrChecker</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrChecker</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrCheckSeeds</name>
    <filename>class_tr_check_seeds.html</filename>
    <base>TrAlgorithm</base>
    <member kind="function">
      <type></type>
      <name>TrCheckSeeds</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrCheckSeeds</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrChi2Calculator</name>
    <filename>class_tr_chi2_calculator.html</filename>
    <base>AlgTool</base>
    <base virtualness="virtual">ITrChi2Calculator</base>
    <member kind="function">
      <type></type>
      <name>TrChi2Calculator</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrChi2Calculator</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>calculateChi2</name>
      <anchor>a2</anchor>
      <arglist>(const HepVector &amp;trackVector1, const HepSymMatrix &amp;trackCov1, const HepVector &amp;trackVector2, const HepSymMatrix &amp;trackCov2, double &amp;chi2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrChi2OutlierKiller</name>
    <filename>class_tr_chi2_outlier_killer.html</filename>
    <base>AlgTool</base>
    <base virtualness="virtual">ITrOutlierKiller</base>
    <member kind="function">
      <type></type>
      <name>TrChi2OutlierKiller</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrChi2OutlierKiller</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>killOutliers</name>
      <anchor>a2</anchor>
      <arglist>(TrFitTrack *track) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrCounter</name>
    <filename>class_tr_counter.html</filename>
    <member kind="typedef">
      <type>IAssociatorWeighted&lt; TrFitTrack, MCParticle, double &gt;</type>
      <name>TrAsct</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TrCounter</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TrCounter</name>
      <anchor>a1</anchor>
      <arglist>(Algorithm *alg, std::string name, std::string inputContainer, std::string associator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrCounter</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUnique</name>
      <anchor>a3</anchor>
      <arglist>(unsigned int mask)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxKhi2</name>
      <anchor>a4</anchor>
      <arglist>(double khi2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>hasTrack</name>
      <anchor>a5</anchor>
      <arglist>(unsigned int MCNum)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>trackNumber</name>
      <anchor>a6</anchor>
      <arglist>(unsigned int MCNum)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nEventOK</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nEventGhost</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initEvent</name>
      <anchor>a9</anchor>
      <arglist>(MsgStream &amp;log, unsigned int size, Algorithm *alg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>count</name>
      <anchor>a10</anchor>
      <arglist>(unsigned int num, std::vector&lt; bool &gt; flags)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printEvent</name>
      <anchor>a11</anchor>
      <arglist>(MsgStream &amp;log)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printStat</name>
      <anchor>a12</anchor>
      <arglist>(MsgStream &amp;log)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrEventTracksFitter</name>
    <filename>class_tr_event_tracks_fitter.html</filename>
    <base>GaudiAlgorithm</base>
    <member kind="function">
      <type></type>
      <name>TrEventTracksFitter</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrEventTracksFitter</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrFastParabolicExtrapolator</name>
    <filename>class_tr_fast_parabolic_extrapolator.html</filename>
    <base>TrParabolicExtrapolator</base>
    <member kind="function">
      <type></type>
      <name>TrFastParabolicExtrapolator</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrFastParabolicExtrapolator</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrFirstCleverExtrapolator</name>
    <filename>class_tr_first_clever_extrapolator.html</filename>
    <base>GaudiTool</base>
    <base virtualness="virtual">ITrExtrapolator</base>
    <member kind="function">
      <type></type>
      <name>TrFirstCleverExtrapolator</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrFirstCleverExtrapolator</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>propagate</name>
      <anchor>a3</anchor>
      <arglist>(TrStateL *lState, double zNew=0, ParticleID partId=ParticleID(211))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>propagate</name>
      <anchor>a4</anchor>
      <arglist>(TrStateP *pState, double zNew=0, ParticleID partId=ParticleID(211))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const HepMatrix &amp;</type>
      <name>transportMatrix</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrFit2StoredTrackCnv</name>
    <filename>class_tr_fit2_stored_track_cnv.html</filename>
    <base>Algorithm</base>
    <member kind="function">
      <type></type>
      <name>TrFit2StoredTrackCnv</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrFit2StoredTrackCnv</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrFitAtAllPoints</name>
    <filename>class_tr_fit_at_all_points.html</filename>
    <base>GaudiTool</base>
    <base virtualness="virtual">ITrFitter</base>
    <member kind="function">
      <type></type>
      <name>TrFitAtAllPoints</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrFitAtAllPoints</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>fitDownstream</name>
      <anchor>a2</anchor>
      <arglist>(TrTrack *track, TrTrack::const_measure_iterator firstM, TrTrack::const_measure_iterator lastM)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>fitUpstream</name>
      <anchor>a3</anchor>
      <arglist>(TrTrack *track, TrTrack::const_reverse_measure_iterator firstM, TrTrack::const_reverse_measure_iterator lastM)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrFitToVertex</name>
    <filename>class_tr_fit_to_vertex.html</filename>
    <base>GaudiTool</base>
    <base virtualness="virtual">ITrFitter</base>
    <member kind="function">
      <type></type>
      <name>TrFitToVertex</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrFitToVertex</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>fitDownstream</name>
      <anchor>a3</anchor>
      <arglist>(TrTrack *track, TrTrack::const_measure_iterator firstM, TrTrack::const_measure_iterator lastM)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>fitUpstream</name>
      <anchor>a4</anchor>
      <arglist>(TrTrack *track, TrTrack::const_reverse_measure_iterator firstM, TrTrack::const_reverse_measure_iterator lastM)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrFitTrack</name>
    <filename>class_tr_fit_track.html</filename>
    <base>TrTrack</base>
    <member kind="function">
      <type></type>
      <name>TrFitTrack</name>
      <anchor>a0</anchor>
      <arglist>(const TrFitTrack &amp;track)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TrFitTrack</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TrFitTrack</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const CLID &amp;</type>
      <name>clID</name>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>fillStream</name>
      <anchor>a4</anchor>
      <arglist>(std::ostream &amp;s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TrTrack *</type>
      <name>clone</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchor>a6</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TrTrack::const_measure_iterator</type>
      <name>find</name>
      <anchor>a8</anchor>
      <arglist>(const TrMeasurement *meas) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasOn</name>
      <anchor>a9</anchor>
      <arglist>(const TrMeasurement *meas) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>nMeasEqual</name>
      <anchor>a10</anchor>
      <arglist>(TrTrack *track) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>nHitEqual</name>
      <anchor>a11</anchor>
      <arglist>(TrTrack *track) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>nVeloMeasEqual</name>
      <anchor>a12</anchor>
      <arglist>(TrTrack *track) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>nSeedHitEqual</name>
      <anchor>a13</anchor>
      <arglist>(TrTrack *track) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>nMeasEqualOfType</name>
      <anchor>a14</anchor>
      <arglist>(const TrMeasurement::EMeasType &amp;measType, TrTrack *track) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>nMeasurements</name>
      <anchor>a15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>numStereoHits</name>
      <anchor>a16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>numXHits</name>
      <anchor>a17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>nMeasurements</name>
      <anchor>a18</anchor>
      <arglist>(TrMeasurement::EMeasType measType) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>nMeasurementsBefore</name>
      <anchor>a19</anchor>
      <arglist>(double z) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>nMeasurementsAfter</name>
      <anchor>a20</anchor>
      <arglist>(double z) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TrTrack::const_measure_iterator</type>
      <name>beginM</name>
      <anchor>a21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TrTrack::const_measure_iterator</type>
      <name>endM</name>
      <anchor>a22</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TrTrack::const_reverse_measure_iterator</type>
      <name>rbeginM</name>
      <anchor>a23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TrTrack::const_reverse_measure_iterator</type>
      <name>rendM</name>
      <anchor>a24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TrTrack::measure_iterator</type>
      <name>beginMeas</name>
      <anchor>a25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TrTrack::measure_iterator</type>
      <name>endMeas</name>
      <anchor>a26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addMeasurement</name>
      <anchor>a27</anchor>
      <arglist>(TrMeasurement *measure)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TrTrack::measure_iterator</type>
      <name>deleteMeasurement</name>
      <anchor>a28</anchor>
      <arglist>(TrTrack::measure_iterator &amp;iHit)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sortMeasurements</name>
      <anchor>a29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>nStates</name>
      <anchor>a30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TrTrack::const_state_iterator</type>
      <name>beginS</name>
      <anchor>a31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TrTrack::const_state_iterator</type>
      <name>endS</name>
      <anchor>a32</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TrTrack::state_iterator</type>
      <name>beginState</name>
      <anchor>a33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TrTrack::state_iterator</type>
      <name>endState</name>
      <anchor>a34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addState</name>
      <anchor>a35</anchor>
      <arglist>(TrState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TrTrack::state_iterator</type>
      <name>deleteState</name>
      <anchor>a36</anchor>
      <arglist>(TrTrack::state_iterator &amp;iState)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TrState *</type>
      <name>closestState</name>
      <anchor>a37</anchor>
      <arglist>(double zpos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>lastChi2</name>
      <anchor>a38</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isLong</name>
      <anchor>a39</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isUpstream</name>
      <anchor>a40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isDownstream</name>
      <anchor>a41</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isVelotrack</name>
      <anchor>a42</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isBackward</name>
      <anchor>a43</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isTtrack</name>
      <anchor>a44</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; TrMeasurement * &gt; &amp;</type>
      <name>measurements</name>
      <anchor>a45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; TrMeasurement * &gt; &amp;</type>
      <name>measurements</name>
      <anchor>a46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMeasurements</name>
      <anchor>a47</anchor>
      <arglist>(const std::vector&lt; TrMeasurement * &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; TrState * &gt; &amp;</type>
      <name>states</name>
      <anchor>a48</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; TrState * &gt; &amp;</type>
      <name>states</name>
      <anchor>a49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStates</name>
      <anchor>a50</anchor>
      <arglist>(const std::vector&lt; TrState * &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>charge</name>
      <anchor>a51</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCharge</name>
      <anchor>a52</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>errorFlag</name>
      <anchor>a53</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setErrorFlag</name>
      <anchor>a54</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>history</name>
      <anchor>a55</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHistory</name>
      <anchor>a56</anchor>
      <arglist>(unsigned int value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unique</name>
      <anchor>a57</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUnique</name>
      <anchor>a58</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>velo</name>
      <anchor>a59</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVelo</name>
      <anchor>a60</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>seed</name>
      <anchor>a61</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSeed</name>
      <anchor>a62</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>match</name>
      <anchor>a63</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMatch</name>
      <anchor>a64</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>forward</name>
      <anchor>a65</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setForward</name>
      <anchor>a66</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>follow</name>
      <anchor>a67</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFollow</name>
      <anchor>a68</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>veloTT</name>
      <anchor>a69</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVeloTT</name>
      <anchor>a70</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>veloBack</name>
      <anchor>a71</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVeloBack</name>
      <anchor>a72</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ksTrack</name>
      <anchor>a73</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setKsTrack</name>
      <anchor>a74</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const CLID &amp;</type>
      <name>classID</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>n0</anchor>
      <arglist>(std::ostream &amp;str, const TrFitTrack &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrFitTrackMCTruthAlg</name>
    <filename>class_tr_fit_track_m_c_truth_alg.html</filename>
    <base>Algorithm</base>
    <member kind="typedef">
      <type>ITCluster2MCParticleAsct::IAsct</type>
      <name>ITClusAsct</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OTTime2MCParticleAsct::IAsct</type>
      <name>OTTimAsct</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VeloCluster2MCParticleAsct::IAsct</type>
      <name>VeloClusAsct</name>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TrFitTrackMCTruthAlg</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrFitTrackMCTruthAlg</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>countMCPart</name>
      <anchor>b0</anchor>
      <arglist>(const MCParticle *part, double incVelo, double incTT1, double incSeed)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>AlgFactory&lt;TrFitTrackMCTruthAlg&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrgContainer</name>
    <filename>class_trg_container.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>TrgContainer</name>
      <anchor>a0</anchor>
      <arglist>(int n=50)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TrgContainer</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>nextAvailable</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; T * &gt;::const_iterator</type>
      <name>begin</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; T * &gt;::const_iterator</type>
      <name>end</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; T * &gt;</type>
      <name>m_vector</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_size</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; T * &gt;::const_iterator</type>
      <name>m_it</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrgDataProvider</name>
    <filename>class_trg_data_provider.html</filename>
    <base>GaudiTool</base>
    <member kind="function">
      <type></type>
      <name>TrgDataProvider</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrgDataProvider</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TrgTrackContainer *</type>
      <name>createTrackContainer</name>
      <anchor>a2</anchor>
      <arglist>(const std::string &amp;myName, int nsize)</arglist>
    </member>
    <member kind="function">
      <type>TrgTrackContainer *</type>
      <name>tracks</name>
      <anchor>a3</anchor>
      <arglist>(const std::string &amp;myName)</arglist>
    </member>
    <member kind="function">
      <type>const TrgTrackContainer *</type>
      <name>tracks</name>
      <anchor>a4</anchor>
      <arglist>(const std::string &amp;myName) const </arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, TrgTrackContainer * &gt;::iterator</type>
      <name>beginTracks</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, TrgTrackContainer * &gt;::iterator</type>
      <name>endTracks</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TrgVertexContainer *</type>
      <name>createVertexContainer</name>
      <anchor>a7</anchor>
      <arglist>(const std::string &amp;myName, int nsize)</arglist>
    </member>
    <member kind="function">
      <type>TrgVertexContainer *</type>
      <name>vertices</name>
      <anchor>a8</anchor>
      <arglist>(const std::string &amp;myName)</arglist>
    </member>
    <member kind="function">
      <type>const TrgVertexContainer *</type>
      <name>vertices</name>
      <anchor>a9</anchor>
      <arglist>(const std::string &amp;myName) const </arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, TrgVertexContainer * &gt;::iterator</type>
      <name>beginVertices</name>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, TrgVertexContainer * &gt;::iterator</type>
      <name>endVertices</name>
      <anchor>a11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>L1Event *</type>
      <name>l1Event</name>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setL1Event</name>
      <anchor>a13</anchor>
      <arglist>(L1Event *pt)</arglist>
    </member>
    <member kind="function">
      <type>L1Score *</type>
      <name>l1Score</name>
      <anchor>a14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setL1Score</name>
      <anchor>a15</anchor>
      <arglist>(L1Score *pt)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const InterfaceID &amp;</type>
      <name>interfaceID</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrgInitEvent</name>
    <filename>class_trg_init_event.html</filename>
    <base>GaudiAlgorithm</base>
    <member kind="function">
      <type></type>
      <name>TrgInitEvent</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrgInitEvent</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrgL0Filter</name>
    <filename>class_trg_l0_filter.html</filename>
    <base>GaudiAlgorithm</base>
    <member kind="function">
      <type></type>
      <name>TrgL0Filter</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrgL0Filter</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrgL0MuonProvider</name>
    <filename>class_trg_l0_muon_provider.html</filename>
    <base>GaudiTool</base>
    <member kind="function">
      <type></type>
      <name>TrgL0MuonProvider</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrgL0MuonProvider</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TrgL0MuonContainer *</type>
      <name>createContainer</name>
      <anchor>a2</anchor>
      <arglist>(const std::string &amp;myName, int nsize)</arglist>
    </member>
    <member kind="function">
      <type>TrgL0MuonContainer *</type>
      <name>container</name>
      <anchor>a3</anchor>
      <arglist>(const std::string &amp;myName)</arglist>
    </member>
    <member kind="function">
      <type>const TrgL0MuonContainer *</type>
      <name>container</name>
      <anchor>a4</anchor>
      <arglist>(const std::string &amp;myName) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exist</name>
      <anchor>a5</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, TrgL0MuonContainer * &gt;::iterator</type>
      <name>begin</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, TrgL0MuonContainer * &gt;::iterator</type>
      <name>end</name>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const InterfaceID &amp;</type>
      <name>interfaceID</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrgL1Filter</name>
    <filename>class_trg_l1_filter.html</filename>
    <base>GaudiAlgorithm</base>
    <member kind="function">
      <type></type>
      <name>TrgL1Filter</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrgL1Filter</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrgMCReconstructed</name>
    <filename>class_trg_m_c_reconstructed.html</filename>
    <base>GaudiTool</base>
    <base virtualness="virtual">IMCEffReconstructed</base>
    <member kind="function">
      <type></type>
      <name>TrgMCReconstructed</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrgMCReconstructed</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>reconstructed</name>
      <anchor>a2</anchor>
      <arglist>(MCParticle *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrgParticleMaker</name>
    <filename>class_trg_particle_maker.html</filename>
    <base>GaudiAlgorithm</base>
    <member kind="function">
      <type></type>
      <name>TrgParticleMaker</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrgParticleMaker</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>makeParticle</name>
      <anchor>b0</anchor>
      <arglist>(TrgTrack *tr, Particle *part, int partID, double mass)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>makeNeutralParticle</name>
      <anchor>b1</anchor>
      <arglist>(const TrgCaloParticle *trp, Particle *part)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrgTimeCounter</name>
    <filename>class_trg_time_counter.html</filename>
    <member kind="function">
      <type></type>
      <name>TrgTimeCounter</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TrgTimeCounter</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>stop</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MsgStream &amp;</type>
      <name>fillStream</name>
      <anchor>a4</anchor>
      <arglist>(MsgStream &amp;s) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrgTrackToContainer</name>
    <filename>class_trg_track_to_container.html</filename>
    <base>GaudiAlgorithm</base>
    <member kind="function">
      <type></type>
      <name>TrgTrackToContainer</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrgTrackToContainer</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrgVeloDataHolder</name>
    <filename>class_trg_velo_data_holder.html</filename>
    <base>GaudiTool</base>
    <member kind="function">
      <type></type>
      <name>TrgVeloDataHolder</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrgVeloDataHolder</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; VeloCoord * &gt; &amp;</type>
      <name>coords</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>setGeometry</name>
      <anchor>a4</anchor>
      <arglist>(DeVelo *velo)</arglist>
    </member>
    <member kind="function">
      <type>VeloCoord *</type>
      <name>newVeloCoord</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VeloSector *</type>
      <name>sectorPointer</name>
      <anchor>a6</anchor>
      <arglist>(int sensor, int sector)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const InterfaceID &amp;</type>
      <name>interfaceID</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrHerabExtrapolator</name>
    <filename>class_tr_herab_extrapolator.html</filename>
    <base>GaudiTool</base>
    <base virtualness="virtual">ITrExtrapolator</base>
    <member kind="function">
      <type></type>
      <name>TrHerabExtrapolator</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrHerabExtrapolator</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>propagate</name>
      <anchor>a3</anchor>
      <arglist>(TrStateL *lState, double zNew=0, ParticleID partId=ParticleID(211))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>propagate</name>
      <anchor>a4</anchor>
      <arglist>(TrStateP *pState, double zNew=0, ParticleID partId=ParticleID(211))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const HepMatrix &amp;</type>
      <name>transportMatrix</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrKalmanFilter</name>
    <filename>class_tr_kalman_filter.html</filename>
    <base>GaudiTool</base>
    <base virtualness="virtual">ITrFilter</base>
    <member kind="function">
      <type></type>
      <name>TrKalmanFilter</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrKalmanFilter</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>filter</name>
      <anchor>a2</anchor>
      <arglist>(TrState *state, TrMeasurement *measure)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrKalmanSmoother</name>
    <filename>class_tr_kalman_smoother.html</filename>
    <base>GaudiTool</base>
    <base virtualness="virtual">ITrSmoother</base>
    <member kind="function">
      <type></type>
      <name>TrKalmanSmoother</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrKalmanSmoother</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>smooth</name>
      <anchor>a2</anchor>
      <arglist>(TrNode *thisNode, TrNode *previousNode)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrLinearExtrapolator</name>
    <filename>class_tr_linear_extrapolator.html</filename>
    <base>GaudiTool</base>
    <base virtualness="virtual">ITrExtrapolator</base>
    <member kind="function">
      <type></type>
      <name>TrLinearExtrapolator</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrLinearExtrapolator</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>propagate</name>
      <anchor>a2</anchor>
      <arglist>(TrStateL *lState, double zNew=0, ParticleID partId=ParticleID(211))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>propagate</name>
      <anchor>a3</anchor>
      <arglist>(TrStateP *pState, double zNew=0, ParticleID partId=ParticleID(211))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const HepMatrix &amp;</type>
      <name>transportMatrix</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrMatch</name>
    <filename>class_tr_match.html</filename>
    <base>KeyedObject&lt; int &gt;</base>
    <member kind="function">
      <type></type>
      <name>TrMatch</name>
      <anchor>a0</anchor>
      <arglist>(TrFitTrack *veloTrack, TrFitTrack *seedTrack, double chi2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TrMatch</name>
      <anchor>a1</anchor>
      <arglist>(TrFitTrack *veloTrack, TrFitTrack *seedTrack, double chi2, std::vector&lt; ITCluster * &gt; ttClusters)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TrMatch</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrMatch</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVeloTrack</name>
      <anchor>a4</anchor>
      <arglist>(TrFitTrack *veloTrack)</arglist>
    </member>
    <member kind="function">
      <type>const TrFitTrack *</type>
      <name>veloTrack</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSeedTrack</name>
      <anchor>a6</anchor>
      <arglist>(TrFitTrack *seedTrack)</arglist>
    </member>
    <member kind="function">
      <type>const TrFitTrack *</type>
      <name>seedTrack</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setChi2</name>
      <anchor>a8</anchor>
      <arglist>(double chi2)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>chi2</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; ITCluster * &gt; &amp;</type>
      <name>ttClusters</name>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numTTClusters</name>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTTClusters</name>
      <anchor>a12</anchor>
      <arglist>(const std::vector&lt; ITCluster * &gt; &amp;ttClusters)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTTCluster</name>
      <anchor>a13</anchor>
      <arglist>(ITCluster *cluster)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>ttChi2s</name>
      <anchor>a14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTTChi2s</name>
      <anchor>a15</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;ttChi2s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTTChi2</name>
      <anchor>a16</anchor>
      <arglist>(double chi2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>fillStream</name>
      <anchor>a17</anchor>
      <arglist>(std::ostream &amp;s) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrMatchChecker</name>
    <filename>class_tr_match_checker.html</filename>
    <base>Algorithm</base>
    <member kind="function">
      <type></type>
      <name>TrMatchChecker</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrMatchChecker</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrMatchVeloSeed</name>
    <filename>class_tr_match_velo_seed.html</filename>
    <base>Algorithm</base>
    <member kind="function">
      <type></type>
      <name>TrMatchVeloSeed</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrMatchVeloSeed</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrMeasInfo</name>
    <filename>class_tr_meas_info.html</filename>
    <member kind="function">
      <type></type>
      <name>TrMeasInfo</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TrMeasInfo</type>
      <name>ExtractMeasInfo</name>
      <anchor>e0</anchor>
      <arglist>(TrMeasInfo measInfo, const TrMeasurement *tMeas)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>fNOTMeas</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>fNITMeas</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>fNStMeas</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>fNXMeas</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>fNVeloMeas</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>fNVeloRMeas</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>fNVeloPhiMeas</name>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const OTClusterOnTrack *</type>
      <name>fFirstOTMeas</name>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ITClusterOnTrack *</type>
      <name>fFirstITMeas</name>
      <anchor>o8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrMonitor</name>
    <filename>class_tr_monitor.html</filename>
    <base>Algorithm</base>
    <member kind="function">
      <type></type>
      <name>TrMonitor</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrMonitor</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrNode</name>
    <filename>class_tr_node.html</filename>
    <member kind="function">
      <type></type>
      <name>TrNode</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TrNode</name>
      <anchor>a1</anchor>
      <arglist>(TrMeasurement *aHit)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrNode</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>fillStream</name>
      <anchor>a3</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>TrMeasurement *</type>
      <name>measurementOnTrack</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const HepMatrix &amp;</type>
      <name>transportMatrix</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const HepVector &amp;</type>
      <name>transportVector</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const HepSymMatrix &amp;</type>
      <name>noiseMatrix</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransportMatrix</name>
      <anchor>a8</anchor>
      <arglist>(HepMatrix transportMatrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransportVector</name>
      <anchor>a9</anchor>
      <arglist>(const HepVector &amp;transportVector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNoiseMatrix</name>
      <anchor>a10</anchor>
      <arglist>(const HepSymMatrix &amp;noiseMatrix)</arglist>
    </member>
    <member kind="function">
      <type>TrState *</type>
      <name>predictedState</name>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPredictedState</name>
      <anchor>a12</anchor>
      <arglist>(TrState *predictedState)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updatePredictedState</name>
      <anchor>a13</anchor>
      <arglist>(TrState *predictedState)</arglist>
    </member>
    <member kind="function">
      <type>TrState *</type>
      <name>filteredState</name>
      <anchor>a14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFilteredState</name>
      <anchor>a15</anchor>
      <arglist>(TrState *filteredState)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateFilteredState</name>
      <anchor>a16</anchor>
      <arglist>(TrState *filteredState)</arglist>
    </member>
    <member kind="function">
      <type>TrState *</type>
      <name>bestState</name>
      <anchor>a17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBestState</name>
      <anchor>a18</anchor>
      <arglist>(TrState *bestState)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateBestState</name>
      <anchor>a19</anchor>
      <arglist>(TrState *state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addNode</name>
      <anchor>a20</anchor>
      <arglist>(TrNode *node)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>z</name>
      <anchor>a21</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrParabolicExtrapolator</name>
    <filename>class_tr_parabolic_extrapolator.html</filename>
    <base>GaudiTool</base>
    <base virtualness="virtual">ITrExtrapolator</base>
    <member kind="function">
      <type></type>
      <name>TrParabolicExtrapolator</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrParabolicExtrapolator</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>propagate</name>
      <anchor>a3</anchor>
      <arglist>(TrStateL *lState, double zNew=0, ParticleID partId=ParticleID(211))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>propagate</name>
      <anchor>a4</anchor>
      <arglist>(TrStateP *pState, double zNew=0, ParticleID partId=ParticleID(211))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const HepMatrix &amp;</type>
      <name>transportMatrix</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateTransportMatrix</name>
      <anchor>b0</anchor>
      <arglist>(const double dz, TrStateP *pState)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_ax</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HepMatrix</type>
      <name>m_F</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrPrepareVelo</name>
    <filename>class_tr_prepare_velo.html</filename>
    <base>Algorithm</base>
    <member kind="function">
      <type></type>
      <name>TrPrepareVelo</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrPrepareVelo</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrPtKick</name>
    <filename>class_tr_pt_kick.html</filename>
    <base>AlgTool</base>
    <base virtualness="virtual">ITrPtKick</base>
    <member kind="function">
      <type></type>
      <name>TrPtKick</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrPtKick</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>finalize</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>calculate</name>
      <anchor>a4</anchor>
      <arglist>(TrStateP *pState) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrSeedEvent</name>
    <filename>class_tr_seed_event.html</filename>
    <base>Algorithm</base>
    <member kind="function">
      <type></type>
      <name>TrSeedEvent</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrSeedEvent</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrStored2FitTrackCnv</name>
    <filename>class_tr_stored2_fit_track_cnv.html</filename>
    <base>Algorithm</base>
    <member kind="function">
      <type></type>
      <name>TrStored2FitTrackCnv</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrStored2FitTrackCnv</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrTrack</name>
    <filename>class_tr_track.html</filename>
    <base>KeyedObject&lt; int &gt;</base>
    <member kind="typedef">
      <type>std::vector&lt; TrMeasurement * &gt;</type>
      <name>TrMeasurements</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TrMeasurements::const_iterator</type>
      <name>const_measure_iterator</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TrMeasurements::const_reverse_iterator</type>
      <name>const_reverse_measure_iterator</name>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TrMeasurements::iterator</type>
      <name>measure_iterator</name>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TrMeasurements::reverse_iterator</type>
      <name>reverse_measure_iterator</name>
      <anchor>w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; TrState * &gt;</type>
      <name>TrStateVec</name>
      <anchor>w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TrStateVec::const_iterator</type>
      <name>const_state_iterator</name>
      <anchor>w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TrStateVec::const_iterator</type>
      <name>const_reverse_state_iterator</name>
      <anchor>w7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TrStateVec::iterator</type>
      <name>state_iterator</name>
      <anchor>w8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TrStateVec::iterator</type>
      <name>reverse_state_iterator</name>
      <anchor>w9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TrTrack</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrTrack</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>fillStream</name>
      <anchor>a2</anchor>
      <arglist>(std::ostream &amp;s) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TrTrack *</type>
      <name>clone</name>
      <anchor>a3</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Print</name>
      <anchor>a4</anchor>
      <arglist>(std::ostream &amp;os) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TrTrack::const_measure_iterator</type>
      <name>find</name>
      <anchor>a5</anchor>
      <arglist>(const TrMeasurement *meas) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Print</name>
      <anchor>a6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>nMeasurements</name>
      <anchor>a7</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const_measure_iterator</type>
      <name>beginM</name>
      <anchor>a8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const_measure_iterator</type>
      <name>endM</name>
      <anchor>a9</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const_reverse_measure_iterator</type>
      <name>rbeginM</name>
      <anchor>a10</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const_reverse_measure_iterator</type>
      <name>rendM</name>
      <anchor>a11</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual measure_iterator</type>
      <name>beginMeas</name>
      <anchor>a12</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual measure_iterator</type>
      <name>endMeas</name>
      <anchor>a13</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addMeasurement</name>
      <anchor>a14</anchor>
      <arglist>(TrMeasurement *measure)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual measure_iterator</type>
      <name>deleteMeasurement</name>
      <anchor>a15</anchor>
      <arglist>(measure_iterator &amp;iHit)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>numStereoHits</name>
      <anchor>a16</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>numXHits</name>
      <anchor>a17</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>nMeasurements</name>
      <anchor>a18</anchor>
      <arglist>(TrMeasurement::EMeasType measType) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>nStates</name>
      <anchor>a19</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const_state_iterator</type>
      <name>beginS</name>
      <anchor>a20</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const_state_iterator</type>
      <name>endS</name>
      <anchor>a21</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TrState *</type>
      <name>closestState</name>
      <anchor>a22</anchor>
      <arglist>(double zpos) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addState</name>
      <anchor>a23</anchor>
      <arglist>(TrState *state)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>charge</name>
      <anchor>a24</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setCharge</name>
      <anchor>a25</anchor>
      <arglist>(double value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>errorFlag</name>
      <anchor>a26</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setErrorFlag</name>
      <anchor>a27</anchor>
      <arglist>(int value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>lastChi2</name>
      <anchor>a28</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>sortMeasurements</name>
      <anchor>a29</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>n0</anchor>
      <arglist>(std::ostream &amp;str, const TrTrack &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrTrackCloneKiller</name>
    <filename>class_tr_track_clone_killer.html</filename>
    <base>Algorithm</base>
    <member kind="function">
      <type></type>
      <name>TrTrackCloneKiller</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrTrackCloneKiller</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrTracksCleaner</name>
    <filename>class_tr_tracks_cleaner.html</filename>
    <base>TrAlgorithm</base>
    <member kind="function">
      <type></type>
      <name>TrTracksCleaner</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrTracksCleaner</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrTransportStep</name>
    <filename>class_tr_transport_step.html</filename>
    <member kind="function">
      <type></type>
      <name>TrTransportStep</name>
      <anchor>a0</anchor>
      <arglist>(ITrExtrapolator *extrapolator, double zStop)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TrTransportStep</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ITrExtrapolator *</type>
      <name>extrapolator</name>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>z</name>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrTT1Counter</name>
    <filename>class_tr_t_t1_counter.html</filename>
    <member kind="function">
      <type></type>
      <name>TrTT1Counter</name>
      <anchor>a0</anchor>
      <arglist>(std::string name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrTT1Counter</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchor>a2</anchor>
      <arglist>(int nbMC, int nbHit, int nbOK)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printStat</name>
      <anchor>a3</anchor>
      <arglist>(MsgStream &amp;log)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrTupleChecker</name>
    <filename>class_tr_tuple_checker.html</filename>
    <base>Algorithm</base>
    <member kind="function">
      <type></type>
      <name>TrTupleChecker</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrTupleChecker</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrueStateCreator</name>
    <filename>class_true_state_creator.html</filename>
    <base>AlgTool</base>
    <base virtualness="virtual">ITrStateCreator</base>
    <member kind="typedef">
      <type>IAssociator&lt; MCParticle, MCHit &gt;</type>
      <name>MCHitAsct</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IAssociator&lt; MCParticle, MCVeloHit &gt;</type>
      <name>MCVeloHitAsct</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TrueStateCreator</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IInterface *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrueStateCreator</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>createState</name>
      <anchor>a3</anchor>
      <arglist>(const MCParticle *mcPart, double zRec, TrState *&amp;pState) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>createStateVertex</name>
      <anchor>a4</anchor>
      <arglist>(const MCParticle *mcPart, TrState *&amp;pState) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrueTracksCreator</name>
    <filename>class_true_tracks_creator.html</filename>
    <base>Algorithm</base>
    <member kind="function">
      <type></type>
      <name>TrueTracksCreator</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *svcloc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrueTracksCreator</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TTCandidate</name>
    <filename>class_t_t_candidate.html</filename>
    <base>KeyedObject&lt; int &gt;</base>
    <member kind="function">
      <type></type>
      <name>TTCandidate</name>
      <anchor>a0</anchor>
      <arglist>(ITCluster *cluster, double distance, unsigned int lastLayer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TTCandidate</name>
      <anchor>a1</anchor>
      <arglist>(TTCandidate *candidate, ITCluster *cluster, double distance, unsigned int lastLayer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TTCandidate</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TTCandidate</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; ITCluster * &gt; &amp;</type>
      <name>ttClusters</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numTTClusters</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>distances</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>spread</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>lastDistance</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>averageDistance</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDead</name>
      <anchor>a10</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDead</name>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>lastLayer</name>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>fillStream</name>
      <anchor>a13</anchor>
      <arglist>(std::ostream &amp;s) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VeloCoord</name>
    <filename>class_velo_coord.html</filename>
    <member kind="function">
      <type></type>
      <name>VeloCoord</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VeloCoord</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCoord</name>
      <anchor>a2</anchor>
      <arglist>(int sens, int sect, double z, double signal, double coord, double error, VeloChannelID channelID, int size)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sensor</name>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sector</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>z</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>signal</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>coord</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>VeloChannelID</type>
      <name>channelID</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>used</name>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUsed</name>
      <anchor>a12</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRadiusAndPhi</name>
      <anchor>a13</anchor>
      <arglist>(double r, double phi)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>radius</name>
      <anchor>a14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>phi</name>
      <anchor>a15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cosPhi</name>
      <anchor>a16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sinPhi</name>
      <anchor>a17</anchor>
      <arglist>() const </arglist>
    </member>
    <class kind="class">VeloCoord::decreasingByZ</class>
    <class kind="class">VeloCoord::increasingByCoordinate</class>
  </compound>
  <compound kind="class">
    <name>VeloCoord::decreasingByZ</name>
    <filename>class_velo_coord_1_1decreasing_by_z.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a0</anchor>
      <arglist>(const VeloCoord *first, const VeloCoord *second) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VeloCoord::increasingByCoordinate</name>
    <filename>class_velo_coord_1_1increasing_by_coordinate.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a0</anchor>
      <arglist>(const VeloCoord *first, const VeloCoord *second) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VeloPhiClusterOnTrack</name>
    <filename>class_velo_phi_cluster_on_track.html</filename>
    <base>TrMeasurement</base>
    <member kind="function">
      <type></type>
      <name>VeloPhiClusterOnTrack</name>
      <anchor>a0</anchor>
      <arglist>(VeloCluster *cluster, DeVelo *det)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VeloPhiClusterOnTrack</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VeloPhiClusterOnTrack</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>fillStream</name>
      <anchor>a3</anchor>
      <arglist>(std::ostream &amp;s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TrMeasurement *</type>
      <name>clone</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>lastChiSqContr</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TrMeasurement::EMeasType</type>
      <name>measType</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>z</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>distance</name>
      <anchor>a8</anchor>
      <arglist>(double x, double y) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>measure</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>measureError</name>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>measureError</name>
      <anchor>a11</anchor>
      <arglist>(double x, double y) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>measureError</name>
      <anchor>a12</anchor>
      <arglist>(const TrStateL *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>measureError</name>
      <anchor>a13</anchor>
      <arglist>(const TrStateP *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>projection</name>
      <anchor>a14</anchor>
      <arglist>(const TrStateL *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual HepVector</type>
      <name>projectionMatrix</name>
      <anchor>a15</anchor>
      <arglist>(const TrStateL *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>projection</name>
      <anchor>a16</anchor>
      <arglist>(const TrStateP *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual HepVector</type>
      <name>projectionMatrix</name>
      <anchor>a17</anchor>
      <arglist>(const TrStateP *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equal</name>
      <anchor>a18</anchor>
      <arglist>(const VeloPhiClusterOnTrack *hit) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equal</name>
      <anchor>a19</anchor>
      <arglist>(const TrMeasurement *meas) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>residual</name>
      <anchor>a20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setResidual</name>
      <anchor>a21</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>errorResidual</name>
      <anchor>a22</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setErrorResidual</name>
      <anchor>a23</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>const VeloCluster *</type>
      <name>cluster</name>
      <anchor>a24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>VeloCluster *</type>
      <name>cluster</name>
      <anchor>a25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCluster</name>
      <anchor>a26</anchor>
      <arglist>(VeloCluster *value)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>n0</anchor>
      <arglist>(std::ostream &amp;str, const VeloPhiClusterOnTrack &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VeloPhiList</name>
    <filename>class_velo_phi_list.html</filename>
    <member kind="function">
      <type></type>
      <name>VeloPhiList</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VeloPhiList</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>(double phi, VeloCoord *coord)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distSquared</name>
      <anchor>a3</anchor>
      <arglist>(double xPred, double yPred)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCloser</name>
      <anchor>a4</anchor>
      <arglist>(double xPred, double yPred, VeloCoord *coord)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExtrapolation</name>
      <anchor>a5</anchor>
      <arglist>(double z, double r, double tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveCandidate</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>phi</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; VeloCoord * &gt; &amp;</type>
      <name>coords</name>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>predX</name>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>predY</name>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>chiSq</name>
      <anchor>a12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nbUnused</name>
      <anchor>a13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchor>a14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValid</name>
      <anchor>a15</anchor>
      <arglist>(bool valid)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>posX</name>
      <anchor>a16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>slopeX</name>
      <anchor>a17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>posY</name>
      <anchor>a18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>slopeY</name>
      <anchor>a19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepVector</type>
      <name>point</name>
      <anchor>a20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HepSymMatrix</type>
      <name>covariance</name>
      <anchor>a21</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VeloRClusterOnTrack</name>
    <filename>class_velo_r_cluster_on_track.html</filename>
    <base>TrMeasurement</base>
    <member kind="function">
      <type></type>
      <name>VeloRClusterOnTrack</name>
      <anchor>a0</anchor>
      <arglist>(VeloCluster *cluster, DeVelo *det, double phi=999.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VeloRClusterOnTrack</name>
      <anchor>a1</anchor>
      <arglist>(VeloCluster *cluster, DeVelo *det, const HepVector &amp;refVec)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VeloRClusterOnTrack</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VeloRClusterOnTrack</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>fillStream</name>
      <anchor>a4</anchor>
      <arglist>(std::ostream &amp;s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TrMeasurement *</type>
      <name>clone</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRefVector</name>
      <anchor>a6</anchor>
      <arglist>(const HepVector &amp;refVec)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>lastChiSqContr</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TrMeasurement::EMeasType</type>
      <name>measType</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>z</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>measure</name>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>measureError</name>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>measureError</name>
      <anchor>a12</anchor>
      <arglist>(const TrStateL *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>measureError</name>
      <anchor>a13</anchor>
      <arglist>(const TrStateP *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>projection</name>
      <anchor>a14</anchor>
      <arglist>(const TrStateL *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual HepVector</type>
      <name>projectionMatrix</name>
      <anchor>a15</anchor>
      <arglist>(const TrStateL *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>projection</name>
      <anchor>a16</anchor>
      <arglist>(const TrStateP *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual HepVector</type>
      <name>projectionMatrix</name>
      <anchor>a17</anchor>
      <arglist>(const TrStateP *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equal</name>
      <anchor>a18</anchor>
      <arglist>(const VeloRClusterOnTrack *hit) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equal</name>
      <anchor>a19</anchor>
      <arglist>(const TrMeasurement *meas) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>residual</name>
      <anchor>a20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setResidual</name>
      <anchor>a21</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>errorResidual</name>
      <anchor>a22</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setErrorResidual</name>
      <anchor>a23</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>const VeloCluster *</type>
      <name>cluster</name>
      <anchor>a24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>VeloCluster *</type>
      <name>cluster</name>
      <anchor>a25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCluster</name>
      <anchor>a26</anchor>
      <arglist>(VeloCluster *value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPhi</name>
      <anchor>a27</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>n0</anchor>
      <arglist>(std::ostream &amp;str, const VeloRClusterOnTrack &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VeloRTracking</name>
    <filename>class_velo_r_tracking.html</filename>
    <base>GaudiAlgorithm</base>
    <member kind="function">
      <type></type>
      <name>VeloRTracking</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VeloRTracking</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VeloSector</name>
    <filename>class_velo_sector.html</filename>
    <member kind="function">
      <type></type>
      <name>VeloSector</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VeloSector</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeSector</name>
      <anchor>a2</anchor>
      <arglist>(double z, int sensor, bool isRight, bool isDownstream, int sector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetForNewEvent</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCoord</name>
      <anchor>a4</anchor>
      <arglist>(VeloCoord *newCoord)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>z</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sensor</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sector</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>VeloSector *</type>
      <name>previousRSector</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>VeloSector *</type>
      <name>nextRSector</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPreviousRSector</name>
      <anchor>a10</anchor>
      <arglist>(VeloSector *sect)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNextRSector</name>
      <anchor>a11</anchor>
      <arglist>(VeloSector *sect)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>nbCoord</name>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; VeloCoord * &gt;</type>
      <name>coords</name>
      <anchor>a13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; VeloCoord * &gt;::iterator</type>
      <name>beginCoord</name>
      <anchor>a14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; VeloCoord * &gt;::iterator</type>
      <name>endCoord</name>
      <anchor>a15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; VeloCoord * &gt;::iterator</type>
      <name>firstCoord</name>
      <anchor>a16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VeloCoord *</type>
      <name>bestCoordinate</name>
      <anchor>a17</anchor>
      <arglist>(double pred, double tol)</arglist>
    </member>
    <member kind="function">
      <type>VeloCoord *</type>
      <name>veloCoordFromChannelID</name>
      <anchor>a18</anchor>
      <arglist>(VeloChannelID &amp;id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sortCoords</name>
      <anchor>a19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPhiSectorRadius</name>
      <anchor>a20</anchor>
      <arglist>(double rMin, double rMax)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPhiSectorPhiRange</name>
      <anchor>a21</anchor>
      <arglist>(double minPhi, double maxPhi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPhiSectorStripProperties</name>
      <anchor>a22</anchor>
      <arglist>(double pitch, double tilt, double tiltRadius)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRSectorPhiRange</name>
      <anchor>a23</anchor>
      <arglist>(int sector, double minPhi, double maxPhi)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>rMin</name>
      <anchor>a24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>rMax</name>
      <anchor>a25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>phiRange</name>
      <anchor>a26</anchor>
      <arglist>(double radius, int RZone, double tol, double &amp;phiOverlapMin, double &amp;phiOverlapMax, double &amp;phiOffset)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>pitch</name>
      <anchor>a27</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VeloSpaceTracking</name>
    <filename>class_velo_space_tracking.html</filename>
    <base>GaudiAlgorithm</base>
    <member kind="function">
      <type></type>
      <name>VeloSpaceTracking</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VeloSpaceTracking</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VeloTruthFromCluster</name>
    <filename>class_velo_truth_from_cluster.html</filename>
    <base>Algorithm</base>
    <member kind="typedef">
      <type>VeloCluster2MCParticleAsct::IAsct</type>
      <name>VeloClusAsct</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VeloTruthFromCluster</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VeloTruthFromCluster</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StatusCode</type>
      <name>finalize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VeloTTFind</name>
    <filename>class_velo_t_t_find.html</filename>
    <base>Algorithm</base>
    <member kind="function">
      <type></type>
      <name>VeloTTFind</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VeloTTFind</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>finalize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VeloTTStoredChecker</name>
    <filename>class_velo_t_t_stored_checker.html</filename>
    <base>Algorithm</base>
    <member kind="function">
      <type></type>
      <name>VeloTTStoredChecker</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;name, ISvcLocator *pSvcLocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VeloTTStoredChecker</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>execute</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StatusCode</type>
      <name>finalize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MCParticle *</type>
      <name>VeloTrackMCTruth</name>
      <anchor>a5</anchor>
      <arglist>(TrStoredTrack *track)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>centerVeloTr</name>
      <anchor>a6</anchor>
      <arglist>(TrStoredTrack *)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NTuple::Item&lt; long &gt;</type>
      <name>m_eventNumber</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NTuple::Item&lt; long &gt;</type>
      <name>m_runNumber</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NTuple::Item&lt; long &gt;</type>
      <name>m_nVeloTT</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NTuple::Item&lt; long &gt;</type>
      <name>m_nVelo</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NTuple::Array&lt; long &gt;</type>
      <name>m_keyVelo</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NTuple::Array&lt; long &gt;</type>
      <name>m_idmcVelo</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NTuple::Array&lt; float &gt;</type>
      <name>m_pmcVelo</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NTuple::Array&lt; float &gt;</type>
      <name>m_qmcVelo</name>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NTuple::Array&lt; float &gt;</type>
      <name>m_ptmcVelo</name>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NTuple::Array&lt; float &gt;</type>
      <name>m_csthmcVelo</name>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NTuple::Array&lt; float &gt;</type>
      <name>m_txVelo</name>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NTuple::Array&lt; float &gt;</type>
      <name>m_tyVelo</name>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NTuple::Array&lt; float &gt;</type>
      <name>m_xVelo</name>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NTuple::Array&lt; float &gt;</type>
      <name>m_yVelo</name>
      <anchor>p13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NTuple::Array&lt; float &gt;</type>
      <name>m_zVelo</name>
      <anchor>p14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NTuple::Array&lt; long &gt;</type>
      <name>m_nmchit1</name>
      <anchor>p15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NTuple::Array&lt; long &gt;</type>
      <name>m_nmchit2</name>
      <anchor>p16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NTuple::Array&lt; long &gt;</type>
      <name>m_recons</name>
      <anchor>p17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NTuple::Array&lt; long &gt;</type>
      <name>m_nmchit1b</name>
      <anchor>p18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NTuple::Array&lt; long &gt;</type>
      <name>m_nmchit2b</name>
      <anchor>p19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NTuple::Array&lt; float &gt;</type>
      <name>m_pdet</name>
      <anchor>p20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NTuple::Array&lt; float &gt;</type>
      <name>m_ptdet</name>
      <anchor>p21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NTuple::Array&lt; float &gt;</type>
      <name>m_qdet</name>
      <anchor>p22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NTuple::Array&lt; float &gt;</type>
      <name>m_chi2tt</name>
      <anchor>p23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NTuple::Array&lt; long &gt;</type>
      <name>m_ndf</name>
      <anchor>p24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NTuple::Array&lt; long &gt;</type>
      <name>m_nAllDigi</name>
      <anchor>p25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NTuple::Array&lt; long &gt;</type>
      <name>m_nTrueDigi</name>
      <anchor>p26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NTuple::Array&lt; long &gt;</type>
      <name>m_isFwd</name>
      <anchor>p27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NTuple::Array&lt; float &gt;</type>
      <name>m_zVeloCenter</name>
      <anchor>p28</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rec/AsctToLinker/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rec/AsctToLinker/</path>
    <filename>dir_000041.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rec/AsctToLinker/v1r3/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/src/base/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/src/base/</path>
    <filename>dir_000063.html</filename>
    <file>RichPhotonSpectra.cpp</file>
    <file>RichRecAlgBase.cpp</file>
    <file>RichRecPixelParentType.cpp</file>
    <file>RichRecToolBase.cpp</file>
    <file>RichTrackID.cpp</file>
    <file>RichTrackSelector.cpp</file>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/</path>
    <filename>dir_000003.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/</path>
    <filename>dir_000004.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/</dir>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/</dir>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Muon/</dir>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/OT/</dir>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rec/</dir>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/</dir>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/</dir>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/</path>
    <filename>dir_000005.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloMoniDst/</dir>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloPIDs/</dir>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloMoniDst/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloMoniDst/</path>
    <filename>dir_000006.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloMoniDst/v1r0/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloPIDs/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloPIDs/</path>
    <filename>dir_000009.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloPIDs/v2r4/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/</path>
    <filename>dir_000012.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/Seeding/v2r10/src/Checker/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/Seeding/v2r10/src/Checker/</path>
    <filename>dir_000092.html</filename>
    <file>TrCheckSeeds.cpp</file>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRingRefit/v1r9/src/component/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRingRefit/v1r9/src/component/</path>
    <filename>dir_000082.html</filename>
    <file>RichRingRefit_dll.cpp</file>
    <file>RichRingRefit_load.cpp</file>
    <file>RichRingRefitAlg.cpp</file>
    <file>RichRingRefitAlg.h</file>
    <file>RichRingRefitMoni.cpp</file>
    <file>RichRingRefitMoni.h</file>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitEvent/v4r8/Event/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitEvent/v4r8/Event/</path>
    <filename>dir_000109.html</filename>
    <file>ITClusterOnTrack.h</file>
    <file>ITrFitter.h</file>
    <file>OTClusterOnTrack.h</file>
    <file>PointOnTrack.h</file>
    <file>TrDataFunctor.h</file>
    <file>TrFitTrack.h</file>
    <file>TrTrack.h</file>
    <file>VeloPhiClusterOnTrack.h</file>
    <file>VeloRClusterOnTrack.h</file>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRingRefit/v1r9/Event/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRingRefit/v1r9/Event/</path>
    <filename>dir_000079.html</filename>
    <file>RichRingRefit.h</file>
    <file>RichRingRefitPID.h</file>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/src/event/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/src/event/</path>
    <filename>dir_000064.html</filename>
    <file>RichRecBaseEvent_load.cpp</file>
    <file>RichRecPhoton.cpp</file>
    <file>RichRecSegment.cpp</file>
    <file>RichRecTrack.cpp</file>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/Event/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/Event/</path>
    <filename>dir_000060.html</filename>
    <file>RichRecPhoton.h</file>
    <file>RichRecPixel.h</file>
    <file>RichRecRing.h</file>
    <file>RichRecSegment.h</file>
    <file>RichRecStatus.h</file>
    <file>RichRecTrack.h</file>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichLocalPID/v1r9p1/Event/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichLocalPID/v1r9p1/Event/</path>
    <filename>dir_000052.html</filename>
    <file>RichLocalPID.h</file>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichGlobalPID/v1r8/Event/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichGlobalPID/v1r8/Event/</path>
    <filename>dir_000047.html</filename>
    <file>RichGlobalPID.h</file>
    <file>RichGlobalPIDSummary.h</file>
    <file>RichGlobalPIDTrack.h</file>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/</path>
    <filename>dir_000015.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITAlgorithms/</dir>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITCheckers/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITAlgorithms/v14r4/ITAlgorithms/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITAlgorithms/v14r4/ITAlgorithms/</path>
    <filename>dir_000018.html</filename>
    <file>IITAmplifierResponse.h</file>
    <file>IITBaryCentreEstimator.h</file>
    <file>IITChargeSharingTool.h</file>
    <file>IITClusterErrorEstimator.h</file>
    <file>IITCrossTalk.h</file>
    <file>IITDepositedCharge.h</file>
    <file>IITEffCalculator.h</file>
    <file>IITSignalToNoiseTool.h</file>
    <file>ITAmplifierResponse.h</file>
    <file>ITChargeSharingTool.h</file>
    <file>ITClusterErrorEstimator.h</file>
    <file>ITCrossTalk.h</file>
    <file>ITDepositedCharge.h</file>
    <file>ITGeantDepositedCharge.h</file>
    <file>ITSignalToNoiseTool.h</file>
    <file>ITWeightedMean.h</file>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITAlgorithms/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITAlgorithms/</path>
    <filename>dir_000016.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITAlgorithms/v14r4/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITCheckers/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITCheckers/</path>
    <filename>dir_000020.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITCheckers/v2r3/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/</name>
    <path>/afs/cern.ch/lhcb/</path>
    <filename>dir_000000.html</filename>
    <dir>/afs/cern.ch/lhcb/software/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRingRefit/v1r9/src/Lib/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRingRefit/v1r9/src/Lib/</path>
    <filename>dir_000083.html</filename>
    <file>FastRingFitter.cpp</file>
    <file>RichRingRefit.cpp</file>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/LongTrack/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/LongTrack/</path>
    <filename>dir_000085.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/LongTrack/v1r13/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Muon/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Muon/</path>
    <filename>dir_000023.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Muon/MuonID/</dir>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Muon/MuonRec/</dir>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Muon/MuonUtils/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Muon/MuonID/v3r7p1/MuonID/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Muon/MuonID/v3r7p1/MuonID/</path>
    <filename>dir_000026.html</filename>
    <file>IMuonIDDLLTool.h</file>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Muon/MuonID/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Muon/MuonID/</path>
    <filename>dir_000024.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Muon/MuonID/v3r7p1/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Muon/MuonRec/v2r4/MuonRec/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Muon/MuonRec/v2r4/MuonRec/</path>
    <filename>dir_000030.html</filename>
    <file>MuonRec.h</file>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Muon/MuonRec/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Muon/MuonRec/</path>
    <filename>dir_000028.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Muon/MuonRec/v2r4/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Muon/MuonUtils/v1r0/MuonUtils/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Muon/MuonUtils/v1r0/MuonUtils/</path>
    <filename>dir_000034.html</filename>
    <file>MuonGeometryStore.h</file>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Muon/MuonUtils/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Muon/MuonUtils/</path>
    <filename>dir_000032.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Muon/MuonUtils/v1r0/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/OT/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/OT/</path>
    <filename>dir_000036.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/OT/OTMonitor/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/OT/OTMonitor/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/OT/OTMonitor/</path>
    <filename>dir_000037.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/OT/OTMonitor/v1r1/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rec/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rec/</path>
    <filename>dir_000040.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rec/AsctToLinker/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/</name>
    <path>/afs/cern.ch/lhcb/software/releases/</path>
    <filename>dir_000002.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/</path>
    <filename>dir_000044.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichGlobalPID/</dir>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichLocalPID/</dir>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichPIDMerge/</dir>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/</dir>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecCommon/</dir>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecMCTools/</dir>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecQC/</dir>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/</dir>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRingRefit/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichGlobalPID/v1r8/RichGlobalPID/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichGlobalPID/v1r8/RichGlobalPID/</path>
    <filename>dir_000048.html</filename>
    <file>RichGlobalPIDTkQuality.h</file>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichGlobalPID/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichGlobalPID/</path>
    <filename>dir_000045.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichGlobalPID/v1r8/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichLocalPID/v1r9p1/RichLocalPID/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichLocalPID/v1r9p1/RichLocalPID/</path>
    <filename>dir_000053.html</filename>
    <file>IRichLocalPIDTool.h</file>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichLocalPID/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichLocalPID/</path>
    <filename>dir_000050.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichLocalPID/v1r9p1/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichPIDMerge/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichPIDMerge/</path>
    <filename>dir_000055.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichPIDMerge/v1r5/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/RichRecBase/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/RichRecBase/</path>
    <filename>dir_000061.html</filename>
    <file>IRichCherenkovAngle.h</file>
    <file>IRichCherenkovResolution.h</file>
    <file>IRichExpectedTrackSignal.h</file>
    <file>IRichGasQuartzWindowAbs.h</file>
    <file>IRichGeomEff.h</file>
    <file>IRichMassHypothesisRingCreator.h</file>
    <file>IRichParticleProperties.h</file>
    <file>IRichPhotonCreator.h</file>
    <file>IRichPhotonPredictor.h</file>
    <file>IRichPhotonSignal.h</file>
    <file>IRichPixelCreator.h</file>
    <file>IRichRayleighScatter.h</file>
    <file>IRichRayTraceCherenkovCone.h</file>
    <file>IRichRecGeomTool.h</file>
    <file>IRichRecMCTruthTool.h</file>
    <file>IRichSegmentCreator.h</file>
    <file>IRichSellmeirFunc.h</file>
    <file>IRichSignalDetectionEff.h</file>
    <file>IRichStatusCreator.h</file>
    <file>IRichTrackCreator.h</file>
    <file>RichDetParams.h</file>
    <file>RichPhotonSpectra.h</file>
    <file>RichRecAlgBase.h</file>
    <file>RichRecPhotonKey.h</file>
    <file>RichRecPixelParentType.h</file>
    <file>RichRecProcCode.h</file>
    <file>RichRecToolBase.h</file>
    <file>RichTrackID.h</file>
    <file>RichTrackSelector.h</file>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/</path>
    <filename>dir_000058.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecCommon/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecCommon/</path>
    <filename>dir_000065.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecCommon/v1r10/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecMCTools/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecMCTools/</path>
    <filename>dir_000068.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecMCTools/v1r7/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecQC/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecQC/</path>
    <filename>dir_000071.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecQC/v1r10/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/</path>
    <filename>dir_000074.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRingRefit/v1r9/RichRingRefit/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRingRefit/v1r9/RichRingRefit/</path>
    <filename>dir_000080.html</filename>
    <file>FastRingFitter.h</file>
    <file>OstreamHepRotation.h</file>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRingRefit/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRingRefit/</path>
    <filename>dir_000077.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRingRefit/v1r9/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/Seeding/v2r10/Seeding/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/Seeding/v2r10/Seeding/</path>
    <filename>dir_000090.html</filename>
    <file>TrCheckSeeds.h</file>
    <file>TrSeedEvent.h</file>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/Seeding/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/Seeding/</path>
    <filename>dir_000088.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/Seeding/v2r10/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/</name>
    <path>/afs/cern.ch/lhcb/software/</path>
    <filename>dir_000001.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgVelo/v7r0/src/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgVelo/v7r0/src/</path>
    <filename>dir_000138.html</filename>
    <file>RZTrack.h</file>
    <file>SpaceTrack.h</file>
    <file>TrgVelo_dll.cpp</file>
    <file>TrgVelo_load.cpp</file>
    <file>VeloPhiList.h</file>
    <file>VeloRTracking.cpp</file>
    <file>VeloRTracking.h</file>
    <file>VeloSpaceTracking.cpp</file>
    <file>VeloSpaceTracking.h</file>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgTools/v7r0/src/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgTools/v7r0/src/</path>
    <filename>dir_000134.html</filename>
    <file>DecodeL1VeloPhi.cpp</file>
    <file>DecodeL1VeloPhi.h</file>
    <file>DecodeL1VeloR.cpp</file>
    <file>DecodeL1VeloR.h</file>
    <file>DecodeRawVelo.cpp</file>
    <file>DecodeRawVelo.h</file>
    <file>FillTrgDecision.cpp</file>
    <file>FillTrgDecision.h</file>
    <file>L1InitEvent.cpp</file>
    <file>L1InitEvent.h</file>
    <file>TrgDataProvider.cpp</file>
    <file>TrgInitEvent.cpp</file>
    <file>TrgInitEvent.h</file>
    <file>TrgL0Filter.cpp</file>
    <file>TrgL0Filter.h</file>
    <file>TrgL0MuonProvider.cpp</file>
    <file>TrgL1Filter.cpp</file>
    <file>TrgL1Filter.h</file>
    <file>TrgMCReconstructed.cpp</file>
    <file>TrgMCReconstructed.h</file>
    <file>TrgParticleMaker.cpp</file>
    <file>TrgParticleMaker.h</file>
    <file>TrgTools_dll.cpp</file>
    <file>TrgTools_load.cpp</file>
    <file>TrgTrackToContainer.cpp</file>
    <file>TrgTrackToContainer.h</file>
    <file>TrgVeloDataHolder.cpp</file>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgBrunel/v1r1/src/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgBrunel/v1r1/src/</path>
    <filename>dir_000131.html</filename>
    <file>ConvertToTrFitTrack.cpp</file>
    <file>ConvertToTrFitTrack.h</file>
    <file>TrgBrunel_dll.cpp</file>
    <file>TrgBrunel_load.cpp</file>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/VeloTT/v1r11/src/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/VeloTT/v1r11/src/</path>
    <filename>dir_000127.html</filename>
    <file>paraVTT.cpp</file>
    <file>paraVTT.h</file>
    <file>VeloTT_dll.cpp</file>
    <file>VeloTT_load.cpp</file>
    <file>VeloTTFind.cpp</file>
    <file>VeloTTFind.h</file>
    <file>VeloTTStoredChecker.cpp</file>
    <file>VeloTTStoredChecker.h</file>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrTools/v2r6/src/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrTools/v2r6/src/</path>
    <filename>dir_000123.html</filename>
    <file>BIntegrator.cpp</file>
    <file>ClusterFilter.cpp</file>
    <file>Tr2TracksMatch.cpp</file>
    <file>TrMeasInfo.cpp</file>
    <file>TrPtKick.cpp</file>
    <file>TrTools_load.cpp</file>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrMatching/v2r10p1/src/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrMatching/v2r10p1/src/</path>
    <filename>dir_000119.html</filename>
    <file>TrChi2Calculator.cpp</file>
    <file>TrMatchChecker.cpp</file>
    <file>TrMatching_dll.cpp</file>
    <file>TrMatching_load.cpp</file>
    <file>TrMatchVeloSeed.cpp</file>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrKShort/v1r4p1/src/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrKShort/v1r4p1/src/</path>
    <filename>dir_000116.html</filename>
    <file>FindKShortParams.cpp</file>
    <file>FindKShortParams.h</file>
    <file>FindTrKShort.cpp</file>
    <file>FindTrKShort.h</file>
    <file>KsFitParameters.cpp</file>
    <file>KsFitParameters.h</file>
    <file>KsHit.cpp</file>
    <file>KsHit.h</file>
    <file>KShortMonitor.cpp</file>
    <file>KShortMonitor.h</file>
    <file>KsPlane.cpp</file>
    <file>KsPlane.h</file>
    <file>KsTrack.cpp</file>
    <file>KsTrack.h</file>
    <file>TrKShort_dll.cpp</file>
    <file>TrKShort_load.cpp</file>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitter/v4r0/src/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitter/v4r0/src/</path>
    <filename>dir_000113.html</filename>
    <file>ITrFilter.h</file>
    <file>ITrSmoother.h</file>
    <file>TrEventTracksFitter.cpp</file>
    <file>TrEventTracksFitter.h</file>
    <file>TrFitAtAllPoints.cpp</file>
    <file>TrFitAtAllPoints.h</file>
    <file>TrFitter_dll.cpp</file>
    <file>TrFitter_load.cpp</file>
    <file>TrFitToVertex.cpp</file>
    <file>TrFitToVertex.h</file>
    <file>TrKalmanFilter.cpp</file>
    <file>TrKalmanFilter.h</file>
    <file>TrKalmanSmoother.cpp</file>
    <file>TrKalmanSmoother.h</file>
    <file>TrNode.cpp</file>
    <file>TrNode.h</file>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitEvent/v4r8/src/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitEvent/v4r8/src/</path>
    <filename>dir_000110.html</filename>
    <file>ITClusterOnTrack.cpp</file>
    <file>OTClusterOnTrack.cpp</file>
    <file>PointOnTrack.cpp</file>
    <file>TrFitTrack.cpp</file>
    <file>VeloPhiClusterOnTrack.cpp</file>
    <file>VeloRClusterOnTrack.cpp</file>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitAssociators/v1r3/src/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitAssociators/v1r3/src/</path>
    <filename>dir_000106.html</filename>
    <file>TrFitAssociators_dll.cpp</file>
    <file>TrFitAssociators_load.cpp</file>
    <file>TrFitTrackMCTruthAlg.cpp</file>
    <file>TrFitTrackMCTruthAlg.h</file>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrExtrapolator/v2r14/src/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrExtrapolator/v2r14/src/</path>
    <filename>dir_000103.html</filename>
    <file>TrExtrapolator_dll.cpp</file>
    <file>TrExtrapolator_load.cpp</file>
    <file>TrFastParabolicExtrapolator.cpp</file>
    <file>TrFastParabolicExtrapolator.h</file>
    <file>TrFirstCleverExtrapolator.cpp</file>
    <file>TrFirstCleverExtrapolator.h</file>
    <file>TrHerabExtrapolator.cpp</file>
    <file>TrHerabExtrapolator.h</file>
    <file>TrLinearExtrapolator.cpp</file>
    <file>TrLinearExtrapolator.h</file>
    <file>TrParabolicExtrapolator.cpp</file>
    <file>TrParabolicExtrapolator.h</file>
    <file>TrTransportStep.h</file>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCleanEx/v2r11/src/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCleanEx/v2r11/src/</path>
    <filename>dir_000099.html</filename>
    <file>CloneTrack.cpp</file>
    <file>CloneTrack.h</file>
    <file>TrChi2OutlierKiller.cpp</file>
    <file>TrChi2OutlierKiller.h</file>
    <file>TrCleanEx_dll.cpp</file>
    <file>TrCleanEx_load.cpp</file>
    <file>TrFit2StoredTrackCnv.cpp</file>
    <file>TrFit2StoredTrackCnv.h</file>
    <file>TrPrepareVelo.cpp</file>
    <file>TrPrepareVelo.h</file>
    <file>TrStored2FitTrackCnv.cpp</file>
    <file>TrStored2FitTrackCnv.h</file>
    <file>TrTrackCloneKiller.cpp</file>
    <file>TrTrackCloneKiller.h</file>
    <file>TrTracksCleaner.cpp</file>
    <file>TrTracksCleaner.h</file>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCheck/v2r7/src/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCheck/v2r7/src/</path>
    <filename>dir_000095.html</filename>
    <file>PatternChecker.cpp</file>
    <file>PatternChecker.h</file>
    <file>TrAcceptance.cpp</file>
    <file>TrackSelector.cpp</file>
    <file>TrAnalyse.cpp</file>
    <file>TrAnalyse.h</file>
    <file>TrCheck_dll.cpp</file>
    <file>TrCheck_load.cpp</file>
    <file>TrChecker.cpp</file>
    <file>TrChecker.h</file>
    <file>TrCounter.h</file>
    <file>TrMonitor.cpp</file>
    <file>TrMonitor.h</file>
    <file>TrTT1Counter.h</file>
    <file>TrTupleChecker.cpp</file>
    <file>TrTupleChecker.h</file>
    <file>TrueStateCreator.cpp</file>
    <file>TrueTracksCreator.cpp</file>
    <file>TrueTracksCreator.h</file>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/Seeding/v2r10/src/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/Seeding/v2r10/src/</path>
    <filename>dir_000091.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/Seeding/v2r10/src/Checker/</dir>
    <file>Seeding_dll.cpp</file>
    <file>Seeding_load.cpp</file>
    <file>TrSeedEvent.cpp</file>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/LongTrack/v1r13/src/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/LongTrack/v1r13/src/</path>
    <filename>dir_000087.html</filename>
    <file>FindLongTrack.cpp</file>
    <file>FindLongTrack.h</file>
    <file>LongTrack.cpp</file>
    <file>LongTrack.h</file>
    <file>LongTrack_dll.cpp</file>
    <file>LongTrack_load.cpp</file>
    <file>LtFitParams.cpp</file>
    <file>LtFitParams.h</file>
    <file>LtHit.cpp</file>
    <file>LtHit.h</file>
    <file>LtParameters.cpp</file>
    <file>LtParameters.h</file>
    <file>LtPlane.cpp</file>
    <file>LtPlane.h</file>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRingRefit/v1r9/src/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRingRefit/v1r9/src/</path>
    <filename>dir_000081.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRingRefit/v1r9/src/component/</dir>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRingRefit/v1r9/src/Lib/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/src/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/src/</path>
    <filename>dir_000076.html</filename>
    <file>RichBinnedCKResVthetaForTrStoredTracks.cpp</file>
    <file>RichBinnedCKResVthetaForTrStoredTracks.h</file>
    <file>RichCherenkovAngle.cpp</file>
    <file>RichCherenkovAngle.h</file>
    <file>RichDelegatedTrackCreatorFromTrStoredTracks.cpp</file>
    <file>RichDelegatedTrackCreatorFromTrStoredTracks.h</file>
    <file>RichExpectedTrackSignal.cpp</file>
    <file>RichExpectedTrackSignal.h</file>
    <file>RichFunctionalCKResVpForTrStoredTracks.cpp</file>
    <file>RichFunctionalCKResVpForTrStoredTracks.h</file>
    <file>RichFunctionalRayleighScatter.cpp</file>
    <file>RichFunctionalRayleighScatter.h</file>
    <file>RichGeomEffFixedValue.cpp</file>
    <file>RichGeomEffFixedValue.h</file>
    <file>RichGeomEffPhotonTracing.cpp</file>
    <file>RichGeomEffPhotonTracing.h</file>
    <file>RichInterpCKResVpForTrStoredTracks.cpp</file>
    <file>RichInterpCKResVpForTrStoredTracks.h</file>
    <file>RichInterpCKResVthetaForTrStoredTracks.cpp</file>
    <file>RichInterpCKResVthetaForTrStoredTracks.h</file>
    <file>RichMassHypothesisRingCreator.cpp</file>
    <file>RichMassHypothesisRingCreator.h</file>
    <file>RichParticleProperties.cpp</file>
    <file>RichParticleProperties.h</file>
    <file>RichPhotonCreator.cpp</file>
    <file>RichPhotonCreator.h</file>
    <file>RichPhotonPredictor.cpp</file>
    <file>RichPhotonPredictor.h</file>
    <file>RichPhotonPredictorUsingRings.cpp</file>
    <file>RichPhotonPredictorUsingRings.h</file>
    <file>RichPhotonSignal.cpp</file>
    <file>RichPhotonSignal.h</file>
    <file>RichPixelCreatorFromRawBuffer.cpp</file>
    <file>RichPixelCreatorFromRawBuffer.h</file>
    <file>RichPixelCreatorFromRichDigits.cpp</file>
    <file>RichPixelCreatorFromRichDigits.h</file>
    <file>RichRayTraceCherenkovCone.cpp</file>
    <file>RichRayTraceCherenkovCone.h</file>
    <file>RichRecGeomTool.cpp</file>
    <file>RichRecGeomTool.h</file>
    <file>RichRecTools_dll.cpp</file>
    <file>RichRecTools_load.cpp</file>
    <file>RichSegmentCreator.cpp</file>
    <file>RichSegmentCreator.h</file>
    <file>RichSellmeirFunc.cpp</file>
    <file>RichSellmeirFunc.h</file>
    <file>RichStatusCreator.cpp</file>
    <file>RichStatusCreator.h</file>
    <file>RichTabulatedGasQuartzWindowAbs.cpp</file>
    <file>RichTabulatedGasQuartzWindowAbs.h</file>
    <file>RichTabulatedRayleighScatter.cpp</file>
    <file>RichTabulatedRayleighScatter.h</file>
    <file>RichTabulatedSignalDetectionEff.cpp</file>
    <file>RichTabulatedSignalDetectionEff.h</file>
    <file>RichTrackCreatorFromTrStoredTracks.cpp</file>
    <file>RichTrackCreatorFromTrStoredTracks.h</file>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecQC/v1r10/src/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecQC/v1r10/src/</path>
    <filename>dir_000073.html</filename>
    <file>RichPIDQC.cpp</file>
    <file>RichPIDQC.h</file>
    <file>RichRecoQC.cpp</file>
    <file>RichRecoQC.h</file>
    <file>RichRecQC_dll.cpp</file>
    <file>RichRecQC_load.cpp</file>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecMCTools/v1r7/src/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecMCTools/v1r7/src/</path>
    <filename>dir_000070.html</filename>
    <file>RichPhotonCreatorFromMCRichOpticalPhotons.cpp</file>
    <file>RichPhotonCreatorFromMCRichOpticalPhotons.h</file>
    <file>RichPhotonPredictorUsingMCRichOpticalPhotons.cpp</file>
    <file>RichPhotonPredictorUsingMCRichOpticalPhotons.h</file>
    <file>RichPixelCreatorFromCheatedRichDigits.cpp</file>
    <file>RichPixelCreatorFromCheatedRichDigits.h</file>
    <file>RichPixelCreatorFromMCRichHits.cpp</file>
    <file>RichPixelCreatorFromMCRichHits.h</file>
    <file>RichPixelCreatorFromRichDigitsWithBg.cpp</file>
    <file>RichPixelCreatorFromRichDigitsWithBg.h</file>
    <file>RichPixelCreatorFromSignalRichDigits.cpp</file>
    <file>RichPixelCreatorFromSignalRichDigits.h</file>
    <file>RichRecMCTools_dll.cpp</file>
    <file>RichRecMCTools_load.cpp</file>
    <file>RichRecMCTruthTool.cpp</file>
    <file>RichRecMCTruthTool.h</file>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecCommon/v1r10/src/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecCommon/v1r10/src/</path>
    <filename>dir_000067.html</filename>
    <file>RichAlignmentMonitor.cpp</file>
    <file>RichAlignmentMonitor.h</file>
    <file>RichMCMassHypoRingsAlg.cpp</file>
    <file>RichMCMassHypoRingsAlg.h</file>
    <file>RichPhotonMonitor.cpp</file>
    <file>RichPhotonMonitor.h</file>
    <file>RichPixelMonitor.cpp</file>
    <file>RichPixelMonitor.h</file>
    <file>RichRecBackgroundEsti.cpp</file>
    <file>RichRecBackgroundEsti.h</file>
    <file>RichRecCommon_dll.cpp</file>
    <file>RichRecCommon_load.cpp</file>
    <file>RichRecDataObjVerifier.cpp</file>
    <file>RichRecDataObjVerifier.h</file>
    <file>RichRecTimeMonitor.cpp</file>
    <file>RichRecTimeMonitor.h</file>
    <file>RichTrackGeomMoni.cpp</file>
    <file>RichTrackGeomMoni.h</file>
    <file>RichTrackResolutionMoni.cpp</file>
    <file>RichTrackResolutionMoni.h</file>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/src/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/src/</path>
    <filename>dir_000062.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/src/base/</dir>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/src/event/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichPIDMerge/v1r5/src/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichPIDMerge/v1r5/src/</path>
    <filename>dir_000057.html</filename>
    <file>RichGPIDSelByRing.cpp</file>
    <file>RichGPIDSelByRing.h</file>
    <file>RichHierarchicalPIDMerge.cpp</file>
    <file>RichHierarchicalPIDMerge.h</file>
    <file>RichPIDMerge_dll.cpp</file>
    <file>RichPIDMerge_load.cpp</file>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichLocalPID/v1r9p1/src/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichLocalPID/v1r9p1/src/</path>
    <filename>dir_000054.html</filename>
    <file>RichLocalPID_dll.cpp</file>
    <file>RichLocalPID_load.cpp</file>
    <file>RichLocalPIDAlg.cpp</file>
    <file>RichLocalPIDAlg.h</file>
    <file>RichLocalPIDMonitor.cpp</file>
    <file>RichLocalPIDMonitor.h</file>
    <file>RichLocalPIDToolAngleSpace.cpp</file>
    <file>RichLocalPIDToolAngleSpace.h</file>
    <file>RichLocalPIDToolLocalXYSpace.cpp</file>
    <file>RichLocalPIDToolLocalXYSpace.h</file>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichGlobalPID/v1r8/src/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichGlobalPID/v1r8/src/</path>
    <filename>dir_000049.html</filename>
    <file>RichGlobalPID_dll.cpp</file>
    <file>RichGlobalPID_load.cpp</file>
    <file>RichGlobalPIDAlg.cpp</file>
    <file>RichGlobalPIDAlg.h</file>
    <file>RichGlobalPIDAlgBase.cpp</file>
    <file>RichGlobalPIDAlgBase.h</file>
    <file>RichGlobalPIDDigitSel.cpp</file>
    <file>RichGlobalPIDDigitSel.h</file>
    <file>RichGlobalPIDFinalize.cpp</file>
    <file>RichGlobalPIDFinalize.h</file>
    <file>RichGlobalPIDInitialize.cpp</file>
    <file>RichGlobalPIDInitialize.h</file>
    <file>RichGlobalPIDMonitor.cpp</file>
    <file>RichGlobalPIDMonitor.h</file>
    <file>RichGlobalPIDTrTrackSel.cpp</file>
    <file>RichGlobalPIDTrTrackSel.h</file>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rec/AsctToLinker/v1r3/src/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rec/AsctToLinker/v1r3/src/</path>
    <filename>dir_000043.html</filename>
    <file>AsctToLinker_dll.cpp</file>
    <file>AsctToLinker_load.cpp</file>
    <file>ConvertToLinker.cpp</file>
    <file>ConvertToLinker.h</file>
    <file>ITTruthFromDigit.cpp</file>
    <file>ITTruthFromDigit.h</file>
    <file>OTTruthFromOTTime.cpp</file>
    <file>OTTruthFromOTTime.h</file>
    <file>VeloTruthFromCluster.cpp</file>
    <file>VeloTruthFromCluster.h</file>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/OT/OTMonitor/v1r1/src/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/OT/OTMonitor/v1r1/src/</path>
    <filename>dir_000039.html</filename>
    <file>MCOTDepositMonitor.cpp</file>
    <file>MCOTDepositMonitor.h</file>
    <file>OTMonitor_dll.cpp</file>
    <file>OTMonitor_load.cpp</file>
    <file>OTMonitorAlgorithm.cpp</file>
    <file>OTMonitorAlgorithm.h</file>
    <file>OTTimeChecker.cpp</file>
    <file>OTTimeChecker.h</file>
    <file>OTTimeMonitor.cpp</file>
    <file>OTTimeMonitor.h</file>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Muon/MuonUtils/v1r0/src/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Muon/MuonUtils/v1r0/src/</path>
    <filename>dir_000035.html</filename>
    <file>MuonGeometryStore.cpp</file>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Muon/MuonRec/v2r4/src/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Muon/MuonRec/v2r4/src/</path>
    <filename>dir_000031.html</filename>
    <file>MuonRec.cpp</file>
    <file>MuonRec_dll.cpp</file>
    <file>MuonRec_load.cpp</file>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Muon/MuonID/v3r7p1/src/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Muon/MuonID/v3r7p1/src/</path>
    <filename>dir_000027.html</filename>
    <file>MuonDSTPrepare.cpp</file>
    <file>MuonDSTPrepare.h</file>
    <file>MuonID_dll.cpp</file>
    <file>MuonID_load.cpp</file>
    <file>MuonIDDLLTool.cpp</file>
    <file>MuonIDDLLTool.h</file>
    <file>MuonIDFOI.cpp</file>
    <file>MuonIDFOI.h</file>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITCheckers/v2r3/src/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITCheckers/v2r3/src/</path>
    <filename>dir_000022.html</filename>
    <file>HistFun.h</file>
    <file>ITCheckers_dll.cpp</file>
    <file>ITCheckers_load.cpp</file>
    <file>ITClusterChecker.cpp</file>
    <file>ITClusterChecker.h</file>
    <file>ITClusterResolution.cpp</file>
    <file>ITClusterResolution.h</file>
    <file>ITDigitChecker.cpp</file>
    <file>ITDigitChecker.h</file>
    <file>ITDigitConsistencyMonitor.cpp</file>
    <file>ITDigitConsistencyMonitor.h</file>
    <file>ITDumpGeom.cpp</file>
    <file>ITDumpGeom.h</file>
    <file>ITEffMonitor.cpp</file>
    <file>ITEffMonitor.h</file>
    <file>ITMCTuner.cpp</file>
    <file>ITMCTuner.h</file>
    <file>ITNoiseClusterMonitor.cpp</file>
    <file>ITNoiseClusterMonitor.h</file>
    <file>ITOccupancy.cpp</file>
    <file>ITOccupancy.h</file>
    <file>LandauTest.cpp</file>
    <file>LandauTest.h</file>
    <file>MCHitMonitor.cpp</file>
    <file>MCHitMonitor.h</file>
    <file>MCITDepositChecker.cpp</file>
    <file>MCITDepositChecker.h</file>
    <file>MCITDigitChecker.cpp</file>
    <file>MCITDigitChecker.h</file>
    <file>STL1BufferMonitor.cpp</file>
    <file>STL1BufferMonitor.h</file>
    <file>STL1ClusterChecker.cpp</file>
    <file>STL1ClusterChecker.h</file>
    <file>STRawBufferMonitor.cpp</file>
    <file>STRawBufferMonitor.h</file>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITAlgorithms/v14r4/src/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITAlgorithms/v14r4/src/</path>
    <filename>dir_000019.html</filename>
    <file>GSLSpline.cpp</file>
    <file>GSLSpline.h</file>
    <file>ITAlgorithms_dll.cpp</file>
    <file>ITAlgorithms_load.cpp</file>
    <file>ITAmplifierResponse.cpp</file>
    <file>ITChargeSharingTool.cpp</file>
    <file>ITClusterCreator.cpp</file>
    <file>ITClusterCreator.h</file>
    <file>ITClusterErrorEstimator.cpp</file>
    <file>ITClusterSmearer.cpp</file>
    <file>ITClusterSmearer.h</file>
    <file>ITCrossTalk.cpp</file>
    <file>ITDepositedCharge.cpp</file>
    <file>ITDigitCreator.cpp</file>
    <file>ITDigitCreator.h</file>
    <file>ITDigitInPool.h</file>
    <file>ITEffCalculator.cpp</file>
    <file>ITEffCalculator.h</file>
    <file>ITGeantDepositedCharge.cpp</file>
    <file>ITInitialization.cpp</file>
    <file>ITInitialization.h</file>
    <file>ITSignalToNoiseTool.cpp</file>
    <file>ITSummaryCreator.cpp</file>
    <file>ITSummaryCreator.h</file>
    <file>ITWeightedMean.cpp</file>
    <file>MCITDepositCreator.cpp</file>
    <file>MCITDepositCreator.h</file>
    <file>MCITDigitCreator.cpp</file>
    <file>MCITDigitCreator.h</file>
    <file>STL1ClusterCreator.cpp</file>
    <file>STL1ClusterCreator.h</file>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</path>
    <filename>dir_000014.html</filename>
    <file>Calo04ECorrection.cpp</file>
    <file>Calo04ECorrection.h</file>
    <file>Calo04LCorrection.cpp</file>
    <file>Calo04LCorrection.h</file>
    <file>Calo04SCorrection.cpp</file>
    <file>Calo04SCorrection.h</file>
    <file>CaloCluster2TrackAlg.cpp</file>
    <file>CaloCluster2TrackAlg.h</file>
    <file>CaloCluster2TrgTrackAlg.cpp</file>
    <file>CaloCluster2TrgTrackAlg.h</file>
    <file>CaloClusterCorrect3x3Position.cpp</file>
    <file>CaloClusterCorrect3x3Position.h</file>
    <file>CaloClusterCovarianceAlg.cpp</file>
    <file>CaloClusterCovarianceAlg.h</file>
    <file>CaloClusterisationAlg.cpp</file>
    <file>CaloClusterisationAlg.h</file>
    <file>CaloClusterResetFractions.cpp</file>
    <file>CaloClusterResetFractions.h</file>
    <file>CaloClusterSOMSelector.cpp</file>
    <file>CaloClusterSOMSelector.h</file>
    <file>CaloClusterToolSequence.cpp</file>
    <file>CaloClusterToolSequence.h</file>
    <file>CaloCorr2TANH.cpp</file>
    <file>CaloCorr2TANH.h</file>
    <file>CaloCorrASINH.cpp</file>
    <file>CaloCorrASINH.h</file>
    <file>CaloCorrection.cpp</file>
    <file>CaloCorrection.h</file>
    <file>CaloDigitisation.h</file>
    <file>CaloDigitsFilterAlg.cpp</file>
    <file>CaloDigitsFilterAlg.h</file>
    <file>CaloElectronAlg.cpp</file>
    <file>CaloElectronAlg.h</file>
    <file>CaloExtraDigits.cpp</file>
    <file>CaloExtraDigits.h</file>
    <file>CaloHypo2TrackAlg.cpp</file>
    <file>CaloHypo2TrackAlg.h</file>
    <file>CaloHypo2TrgTrackAlg.cpp</file>
    <file>CaloHypo2TrgTrackAlg.h</file>
    <file>CaloHypoAlg.cpp</file>
    <file>CaloHypoAlg.h</file>
    <file>CaloHypoReShuffleAlg.cpp</file>
    <file>CaloHypoReShuffleAlg.h</file>
    <file>CaloHyposMerge.cpp</file>
    <file>CaloHyposMerge.h</file>
    <file>CaloHypoToolSequence.cpp</file>
    <file>CaloHypoToolSequence.h</file>
    <file>CaloLCorrection.cpp</file>
    <file>CaloLCorrection.h</file>
    <file>CaloLCorrectionSimple.cpp</file>
    <file>CaloLCorrectionSimple.h</file>
    <file>CaloMergedPi0Alg.cpp</file>
    <file>CaloMergedPi0Alg.h</file>
    <file>CaloNewECorrection.cpp</file>
    <file>CaloNewECorrection.h</file>
    <file>CaloNewLCorrection.cpp</file>
    <file>CaloNewLCorrection.h</file>
    <file>CaloNewSCorrection.cpp</file>
    <file>CaloNewSCorrection.h</file>
    <file>CaloPhotonMomentumTool.cpp</file>
    <file>CaloPhotonMomentumTool.h</file>
    <file>CaloPrsCorrection.cpp</file>
    <file>CaloPrsCorrection.h</file>
    <file>CaloReco_dll.cpp</file>
    <file>CaloReco_load.cpp</file>
    <file>CaloRemoveMomentum.cpp</file>
    <file>CaloRemoveMomentum.h</file>
    <file>CaloSCorrectionArcSinh.cpp</file>
    <file>CaloSCorrectionArcSinh.h</file>
    <file>CaloSCorrectionBarycentre.cpp</file>
    <file>CaloSCorrectionBarycentre.h</file>
    <file>CaloSCorrectionCellCenter.cpp</file>
    <file>CaloSCorrectionCellCenter.h</file>
    <file>CaloSCorrectionComplex.cpp</file>
    <file>CaloSCorrectionComplex.h</file>
    <file>CaloSCorrectionDoubleTanh.cpp</file>
    <file>CaloSCorrectionDoubleTanh.h</file>
    <file>CaloSCorrectionFinal.cpp</file>
    <file>CaloSCorrectionFinal.h</file>
    <file>CaloSCorrectionLinear.cpp</file>
    <file>CaloSCorrectionLinear.h</file>
    <file>CaloSCorrectionSequence.cpp</file>
    <file>CaloSCorrectionSequence.h</file>
    <file>CaloSelectNeutralCluster.cpp</file>
    <file>CaloSelectNeutralCluster.h</file>
    <file>CaloSelector.cpp</file>
    <file>CaloSelector.h</file>
    <file>CaloSelectorAND.cpp</file>
    <file>CaloSelectorAND.h</file>
    <file>CaloSelectorNOT.cpp</file>
    <file>CaloSelectorNOT.h</file>
    <file>CaloSelectorOR.cpp</file>
    <file>CaloSelectorOR.h</file>
    <file>CaloSharedCellAlg.cpp</file>
    <file>CaloSharedCellAlg.h</file>
    <file>CaloSingleGammaTool.cpp</file>
    <file>CaloSingleGammaTool.h</file>
    <file>CaloSinglePhotonAlg.cpp</file>
    <file>CaloSinglePhotonAlg.h</file>
    <file>CaloSShape.cpp</file>
    <file>CaloSShape.h</file>
    <file>CaloTrackAlg.cpp</file>
    <file>CaloTrackAlg.h</file>
    <file>CaloTrackMatchBase.cpp</file>
    <file>CaloTrackMatchBase.h</file>
    <file>CaloTrackMatchBrem2.cpp</file>
    <file>CaloTrackMatchBrem2.h</file>
    <file>CaloTrackMatchBremm.cpp</file>
    <file>CaloTrackMatchBremm.h</file>
    <file>CaloTrackMatchElectron.cpp</file>
    <file>CaloTrackMatchElectron.h</file>
    <file>CaloTrackMatchPhoton.cpp</file>
    <file>CaloTrackMatchPhoton.h</file>
    <file>CaloTrgSelectNeutralCluster.cpp</file>
    <file>CaloTrgSelectNeutralCluster.h</file>
    <file>CelAutoTaggedCell.h</file>
    <file>CellularAutomaton.cpp</file>
    <file>CellularAutomaton.h</file>
    <file>ClusterCovarianceMatrixTool.cpp</file>
    <file>ClusterCovarianceMatrixTool.h</file>
    <file>ClusterisationFunctors.h</file>
    <file>ClusterSpreadTool.cpp</file>
    <file>ClusterSpreadTool.h</file>
    <file>SubClusterSelector3x3.cpp</file>
    <file>SubClusterSelector3x3.h</file>
    <file>SubClusterSelectorAll.cpp</file>
    <file>SubClusterSelectorAll.h</file>
    <file>SubClusterSelectorBase.cpp</file>
    <file>SubClusterSelectorBase.h</file>
    <file>SubClusterSelectorMax2x2.cpp</file>
    <file>SubClusterSelectorMax2x2.h</file>
    <file>SubClusterSelectorNeighbors.cpp</file>
    <file>SubClusterSelectorNeighbors.h</file>
    <file>SubClusterSelectorSwissCross.cpp</file>
    <file>SubClusterSelectorSwissCross.h</file>
    <file>TaggedCellFunctor.h</file>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloPIDs/v2r4/src/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloPIDs/v2r4/src/</path>
    <filename>dir_000011.html</filename>
    <file>CaloPhotonEstimatorTool.cpp</file>
    <file>CaloPhotonEstimatorTool.h</file>
    <file>CaloPIDs_dll.cpp</file>
    <file>CaloPIDs_load.cpp</file>
    <file>CaloPIDsData.cpp</file>
    <file>CaloPIDsData.h</file>
    <file>CaloTrack2EstimatorAlg.cpp</file>
    <file>CaloTrack2EstimatorAlg.h</file>
    <file>CaloTrack2IdAlg.cpp</file>
    <file>CaloTrack2IdAlg.h</file>
    <file>CaloTrackEcalEval.cpp</file>
    <file>CaloTrackEcalEval.h</file>
    <file>CaloTrackEval.cpp</file>
    <file>CaloTrackEval.h</file>
    <file>CaloTrackHcalEval.cpp</file>
    <file>CaloTrackHcalEval.h</file>
    <file>CaloTrackPrsEval.cpp</file>
    <file>CaloTrackPrsEval.h</file>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloMoniDst/v1r0/src/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloMoniDst/v1r0/src/</path>
    <filename>dir_000008.html</filename>
    <file>CaloClusterMatchMonitor.cpp</file>
    <file>CaloClusterMatchMonitor.h</file>
    <file>CaloClusterMCTruthMonitor.cpp</file>
    <file>CaloClusterMCTruthMonitor.h</file>
    <file>CaloClusterMonitor.cpp</file>
    <file>CaloClusterMonitor.h</file>
    <file>CaloHypoMatchMonitor.cpp</file>
    <file>CaloHypoMatchMonitor.h</file>
    <file>CaloHypoMonitor.cpp</file>
    <file>CaloHypoMonitor.h</file>
    <file>CaloMCPi0Monitor.cpp</file>
    <file>CaloMCPi0Monitor.h</file>
    <file>CaloMoniAlg.h</file>
    <file>CaloMoniDst_dll.cpp</file>
    <file>CaloMoniDst_load.cpp</file>
    <file>CaloPhotonMonitor.cpp</file>
    <file>CaloPhotonMonitor.h</file>
    <file>CaloPi0Monitor.cpp</file>
    <file>CaloPi0Monitor.h</file>
    <file>CaloPIDsMonitor.cpp</file>
    <file>CaloPIDsMonitor.h</file>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/</path>
    <filename>dir_000084.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/LongTrack/</dir>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/Seeding/</dir>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCheck/</dir>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCleanEx/</dir>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrExtrapolator/</dir>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitAssociators/</dir>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitEvent/</dir>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitter/</dir>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrKShort/</dir>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrMatching/</dir>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrTools/</dir>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/VeloTT/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCheck/v2r7/TrCheck/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCheck/v2r7/TrCheck/</path>
    <filename>dir_000096.html</filename>
    <file>ITrackSelector.h</file>
    <file>ITrStateCreator.h</file>
    <file>TrAcceptance.h</file>
    <file>TrackSelector.h</file>
    <file>TrueStateCreator.h</file>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCheck/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCheck/</path>
    <filename>dir_000093.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCheck/v2r7/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCleanEx/v2r11/TrCleanEx/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCleanEx/v2r11/TrCleanEx/</path>
    <filename>dir_000100.html</filename>
    <file>ITrOutlierKiller.h</file>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCleanEx/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCleanEx/</path>
    <filename>dir_000097.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCleanEx/v2r11/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrExtrapolator/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrExtrapolator/</path>
    <filename>dir_000101.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrExtrapolator/v2r14/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitAssociators/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitAssociators/</path>
    <filename>dir_000104.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitAssociators/v1r3/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitEvent/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitEvent/</path>
    <filename>dir_000107.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitEvent/v4r8/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitter/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitter/</path>
    <filename>dir_000111.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitter/v4r0/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/</path>
    <filename>dir_000128.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgBrunel/</dir>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgTools/</dir>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgVelo/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgBrunel/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgBrunel/</path>
    <filename>dir_000129.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgBrunel/v1r1/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgTools/v7r0/TrgTools/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgTools/v7r0/TrgTools/</path>
    <filename>dir_000135.html</filename>
    <file>StatVar.h</file>
    <file>TrgContainer.h</file>
    <file>TrgDataProvider.h</file>
    <file>TrgL0MuonProvider.h</file>
    <file>TrgTimeCounter.h</file>
    <file>TrgVeloDataHolder.h</file>
    <file>VeloCoord.h</file>
    <file>VeloSector.h</file>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgTools/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgTools/</path>
    <filename>dir_000132.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgTools/v7r0/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgVelo/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgVelo/</path>
    <filename>dir_000136.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgVelo/v7r0/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrKShort/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrKShort/</path>
    <filename>dir_000114.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrKShort/v1r4p1/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrMatching/v2r10p1/TrMatching/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrMatching/v2r10p1/TrMatching/</path>
    <filename>dir_000120.html</filename>
    <file>ITrChi2Calculator.h</file>
    <file>TrChi2Calculator.h</file>
    <file>TrMatch.h</file>
    <file>TrMatchChecker.h</file>
    <file>TrMatchingDataFunctor.h</file>
    <file>TrMatchVeloSeed.h</file>
    <file>TTCandidate.h</file>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrMatching/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrMatching/</path>
    <filename>dir_000117.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrMatching/v2r10p1/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrTools/v2r6/TrTools/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrTools/v2r6/TrTools/</path>
    <filename>dir_000124.html</filename>
    <file>BIntegrator.h</file>
    <file>ClusterFilter.h</file>
    <file>IBIntegrator.h</file>
    <file>IClusterFilter.h</file>
    <file>ITrPtKick.h</file>
    <file>Tr2TracksMatch.h</file>
    <file>TrMeasInfo.h</file>
    <file>TrPtKick.h</file>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrTools/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrTools/</path>
    <filename>dir_000121.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrTools/v2r6/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITAlgorithms/v14r4/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITAlgorithms/v14r4/</path>
    <filename>dir_000017.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITAlgorithms/v14r4/ITAlgorithms/</dir>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITAlgorithms/v14r4/src/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Muon/MuonUtils/v1r0/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Muon/MuonUtils/v1r0/</path>
    <filename>dir_000033.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Muon/MuonUtils/v1r0/MuonUtils/</dir>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Muon/MuonUtils/v1r0/src/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloMoniDst/v1r0/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloMoniDst/v1r0/</path>
    <filename>dir_000007.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloMoniDst/v1r0/src/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgBrunel/v1r1/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgBrunel/v1r1/</path>
    <filename>dir_000130.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgBrunel/v1r1/src/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/OT/OTMonitor/v1r1/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/OT/OTMonitor/v1r1/</path>
    <filename>dir_000038.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/OT/OTMonitor/v1r1/src/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecQC/v1r10/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecQC/v1r10/</path>
    <filename>dir_000072.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecQC/v1r10/src/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecCommon/v1r10/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecCommon/v1r10/</path>
    <filename>dir_000066.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecCommon/v1r10/src/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/VeloTT/v1r11/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/VeloTT/v1r11/</path>
    <filename>dir_000126.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/VeloTT/v1r11/src/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/LongTrack/v1r13/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/LongTrack/v1r13/</path>
    <filename>dir_000086.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/LongTrack/v1r13/src/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/</path>
    <filename>dir_000059.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/Event/</dir>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/RichRecBase/</dir>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecBase/v1r14p1/src/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitAssociators/v1r3/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitAssociators/v1r3/</path>
    <filename>dir_000105.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitAssociators/v1r3/src/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rec/AsctToLinker/v1r3/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rec/AsctToLinker/v1r3/</path>
    <filename>dir_000042.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rec/AsctToLinker/v1r3/src/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrKShort/v1r4p1/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrKShort/v1r4p1/</path>
    <filename>dir_000115.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrKShort/v1r4p1/src/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichPIDMerge/v1r5/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichPIDMerge/v1r5/</path>
    <filename>dir_000056.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichPIDMerge/v1r5/src/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecMCTools/v1r7/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecMCTools/v1r7/</path>
    <filename>dir_000069.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecMCTools/v1r7/src/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichGlobalPID/v1r8/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichGlobalPID/v1r8/</path>
    <filename>dir_000046.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichGlobalPID/v1r8/Event/</dir>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichGlobalPID/v1r8/RichGlobalPID/</dir>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichGlobalPID/v1r8/src/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRingRefit/v1r9/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRingRefit/v1r9/</path>
    <filename>dir_000078.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRingRefit/v1r9/Event/</dir>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRingRefit/v1r9/RichRingRefit/</dir>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRingRefit/v1r9/src/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichLocalPID/v1r9p1/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichLocalPID/v1r9p1/</path>
    <filename>dir_000051.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichLocalPID/v1r9p1/Event/</dir>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichLocalPID/v1r9p1/RichLocalPID/</dir>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichLocalPID/v1r9p1/src/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/Seeding/v2r10/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/Seeding/v2r10/</path>
    <filename>dir_000089.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/Seeding/v2r10/Seeding/</dir>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/Seeding/v2r10/src/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrMatching/v2r10p1/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrMatching/v2r10p1/</path>
    <filename>dir_000118.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrMatching/v2r10p1/src/</dir>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrMatching/v2r10p1/TrMatching/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCleanEx/v2r11/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCleanEx/v2r11/</path>
    <filename>dir_000098.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCleanEx/v2r11/src/</dir>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCleanEx/v2r11/TrCleanEx/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/</path>
    <filename>dir_000075.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Rich/RichRecTools/v2r12/src/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrExtrapolator/v2r14/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrExtrapolator/v2r14/</path>
    <filename>dir_000102.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrExtrapolator/v2r14/src/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITCheckers/v2r3/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITCheckers/v2r3/</path>
    <filename>dir_000021.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/IT/ITCheckers/v2r3/src/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Muon/MuonRec/v2r4/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Muon/MuonRec/v2r4/</path>
    <filename>dir_000029.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Muon/MuonRec/v2r4/MuonRec/</dir>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Muon/MuonRec/v2r4/src/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloPIDs/v2r4/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloPIDs/v2r4/</path>
    <filename>dir_000010.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloPIDs/v2r4/src/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrTools/v2r6/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrTools/v2r6/</path>
    <filename>dir_000122.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrTools/v2r6/src/</dir>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrTools/v2r6/TrTools/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCheck/v2r7/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCheck/v2r7/</path>
    <filename>dir_000094.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCheck/v2r7/src/</dir>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrCheck/v2r7/TrCheck/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/</path>
    <filename>dir_000013.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Calo/CaloReco/v2r7/src/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Muon/MuonID/v3r7p1/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Muon/MuonID/v3r7p1/</path>
    <filename>dir_000025.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Muon/MuonID/v3r7p1/MuonID/</dir>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Muon/MuonID/v3r7p1/src/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitter/v4r0/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitter/v4r0/</path>
    <filename>dir_000112.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitter/v4r0/src/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitEvent/v4r8/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitEvent/v4r8/</path>
    <filename>dir_000108.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitEvent/v4r8/Event/</dir>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/TrFitEvent/v4r8/src/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgVelo/v7r0/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgVelo/v7r0/</path>
    <filename>dir_000137.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgVelo/v7r0/src/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgTools/v7r0/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgTools/v7r0/</path>
    <filename>dir_000133.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgTools/v7r0/src/</dir>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Trg/TrgTools/v7r0/TrgTools/</dir>
  </compound>
  <compound kind="dir">
    <name>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/VeloTT/</name>
    <path>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/VeloTT/</path>
    <filename>dir_000125.html</filename>
    <dir>/afs/cern.ch/lhcb/software/releases/BRUNEL/BRUNEL_v25r2/Tr/VeloTT/v1r11/</dir>
  </compound>
  <compound kind="namespace">
    <name>boost</name>
    <filename>namespaceboost.html</filename>
    <namespace>boost::filesystem</namespace>
  </compound>
  <compound kind="namespace">
    <name>Calo04ECorrection_Local</name>
    <filename>namespace_calo04_e_correction___local.html</filename>
    <class kind="class">Calo04ECorrection_Local::DigitFromCalo</class>
  </compound>
  <compound kind="class">
    <name>Calo04ECorrection_Local::DigitFromCalo</name>
    <filename>class_calo04_e_correction___local_1_1_digit_from_calo.html</filename>
    <base>std::unary_function&lt; const CaloDigit *, bool &gt;</base>
    <member kind="function">
      <type></type>
      <name>DigitFromCalo</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;calo)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DigitFromCalo</name>
      <anchor>a1</anchor>
      <arglist>(const int calo)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(const CaloDigit *digit) const </arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Calo04LCorrection_Local</name>
    <filename>namespace_calo04_l_correction___local.html</filename>
    <class kind="class">Calo04LCorrection_Local::DigitFromCalo</class>
  </compound>
  <compound kind="class">
    <name>Calo04LCorrection_Local::DigitFromCalo</name>
    <filename>class_calo04_l_correction___local_1_1_digit_from_calo.html</filename>
    <base>std::unary_function&lt; const CaloDigit *, bool &gt;</base>
    <member kind="function">
      <type></type>
      <name>DigitFromCalo</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;calo)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DigitFromCalo</name>
      <anchor>a1</anchor>
      <arglist>(const int calo)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(const CaloDigit *digit) const </arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Calo04SCorrection_Local</name>
    <filename>namespace_calo04_s_correction___local.html</filename>
    <class kind="class">Calo04SCorrection_Local::DigitFromCalo</class>
  </compound>
  <compound kind="class">
    <name>Calo04SCorrection_Local::DigitFromCalo</name>
    <filename>class_calo04_s_correction___local_1_1_digit_from_calo.html</filename>
    <base>std::unary_function&lt; const CaloDigit *, bool &gt;</base>
    <member kind="function">
      <type></type>
      <name>DigitFromCalo</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;calo)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DigitFromCalo</name>
      <anchor>a1</anchor>
      <arglist>(const int calo)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(const CaloDigit *digit) const </arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>CaloDigitisation</name>
    <filename>namespace_calo_digitisation.html</filename>
    <class kind="class">CaloDigitisation::Digitisation_with_Constant</class>
    <class kind="class">CaloDigitisation::Digitisation_with_Function</class>
    <class kind="class">CaloDigitisation::Digitisation_with_Function_per_Cell</class>
    <member kind="typedef">
      <type>std::unary_function&lt; MCCaloSummedDeposit *, MCCaloDigit * &gt;</type>
      <name>Digitisation</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloDigitisation::Digitisation_with_Constant</name>
    <filename>class_calo_digitisation_1_1_digitisation__with___constant.html</filename>
    <base>std::unary_function</base>
    <member kind="function">
      <type></type>
      <name>Digitisation_with_Constant</name>
      <anchor>a0</anchor>
      <arglist>(double coefficient=1.0, IMessageSvc *messageService=0)</arglist>
    </member>
    <member kind="function">
      <type>MCCaloDigit *</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(MCCaloSummedDeposit *mcdeposit) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloDigitisation::Digitisation_with_Function</name>
    <filename>class_calo_digitisation_1_1_digitisation__with___function.html</filename>
    <templarg>Functor</templarg>
    <base>std::unary_function</base>
    <member kind="function">
      <type></type>
      <name>Digitisation_with_Function</name>
      <anchor>a0</anchor>
      <arglist>(Functor &amp;functor, IMessageSvc *messageService=0)</arglist>
    </member>
    <member kind="function">
      <type>MCCaloDigit *</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(MCCaloSummedDeposit *mcdigit) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CaloDigitisation::Digitisation_with_Function_per_Cell</name>
    <filename>class_calo_digitisation_1_1_digitisation__with___function__per___cell.html</filename>
    <templarg>Functor</templarg>
    <base>std::unary_function&lt; MCCaloSummedDeposit *, MCCaloDigit * &gt;</base>
    <member kind="function">
      <type></type>
      <name>Digitisation_with_Function_per_Cell</name>
      <anchor>a0</anchor>
      <arglist>(Functor &amp;functor, IMessageSvc *messageService=0)</arglist>
    </member>
    <member kind="function">
      <type>MCCaloDigit *</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(MCCaloSummedDeposit *mcdeposit) const </arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>CaloNewECorrection_Local</name>
    <filename>namespace_calo_new_e_correction___local.html</filename>
    <class kind="class">CaloNewECorrection_Local::DigitFromCalo</class>
  </compound>
  <compound kind="class">
    <name>CaloNewECorrection_Local::DigitFromCalo</name>
    <filename>class_calo_new_e_correction___local_1_1_digit_from_calo.html</filename>
    <base>std::unary_function&lt; const CaloDigit *, bool &gt;</base>
    <member kind="function">
      <type></type>
      <name>DigitFromCalo</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;calo)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DigitFromCalo</name>
      <anchor>a1</anchor>
      <arglist>(const int calo)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(const CaloDigit *digit) const </arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>CaloNewLCorrection_Local</name>
    <filename>namespace_calo_new_l_correction___local.html</filename>
    <class kind="class">CaloNewLCorrection_Local::DigitFromCalo</class>
  </compound>
  <compound kind="class">
    <name>CaloNewLCorrection_Local::DigitFromCalo</name>
    <filename>class_calo_new_l_correction___local_1_1_digit_from_calo.html</filename>
    <base>std::unary_function&lt; const CaloDigit *, bool &gt;</base>
    <member kind="function">
      <type></type>
      <name>DigitFromCalo</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;calo)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DigitFromCalo</name>
      <anchor>a1</anchor>
      <arglist>(const int calo)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(const CaloDigit *digit) const </arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>CaloNewSCorrection_Local</name>
    <filename>namespace_calo_new_s_correction___local.html</filename>
    <class kind="class">CaloNewSCorrection_Local::DigitFromCalo</class>
  </compound>
  <compound kind="class">
    <name>CaloNewSCorrection_Local::DigitFromCalo</name>
    <filename>class_calo_new_s_correction___local_1_1_digit_from_calo.html</filename>
    <base>std::unary_function&lt; const CaloDigit *, bool &gt;</base>
    <member kind="function">
      <type></type>
      <name>DigitFromCalo</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;calo)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DigitFromCalo</name>
      <anchor>a1</anchor>
      <arglist>(const int calo)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(const CaloDigit *digit) const </arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ClusterisationFunctors</name>
    <filename>namespace_clusterisation_functors.html</filename>
    <class kind="class">ClusterisationFunctors::Is_A_Local_Maximum</class>
    <class kind="class">ClusterisationFunctors::SeedFinder</class>
    <class kind="class">ClusterisationFunctors::Is_A_LocalMaximum</class>
  </compound>
  <compound kind="class">
    <name>ClusterisationFunctors::Is_A_Local_Maximum</name>
    <filename>class_clusterisation_functors_1_1_is___a___local___maximum.html</filename>
    <templarg>DET</templarg>
    <templarg>DIGITS</templarg>
    <base>std::unary_function&lt; const CaloDigit *, bool &gt;</base>
    <member kind="function">
      <type></type>
      <name>Is_A_Local_Maximum</name>
      <anchor>a0</anchor>
      <arglist>(const DET *det, const DIGITS &amp;digits)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Is_A_Local_Maximum</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(const CaloDigit *digit) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ClusterisationFunctors::SeedFinder</name>
    <filename>class_clusterisation_functors_1_1_seed_finder.html</filename>
    <templarg>DET</templarg>
    <templarg>DIGITS</templarg>
    <base>std::unary_function&lt; const CaloDigit *, CaloCluster * &gt;</base>
    <member kind="function">
      <type></type>
      <name>SeedFinder</name>
      <anchor>a0</anchor>
      <arglist>(const DET *det, DIGITS &amp;digcol)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SeedFinder</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CaloCluster *</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(const CaloDigit *digit) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ClusterisationFunctors::Is_A_LocalMaximum</name>
    <filename>class_clusterisation_functors_1_1_is___a___local_maximum.html</filename>
  </compound>
  <compound kind="namespace">
    <name>DoubleTanh</name>
    <filename>namespace_double_tanh.html</filename>
    <member kind="function">
      <type>double</type>
      <name>doubleTanh</name>
      <anchor>a0</anchor>
      <arglist>(const double cluster, const double seed, const double size, const CaloCorrection::Parameters &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>doubleTanhPrime</name>
      <anchor>a1</anchor>
      <arglist>(const double cluster, const double seed, const double size, const CaloCorrection::Parameters &amp;parameters)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>HistFun</name>
    <filename>namespace_hist_fun.html</filename>
    <member kind="function">
      <type>void</type>
      <name>unBookVector</name>
      <anchor>a0</anchor>
      <arglist>(std::vector&lt; TYPE &gt; &amp;histoVector, IHistogramSvc *hSvc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eraseVector</name>
      <anchor>a1</anchor>
      <arglist>(std::vector&lt; TYPE &gt; &amp;histoVector)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Hollebeek</name>
    <filename>namespace_hollebeek.html</filename>
    <member kind="function">
      <type>long double</type>
      <name>Asinh</name>
      <anchor>a0</anchor>
      <arglist>(long double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>hollebeek</name>
      <anchor>a1</anchor>
      <arglist>(const double cluster, const double seed, const double size, const CaloCorrection::Parameters &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>hollebeekPrime</name>
      <anchor>a2</anchor>
      <arglist>(const double cluster, const double seed, const double size, const CaloCorrection::Parameters &amp;parameters)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Local::DigitFromCalo</name>
    <filename>class_local_1_1_digit_from_calo.html</filename>
    <base>std::unary_function&lt; const CaloDigit *, bool &gt;</base>
    <base>std::unary_function&lt; const CaloDigit *, bool &gt;</base>
    <member kind="function">
      <type></type>
      <name>DigitFromCalo</name>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;calo)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DigitFromCalo</name>
      <anchor>a1</anchor>
      <arglist>(const int calo)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(const CaloDigit *digit) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DigitFromCalo</name>
      <anchor>a3</anchor>
      <arglist>(const std::string &amp;calo)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DigitFromCalo</name>
      <anchor>a4</anchor>
      <arglist>(const int calo)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a5</anchor>
      <arglist>(const CaloDigit *digit) const </arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>MuonGeometryStore</name>
    <filename>namespace_muon_geometry_store.html</filename>
    <class kind="class">MuonGeometryStore::Parameters</class>
  </compound>
  <compound kind="class">
    <name>MuonGeometryStore::Parameters</name>
    <filename>class_muon_geometry_store_1_1_parameters.html</filename>
    <member kind="function">
      <type></type>
      <name>Parameters</name>
      <anchor>a0</anchor>
      <arglist>(IToolSvc *toolSvc, IDataProviderSvc *detSvc, IMessageSvc *msgSvc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchor>a1</anchor>
      <arglist>(IToolSvc *toolSvc, IDataProviderSvc *detSvc, IMessageSvc *msgSvc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setReadoutNumber</name>
      <anchor>a2</anchor>
      <arglist>(int partitionNumber, int value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setChamberPerRegion</name>
      <anchor>a3</anchor>
      <arglist>(int partitionNumber, unsigned int value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGapPerRegion</name>
      <anchor>a4</anchor>
      <arglist>(int partitionNumber, unsigned int value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLogMapPerRegion</name>
      <anchor>a5</anchor>
      <arglist>(int partitionNumber, unsigned int value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartGapZ</name>
      <anchor>a6</anchor>
      <arglist>(int numberOfGap, int partitionNumber, float value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStopGapZ</name>
      <anchor>a7</anchor>
      <arglist>(int numberOfGap, int partitionNumber, float value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setReadoutType</name>
      <anchor>a8</anchor>
      <arglist>(int readout, int partitionNumber, unsigned int value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLogMapRType</name>
      <anchor>a9</anchor>
      <arglist>(int readout, int partitionNumber, unsigned int value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLogMapMergex</name>
      <anchor>a10</anchor>
      <arglist>(int readout, int partitionNumber, unsigned int value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLogMapMergey</name>
      <anchor>a11</anchor>
      <arglist>(int readout, int partitionNumber, unsigned int value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPhChannelNX</name>
      <anchor>a12</anchor>
      <arglist>(int readout, int partitionNumber, unsigned int value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPhChannelNY</name>
      <anchor>a13</anchor>
      <arglist>(int readout, int partitionNumber, unsigned int value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPhChannelSizeX</name>
      <anchor>a14</anchor>
      <arglist>(int readout, int partitionNumber, float value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPhChannelSizeY</name>
      <anchor>a15</anchor>
      <arglist>(int readout, int partitionNumber, float value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartChamberPositionX</name>
      <anchor>a16</anchor>
      <arglist>(int chamber, float xPosition)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartChamberPositionY</name>
      <anchor>a17</anchor>
      <arglist>(int chamber, float yPosition)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartPositionFirstGapZ</name>
      <anchor>a18</anchor>
      <arglist>(int chamber, float zPosition)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGridX</name>
      <anchor>a19</anchor>
      <arglist>(int chamber, unsigned int value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGridY</name>
      <anchor>a20</anchor>
      <arglist>(int chamber, unsigned int value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setQuadrantChamber</name>
      <anchor>a21</anchor>
      <arglist>(int chamber, unsigned int value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLayoutX</name>
      <anchor>a22</anchor>
      <arglist>(int map, int partitionNumber, int value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLayoutY</name>
      <anchor>a23</anchor>
      <arglist>(int map, int partitionNumber, int value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGapPerFE</name>
      <anchor>a24</anchor>
      <arglist>(int partitionNumber, int value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getReadoutNumber</name>
      <anchor>a25</anchor>
      <arglist>(int partitionNumber)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getChamberPerRegion</name>
      <anchor>a26</anchor>
      <arglist>(int partitionNumber)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getGapPerRegion</name>
      <anchor>a27</anchor>
      <arglist>(int partitionNumber)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getLogMapPerRegion</name>
      <anchor>a28</anchor>
      <arglist>(int partitionNumber)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getStartGapZ</name>
      <anchor>a29</anchor>
      <arglist>(int numberOfGap, int partitionNumber)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getStopGapZ</name>
      <anchor>a30</anchor>
      <arglist>(int numberOfGap, int partitionNumber)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getReadoutType</name>
      <anchor>a31</anchor>
      <arglist>(int readout, int partitionNumber)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getLogMapRType</name>
      <anchor>a32</anchor>
      <arglist>(int readout, int partitionNumber)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getLogMapMergex</name>
      <anchor>a33</anchor>
      <arglist>(int readout, int partitionNumber)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getLogMapMergey</name>
      <anchor>a34</anchor>
      <arglist>(int readout, int partitionNumber)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getPhChannelNX</name>
      <anchor>a35</anchor>
      <arglist>(int readout, int partitionNumber)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getPhChannelNY</name>
      <anchor>a36</anchor>
      <arglist>(int readout, int partitionNumber)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getPhChannelSizeX</name>
      <anchor>a37</anchor>
      <arglist>(int readout, int partitionNumber)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getPhChannelSizeY</name>
      <anchor>a38</anchor>
      <arglist>(int readout, int partitionNumber)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getStartChamberPositionX</name>
      <anchor>a39</anchor>
      <arglist>(int chamber)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getStartChamberPositionY</name>
      <anchor>a40</anchor>
      <arglist>(int chamber)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getStartPositionFirstGapZ</name>
      <anchor>a41</anchor>
      <arglist>(int chamber)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getGridX</name>
      <anchor>a42</anchor>
      <arglist>(int chamber)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getGridY</name>
      <anchor>a43</anchor>
      <arglist>(int chamber)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getQuadrantChamber</name>
      <anchor>a44</anchor>
      <arglist>(int chamber)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGapPerFE</name>
      <anchor>a45</anchor>
      <arglist>(int partitionNumber)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLayoutX</name>
      <anchor>a46</anchor>
      <arglist>(int map, int partitionNumber)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLayoutY</name>
      <anchor>a47</anchor>
      <arglist>(int map, int partitionNumber)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGlobalChamberNumber</name>
      <anchor>a48</anchor>
      <arglist>(unsigned int chamberIndex, int partition)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Rich::GlobalPID</name>
    <filename>namespace_rich_1_1_global_p_i_d.html</filename>
    <member kind="enumeration">
      <name>TkQuality</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Unknown</name>
      <anchor>a4a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Unusable</name>
      <anchor>a4a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LikelihoodOnly</name>
      <anchor>a4a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Physics</name>
      <anchor>a4a3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Rich::PixelParent</name>
    <filename>namespace_rich_1_1_pixel_parent.html</filename>
    <member kind="enumeration">
      <name>Type</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Unknown</name>
      <anchor>a5a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Digit</name>
      <anchor>a5a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MCHit</name>
      <anchor>a5a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RawBuffer</name>
      <anchor>a5a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoParent</name>
      <anchor>a5a4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Rich::Rec</name>
    <filename>namespace_rich_1_1_rec.html</filename>
    <member kind="enumeration">
      <name>ProcStat</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ProcStatAbort</name>
      <anchor>a6a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoRichPixels</name>
      <anchor>a6a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ReachedPixelLimit</name>
      <anchor>a6a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoRichTracks</name>
      <anchor>a6a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ReachedTrTrackLimit</name>
      <anchor>a6a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ReachedRichTrackLimit</name>
      <anchor>a6a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Rich::Track</name>
    <filename>namespace_rich_1_1_track.html</filename>
    <member kind="enumeration">
      <name>Type</name>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Unknown</name>
      <anchor>a16a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Unusable</name>
      <anchor>a16a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Forward</name>
      <anchor>a16a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Match</name>
      <anchor>a16a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Follow</name>
      <anchor>a16a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Seed</name>
      <anchor>a16a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VeloTT</name>
      <anchor>a16a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KsTrack</name>
      <anchor>a16a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Velo</name>
      <anchor>a16a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Trigger</name>
      <anchor>a16a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Rich::Track::Type</type>
      <name>type</name>
      <anchor>a11</anchor>
      <arglist>(const TrgTrack *track)</arglist>
    </member>
    <member kind="function">
      <type>Rich::Track::Type</type>
      <name>type</name>
      <anchor>a12</anchor>
      <arglist>(const TrStoredTrack *track)</arglist>
    </member>
    <member kind="function">
      <type>Rich::Track::Type</type>
      <name>type</name>
      <anchor>a13</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUsable</name>
      <anchor>a14</anchor>
      <arglist>(const Rich::Track::Type type)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUsable</name>
      <anchor>a15</anchor>
      <arglist>(const TrStoredTrack *track)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Rich::TrackParent</name>
    <filename>namespace_rich_1_1_track_parent.html</filename>
    <member kind="enumeration">
      <name>Type</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Unknown</name>
      <anchor>a4a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TrStoredTrack</name>
      <anchor>a4a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TrgTrack</name>
      <anchor>a4a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MCParticle</name>
      <anchor>a4a3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>RichGlobalPIDLocation</name>
    <filename>namespace_rich_global_p_i_d_location.html</filename>
  </compound>
  <compound kind="namespace">
    <name>RichGlobalPIDSummaryLocation</name>
    <filename>namespace_rich_global_p_i_d_summary_location.html</filename>
  </compound>
  <compound kind="namespace">
    <name>RichGlobalPIDTrackLocation</name>
    <filename>namespace_rich_global_p_i_d_track_location.html</filename>
  </compound>
  <compound kind="namespace">
    <name>RichLocalPIDLocation</name>
    <filename>namespace_rich_local_p_i_d_location.html</filename>
  </compound>
  <compound kind="namespace">
    <name>RichRecPhotonLocation</name>
    <filename>namespace_rich_rec_photon_location.html</filename>
  </compound>
  <compound kind="namespace">
    <name>RichRecPixelLocation</name>
    <filename>namespace_rich_rec_pixel_location.html</filename>
  </compound>
  <compound kind="namespace">
    <name>RichRecRingLocation</name>
    <filename>namespace_rich_rec_ring_location.html</filename>
  </compound>
  <compound kind="namespace">
    <name>RichRecSegmentLocation</name>
    <filename>namespace_rich_rec_segment_location.html</filename>
  </compound>
  <compound kind="namespace">
    <name>RichRecStatusLocation</name>
    <filename>namespace_rich_rec_status_location.html</filename>
  </compound>
  <compound kind="namespace">
    <name>RichRecTrackLocation</name>
    <filename>namespace_rich_rec_track_location.html</filename>
  </compound>
  <compound kind="namespace">
    <name>RichRingRefitLocation</name>
    <filename>namespace_rich_ring_refit_location.html</filename>
  </compound>
  <compound kind="namespace">
    <name>RichRingRefitPIDLocation</name>
    <filename>namespace_rich_ring_refit_p_i_d_location.html</filename>
  </compound>
  <compound kind="namespace">
    <name>SortTrack</name>
    <filename>namespace_sort_track.html</filename>
    <class kind="class">SortTrack::increasingMeasByZ</class>
  </compound>
  <compound kind="class">
    <name>SortTrack::increasingMeasByZ</name>
    <filename>class_sort_track_1_1increasing_meas_by_z.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a0</anchor>
      <arglist>(const TrMeasurement *first, const TrMeasurement *second) const </arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>TaggedCellFunctor</name>
    <filename>namespace_tagged_cell_functor.html</filename>
    <class kind="class">TaggedCellFunctor::isEdge</class>
    <class kind="class">TaggedCellFunctor::isClustered</class>
    <class kind="class">TaggedCellFunctor::isClusteredOrEdge</class>
    <class kind="class">TaggedCellFunctor::isSeed</class>
    <class kind="class">TaggedCellFunctor::isWithSeed</class>
    <class kind="class">TaggedCellFunctor::setStatus</class>
  </compound>
  <compound kind="class">
    <name>TaggedCellFunctor::isEdge</name>
    <filename>class_tagged_cell_functor_1_1is_edge.html</filename>
    <base>std::unary_function&lt; const CelAutoTaggedCell *, bool &gt;</base>
    <member kind="function">
      <type></type>
      <name>isEdge</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~isEdge</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(const CelAutoTaggedCell *taggedCell) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TaggedCellFunctor::isClustered</name>
    <filename>class_tagged_cell_functor_1_1is_clustered.html</filename>
    <base>std::unary_function&lt; const CelAutoTaggedCell *, bool &gt;</base>
    <member kind="function">
      <type></type>
      <name>isClustered</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~isClustered</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(const CelAutoTaggedCell *taggedCell) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TaggedCellFunctor::isClusteredOrEdge</name>
    <filename>class_tagged_cell_functor_1_1is_clustered_or_edge.html</filename>
    <base>std::unary_function&lt; const CelAutoTaggedCell *, bool &gt;</base>
    <member kind="function">
      <type></type>
      <name>isClusteredOrEdge</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~isClusteredOrEdge</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(const CelAutoTaggedCell *taggedCell) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TaggedCellFunctor::isSeed</name>
    <filename>class_tagged_cell_functor_1_1is_seed.html</filename>
    <base>std::unary_function&lt; const CelAutoTaggedCell *, bool &gt;</base>
    <member kind="function">
      <type></type>
      <name>isSeed</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~isSeed</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(const CelAutoTaggedCell *taggedCell) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TaggedCellFunctor::isWithSeed</name>
    <filename>class_tagged_cell_functor_1_1is_with_seed.html</filename>
    <base>std::unary_function&lt; CelAutoTaggedCell *, bool &gt;</base>
    <member kind="function">
      <type></type>
      <name>isWithSeed</name>
      <anchor>a0</anchor>
      <arglist>(const CaloCellID &amp;seed)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~isWithSeed</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(CelAutoTaggedCell *taggedCell) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TaggedCellFunctor::setStatus</name>
    <filename>class_tagged_cell_functor_1_1set_status.html</filename>
    <base>std::unary_function&lt; CelAutoTaggedCell *, void &gt;</base>
    <member kind="function">
      <type></type>
      <name>setStatus</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~setStatus</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(CelAutoTaggedCell *taggedCell) const </arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>TrCandidateLocation</name>
    <filename>namespace_tr_candidate_location.html</filename>
  </compound>
  <compound kind="namespace">
    <name>TrDataFunctor</name>
    <filename>namespace_tr_data_functor.html</filename>
    <class kind="class">TrDataFunctor::equalTo</class>
    <class kind="class">TrDataFunctor::typeEqualTo</class>
    <class kind="class">TrDataFunctor::less_z</class>
    <class kind="class">TrDataFunctor::greater_z</class>
    <class kind="class">TrDataFunctor::increasingByZ</class>
    <class kind="class">TrDataFunctor::decreasingByZ</class>
    <class kind="class">TrDataFunctor::increasingRes</class>
    <class kind="class">TrDataFunctor::hasOnTrack</class>
    <class kind="class">TrDataFunctor::hasOnTrackOfType</class>
  </compound>
  <compound kind="class">
    <name>TrDataFunctor::equalTo</name>
    <filename>class_tr_data_functor_1_1equal_to.html</filename>
    <base>std::unary_function&lt; TrMeasurement *, bool &gt;</base>
    <member kind="function">
      <type></type>
      <name>equalTo</name>
      <anchor>a0</anchor>
      <arglist>(const TrMeasurement &amp;meas)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(const TrMeasurement *meas) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrDataFunctor::typeEqualTo</name>
    <filename>class_tr_data_functor_1_1type_equal_to.html</filename>
    <base>std::unary_function&lt; TrMeasurement *, bool &gt;</base>
    <member kind="function">
      <type></type>
      <name>typeEqualTo</name>
      <anchor>a0</anchor>
      <arglist>(const TrMeasurement::EMeasType &amp;measType)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(const TrMeasurement *meas) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrDataFunctor::less_z</name>
    <filename>class_tr_data_functor_1_1less__z.html</filename>
    <base>std::unary_function&lt; TrMeasurement *, bool &gt;</base>
    <member kind="function">
      <type></type>
      <name>less_z</name>
      <anchor>a0</anchor>
      <arglist>(double z)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(const TrMeasurement *meas) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrDataFunctor::greater_z</name>
    <filename>class_tr_data_functor_1_1greater__z.html</filename>
    <base>std::unary_function&lt; TrMeasurement *, bool &gt;</base>
    <member kind="function">
      <type></type>
      <name>greater_z</name>
      <anchor>a0</anchor>
      <arglist>(double z)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(const TrMeasurement *meas) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrDataFunctor::increasingByZ</name>
    <filename>class_tr_data_functor_1_1increasing_by_z.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a0</anchor>
      <arglist>(const TrMeasurement *firstHit, const TrMeasurement *secondHit) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrDataFunctor::decreasingByZ</name>
    <filename>class_tr_data_functor_1_1decreasing_by_z.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a0</anchor>
      <arglist>(const TrMeasurement *firstHit, const TrMeasurement *secondHit) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrDataFunctor::increasingRes</name>
    <filename>class_tr_data_functor_1_1increasing_res.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a0</anchor>
      <arglist>(const TrMeasurement *firstHit, const TrMeasurement *secondHit) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrDataFunctor::hasOnTrack</name>
    <filename>class_tr_data_functor_1_1has_on_track.html</filename>
    <base>std::unary_function&lt; TrMeasurement *, bool &gt;</base>
    <member kind="function">
      <type></type>
      <name>hasOnTrack</name>
      <anchor>a0</anchor>
      <arglist>(const TrFitTrack *track)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(const TrMeasurement *meas) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrDataFunctor::hasOnTrackOfType</name>
    <filename>class_tr_data_functor_1_1has_on_track_of_type.html</filename>
    <base>std::unary_function&lt; TrMeasurement *, bool &gt;</base>
    <member kind="function">
      <type></type>
      <name>hasOnTrackOfType</name>
      <anchor>a0</anchor>
      <arglist>(const TrFitTrack *track, TrMeasurement::EMeasType measType)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(const TrMeasurement *meas) const </arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>TrFitTrackLocation</name>
    <filename>namespace_tr_fit_track_location.html</filename>
  </compound>
  <compound kind="namespace">
    <name>TrMatchingDataFunctor</name>
    <filename>namespace_tr_matching_data_functor.html</filename>
    <class kind="class">TrMatchingDataFunctor::Less_by_Chi2</class>
    <class kind="class">TrMatchingDataFunctor::compByLayer_LB</class>
    <class kind="class">TrMatchingDataFunctor::compByWafer_LB</class>
  </compound>
  <compound kind="class">
    <name>TrMatchingDataFunctor::Less_by_Chi2</name>
    <filename>class_tr_matching_data_functor_1_1_less__by___chi2.html</filename>
    <templarg>TYPE1</templarg>
    <templarg>TYPE2</templarg>
    <base>std::binary_function&lt; TYPE1, TYPE2, bool &gt;</base>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a0</anchor>
      <arglist>(TYPE1 obj1, TYPE2 obj2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrMatchingDataFunctor::compByLayer_LB</name>
    <filename>class_tr_matching_data_functor_1_1comp_by_layer___l_b.html</filename>
    <templarg>TYPE</templarg>
    <base>std::binary_function&lt; const TYPE, const ITChannelID, bool &gt;</base>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a0</anchor>
      <arglist>(const TYPE &amp;obj, const ITChannelID &amp;testID) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrMatchingDataFunctor::compByWafer_LB</name>
    <filename>class_tr_matching_data_functor_1_1comp_by_wafer___l_b.html</filename>
    <templarg>TYPE</templarg>
    <base>std::binary_function&lt; const TYPE, const ITChannelID, bool &gt;</base>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a0</anchor>
      <arglist>(const TYPE &amp;obj, const ITChannelID &amp;testID) const </arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>TrMatchLocation</name>
    <filename>namespace_tr_match_location.html</filename>
  </compound>
</tagfile>
