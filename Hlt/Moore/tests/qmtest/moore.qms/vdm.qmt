<?xml version="1.0" ?><!DOCTYPE extension  PUBLIC '-//QM/2.3/Extension//EN'  'http://www.codesourcery.com/qm/dtds/2.3/-//qm/2.3/extension//en.dtd'>
<!--
#######################################################
# SUMMARY OF THIS TEST
# ...................
# Author: rlambert
# Purpose: Test Moore running some very simple threshold setting, in this case, a vandemeer like setting.
# Prerequisites: Needs specific L0 on the input file, whihc was previously emulated and uploaded ot the TestFileDB
# Common failure modes, severities and cures: 
#               . SEVERE: Segfault or raised exception, stderr, nonzero return code
#               . MAJOR: additional FATAL/ERROR messages always a major problem. no ERROR messages should ever be printed when running this test.
#               . MINOR: additional WARNING messages, it is unclear how severe these may be, you will need to hunt down the cause and either fix the problem or suppress the warning.
#               . MINOR: this test compares the timing table events to see if it looks like pass-through and has the minimum bias/beam gas lines. If we change how we do vdm, this needs updating.
#######################################################
-->
<extension class="GaudiTest.GaudiExeTest" kind="test">
  <argument name="program"><text>../options/run_moore.py</text></argument>
  <argument name="args"><set>
    <text>-n</text>
    <text>1200</text>
    <text>VanDerMeerScan_Jul12</text>
    <text>-d</text>
    <text>2012_raw_L041</text>
  </set></argument>
  <argument name="unsupported_platforms"><set><text>win.*</text></set></argument>
  <argument name="validator"><text>
expected_string = &quot;SUCCESS Reading Event record 1101. Record number within stream 1: 1101&quot;
if stdout.find(expected_string) == -1:
    causes.append('missing string')
    result['moore.vdm.expected_string'] = result.Quote(expected_string)

#ideally no errors, but there is always two when opening every Raw file
countErrorLines({"FATAL":0,"ERROR":0,"WARNING":0})

from LHCbAlgs import TTParser
timingdict=TTParser.event_av_dict("VanDerMeerScan_Jul12.csv")

if len([t for t in timingdict if t.startswith("Hlt2")])!=1:
    causes.append('Does not look like pass-through')
    result['moore.vdm.passthrough'] = result.Quote('Expected only one Hlt2 entry in timing table, saw '+','.join([t for t in timingdict if t.startswith("Hlt2")]))

if 'Hlt1BeamGasBeam1' not in timingdict:
    causes.append('Doesnt contain beamgas lines')
    result['moore.vdm.bg'] = result.Quote('No line called Hlt1BeamGasBeam1 in timing table')
elif timingdict['Hlt1BeamGasBeam1'][0]!=1200:
    causes.append('BeamGas does not see all events')
    result['moore.vdm.passnumber'] = result.Quote('Expected 1200 events, saw '+str(timingdict['Hlt1BeamGasBeam1'][0]))


</text></argument>
</extension>

