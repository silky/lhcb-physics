<?xml version="1.0" ?><!DOCTYPE extension  PUBLIC '-//QM/2.3/Extension//EN'  'http://www.codesourcery.com/qm/dtds/2.3/-//qm/2.3/extension//en.dtd'>
<extension class="GaudiTest.GaudiExeTest" kind="test">
  <argument name="program"><text>gaudirun.py</text></argument>
  <argument name="timeout">
    <integer>1200</integer>
  </argument>
  <argument name="args"><set>
    <text>../options/Moore_Hlt1And2.py</text>
    <text>../options/Moore_Hlt2Only.py</text>
  </set></argument>
  <!--<argument name="prerequisites"><set>
    <tuple><text>moore.physics.deferral.hlt1only</text><enumeral>PASS</enumeral></tuple>
  </set></argument>--><!-- commented out for now due to RICH error messages-->
  <argument name="unsupported_platforms"><set><text>win.*</text></set></argument>
  <argument name="validator"><text>
#print "YES"
#reftable
reftable='../refs/physics.deferral.timing.ref'
from math import fabs

timing=[]
timingdict={}
for line in stdout.split('\n'):
    if 'TIMER' not in line or 'Hlt2' not in line:
        continue
    line=line.replace('\t',' ')
    line=line.replace('  ',' ')
    line=line[line.find('INFO')+4:]
    line=line.strip().rstrip()
    line=line.split('|')
    if len(line)&lt;5:
        continue
    if not line[0].startswith('Hlt2'): 
        continue
    name=line[0].strip().rstrip()
    num=line[4].strip().rstrip()
    timing.append(':'.join([name,line[4]]))
    timingdict[name]=int(num)

timing='\n'.join(timing)
reftiming=open(reftable)
refresult=reftiming.read()
reftiming.close()
refresult=refresult.split('\n')
refresult=[ref for ref in refresult if ref.startswith('Hlt2')]
refresult='\n'.join(refresult)

if refresult.strip().rstrip()!=timing.strip().rstrip():
    #print "YES55"
    newreftiming=open(reftable+'.hlt2.new','w')
    newreftiming.write(timing)
    newreftiming.close()
    refresultdict={}
    for line in refresult.split('\n'):
        line=line.strip().rstrip()
        if len(line)&lt;2 : 
            continue
        if not line.startswith("Hlt2"):
            continue
        refresultdict[':'.join(line.split(':')[:-1])]=int(line.split(':')[-1])
    
    causes.append('#events in timing tables disagree')
    missing=[r for r in refresultdict if r not in timingdict]
    added=[r for r in timingdict if r not in refresultdict]
    diff=[r for r in refresultdict if ((r in timingdict) and (timingdict[r]!=refresultdict[r]))]
    singleEventDiffs=[r for r in diff if abs(refresultdict[r]-timingdict[r])&lt;2]
    lineFailureDiff=[r for r in diff if ((r not in singleEventDiffs) and (refresultdict[r]!=0) and (timingdict[r]==0))]
    tenPercentDiffs=[r for r in diff if ((r not in singleEventDiffs) and (r not in lineFailureDiff) and (fabs(float(refresultdict[r]-timingdict[r])/float(refresultdict[r]+timingdict[r]))&lt;0.1))]
    rest=[r for r in diff if ((r not in singleEventDiffs) and (r not in lineFailureDiff) and (r not in tenPercentDiffs))]
    if len(missing)+len(added)+len(diff)&gt;100:
        result['moore.physics.2012.a_total']=result.Quote('More than 100 differences, summary only')
	if len(missing):
            result['moore.physics.2012.b_missing'] = result.Quote("Missing: " + str(len(missing)))
	if len(added):
	    result['moore.physics.2012.c_added'] = result.Quote("Added: " + str(len(added)))
	if len(singleEventDiffs):
	    result['moore.physics.2012.d_single'] = result.Quote("+/- 1 event: " + str(len(singleEventDiffs)))
	if len(lineFailureDiff):
	    result['moore.physics.2012.e_failure'] = result.Quote("zero events: " + str(len(lineFailureDiff)))
	if len(tenPercentDiffs):
	    result['moore.physics.2012.f_10pc'] = result.Quote("+/- &lt;10\%: " + str(len(tenPercentDiffs)))
	if len(rest):
	    result['moore.physics.2012.g_different'] = result.Quote("Rest: " + str(len(rest)))
	
    else:
	if len(missing):
            result['moore.physics.2012.b_missing'] = result.Quote("Missing:\n\t" +',\n\t'.join(missing))
	if len(added):
            result['moore.physics.2012.c_added'] = result.Quote("Added:\n\t" + ',\n\t'.join(added))
	if len(singleEventDiffs):
            result['moore.physics.2012.d_single'] = result.Quote("+/- 1 event:\n\t" +',\n\t'.join([r+':'+str(refresultdict[r])+'-&gt;'+str(timingdict[r]) for r in singleEventDiffs]))
	if len(lineFailureDiff):
            result['moore.physics.2012.e_failure'] = result.Quote("zero events:\n\t" +',\n\t'.join([r+':'+str(refresultdict[r])+'-&gt;'+str(timingdict[r]) for r in lineFailureDiff]))
	if len(tenPercentDiffs):
            result['moore.physics.2012.f_10pc'] = result.Quote("+/- &lt;10\%:\n\t" + ',\n\t'.join([r+':'+str(refresultdict[r])+'-&gt;'+str(timingdict[r]) for r in tenPercentDiffs]))
	if len(rest):
            result['moore.physics.2012.g_different'] = result.Quote("Rest:\n\t" + ',\n\t'.join([r+':'+str(refresultdict[r])+'-&gt;'+str(timingdict[r]) for r in rest]))

#count error lines, shouldn't be any warnings or errors, ideally
#error lines here are stupid Gaudi warnings about not being able to navigate to input file, 3 input files means 6 errors.
countErrorLines({"FATAL":0,"ERROR":6,"WARNING":1})

</text></argument>
</extension>

