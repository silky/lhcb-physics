/* Generated by Together */

#ifndef RICHHPDDATA_H
#define RICHHPDDATA_H

#include "RichReadout/Pixel.h"
#include <vector>

class RichHpdData {

public:


	RichHpdData() : sz(32) {};

	RichHpdData(const Pixel* id, int, int);

	RichHpdData(const Pixel* id, const std::vector<int>& );

	int& operator[](unsigned int i)
	{
    	if(i>=sz) throw "DataFrame: Out of range";
    	return DataFrame[i];
  	}

  	const int& operator[](unsigned int i) const
  	{
    	if(i>=sz) throw "DataFrame: Out of range";
    	return DataFrame[i];
  	}

   	RichHpdData& operator*=(int c)
  	{
    	for(unsigned int i=0;i<sz;i++)
      	DataFrame[i]*=c;
    	return *this;
  	}
  	
	RichHpdData& operator+=(const RichHpdData&ts)
    {
    	if(sz==ts.sz)
      	{
        	for(unsigned int i=0;i<sz;i++)
        	DataFrame[i]+=ts.DataFrame[i];
      	}
      	return *this;
    }

   //RichHpdData operator<<(unsigned int n)
    //{
      //unsigned int i;
      //RichHpdData ts(*this);
      //for(i=n;i<sz;i++)
        //ts.DataFrame[n]=ts.DataFrame[i-n];
      //if(n>sz) n=sz;
      //for(i=0;i<n;i++)
        //ts.DataFrame[i]=0;
      //return ts;
    //}

   //bool operator<(const RichHpdData& d) const
    //{
      //return MyCell()<d.MyCell() ? true : false ;
    //}

   //bool operator==(const RichHpdData& d) const
    //{
      //return MyCell()==d.MyCell() ? true : false ;
    //}



  //void reset()
    //{
      //for(unsigned int i=0;i<sz;i++)
        //DataFrame[i]=0;
    //}

  int size() const{return sz;}

  //const RichSmartID& MyCell() const{ return mycell;}

protected:

  std::vector<int> DataFrame;

  unsigned int sz;
  Pixel mypixel;

};
#endif //RICHHPDDATA_H
