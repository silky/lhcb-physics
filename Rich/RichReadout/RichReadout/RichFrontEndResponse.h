/* Generated by Together */

#ifndef RICHFRONTENDRESPONSE_H
#define RICHFRONTENDRESPONSE_H

#include <string>
#include <cmath>
#include <map>
#include <vector>
#include <algorithm>

// from Gaudi
#include "GaudiKernel/Algorithm.h"
#include "GaudiKernel/IDataProviderSvc.h"
#include "GaudiKernel/SmartDataPtr.h"
#include "GaudiKernel/RndmGenerators.h"

#include "RiSicbGeom/SicbGeom.h"
#include "RiSicbGeom/PixelFinder.h"
#include "RichKernel/RichDetectorType.h"
#include "RichDetTools/IRichDetInterface.h"
#include "RichKernel/RichSmartID.h"
#include "RichReadout/Pixel.h"
#include "RichReadout/RichTimeSample.h"

#include "Event/MCHit.h"
#include "Event/MCRichDeposit.h"
#include "Event/MCRichSummedDeposit.h"
#include "Event/MCRichDigit.h"

class RichRegistry;
class RichHpdData;
class RichTimeSample;

class IHistogram1D;

class RichFrontEndResponse : public Algorithm {

public:

  RichFrontEndResponse( const std::string& name, ISvcLocator* pSvcLocator );
  virtual ~RichFrontEndResponse();

  virtual StatusCode initialize();
  virtual StatusCode finalize(){ return StatusCode::SUCCESS; };
  virtual StatusCode execute();

  typedef std::map<unsigned int, RichTimeSample  > samplecache_t;
  typedef std::vector<RichHpdData> datacache_t;

private:

  StatusCode Simple();
  StatusCode Analog();
  StatusCode Digital();
  StatusCode bookHistograms();

  ICdfReader* m_reader;
  IPixelFinder* m_finder;
  IRichDetInterface* m_interface;

  const RichBase* actual_base;
  RichRegistry* theRegistry;
  datacache_t datacache;

  samplecache_t tscache;


  MCRichSummedDeposits* SummedDeposits;

  std::string m_mcRichSummedDepositsLocation;
  std::string m_mcRichDigitsLocation;
  std::string m_mode;
  std::string m_histoPth;

  int m_Baseline;
  int m_AdcCut;

  double m_Sigma;
  double m_Calibration;
  double m_Threshold;

  IHistogram1D* m_pulseHeight;

};

#endif
