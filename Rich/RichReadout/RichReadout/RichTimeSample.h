/* Generated by Together */

#ifndef RICHTIMESAMPLE_H
#define RICHTIMESAMPLE_H 1

#include <vector>
#include "RichReadout/Pixel.h"

class Pixel;

class RichTimeSample {

public:

  ~RichTimeSample(){};

  RichTimeSample():sz(0){};

  RichTimeSample( const Pixel* id, int isize, double value):
    mypixel(id), TimeFrame(isize,value), sz(isize) {};

  std::vector<double> TimeSample() {return TimeFrame;}
  
void insert(unsigned int i , double value)
  {
    TimeFrame[i]=value;
  }

  unsigned int size() {return sz;}

  double& operator[](unsigned int i)
  {
    return TimeFrame[i];
  }

  const double& operator[](unsigned int i) const
  {
    return TimeFrame[i];
  }


  RichTimeSample& operator*=(double c)
  {
    for(unsigned int i=0;i<sz;i++)
      TimeFrame[i]*=c;
    return *this;
  }


  RichTimeSample& operator+=(const RichTimeSample&ts)
  {
    if(sz==ts.sz) {
      for(unsigned int i=0;i<sz;i++) TimeFrame[i]+=ts.TimeFrame[i];
    }
    return *this;
  }

  RichTimeSample operator<<(unsigned int n)
  {
    unsigned int i;
    RichTimeSample ts(*this);
    for(i=n;i<sz;i++)
      ts.TimeFrame[n]=ts.TimeFrame[i-n];
    if(n>sz) n=sz;
    for(i=0;i<n;i++)
      ts.TimeFrame[i]=0.0;
    return ts;
  }

  bool operator<(const RichTimeSample&d) const
  {
    return MyPixel()<d.MyPixel() ? true : false ;
  }

  bool operator==(const RichTimeSample&d) const
  {
    return MyPixel()==d.MyPixel() ? true : false ;
  }

  void reset()
  {
    for(unsigned int i=0;i<sz;i++)
      TimeFrame[i]=0.0;
  }


  const Pixel* MyPixel() const { return mypixel; }

private:

  const Pixel* mypixel;
  std::vector<double> TimeFrame;
  unsigned int sz;

};

#endif //RICHTIMESAMPLE_H
