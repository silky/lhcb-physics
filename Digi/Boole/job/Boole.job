#!/bin/csh
###########################################################
#   Script for running Boole in interactive and batch
###########################################################
#
# in BATCH, output files are written in the BATCH machine
# and copied at the end to your $MYWORKDIR output directory
# in INTERACTIVE output files are written to the current directory
#
set MODE = $CMTCONFIG

if ($#argv == 0 ) then
  echo "\nUsage: Boole.job <options> [<mode>]"
  echo " where:"
  echo "  <options> (mandatory) is name of options file (e.g. v200601)"
  echo "  <mode>    (optional)  is execution mode (e.g. $CMTDEB)"
  exit 0
else
   set Dver = $1
  if ($#argv == 2) then
    set MODE = "$2" 
    shift
  endif
  shift
endif
#
set Bversion = "v12r3"
echo "Excuting Boole $Bversion using options file $Dver.opts"
#

if ($?LS_SUBCWD) then 
# in BATCH, WORKDIR is set by the system
# in BATCH, location of executable has to be given explicitly - e.g.:
  setenv MYJOBROOT ~/cmtuser/Digi/Boole/$Bversion
else
# in interactive set WORKDIR to submission directory
  set WORKDIR = $PWD
# in interactive, executable is under same root directory as this command file
  cd `dirname $0` 
  cd ..
  set MYJOBROOT = $PWD
endif

# == set the program environment
if ($?Boole_release_area) then
  source $Boole_release_area/BooleEnv/$Bversion/cmt/setup.csh
else
  source $LHCBRELEASES/BooleEnv/$Bversion/cmt/setup.csh
endif
source $MYJOBROOT/cmt/setup.csh -tag=$MODE

# Go to working directory
cd $WORKDIR

if ($?LS_SUBCWD) then
# == in batch copy the executable and options files to $WORKDIR
  cp $MYJOBROOT/$MODE/Boole.exe tmpjob_$Dver.exe
  cp $MYJOBROOT/options/*.opts .
  setenv BOOLEOPTS .
else
# == in interactive create a link to the executable
  ln -fs $MYJOBROOT/$MODE/Boole.exe tmpjob_$Dver.exe
endif

# == run the excutable ================================
if ($MODE == $CMTDEB) then
  setenv JOBOPTPATH $BOOLEOPTS/$Dver.opts
  gvd ./tmpjob_$Dver.exe
else
  time ./tmpjob_$Dver.exe $BOOLEOPTS/$Dver.opts
endif

#  Is there a core dump
set corefile = `ls -a | grep core`
if ($corefile != "") then
   if(-e gdbcmds) rm gdbcmds
   echo where > gdbcmds
   echo quit >> gdbcmds
   gdb -x gdbcmds ./tmpjob_$Dver.exe $corefile<<EOF
EOF
rm gdbcmds
endif

# == job is finished: remove temporary files ==========
rm tmpjob_$Dver.exe
if ($?LS_SUBCWD) then
  rm -f *.opts
# if in batch copy output files to user directories
  ls *.* >! RETURN
endif

exit 0
