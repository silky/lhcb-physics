/*
  powheg.cpp is part of the Powheg++ interface library.
  Copyright (C) 2011 Philip Ilten
  This code links with POWHEG-BOX routines and is based on LHAupFortran.h 
  from the PYTHIA source code. PYTHIA is licensed under the GNU GPL version 2.
  This code is also licensed under the GNU GPL version 2.
*/

#include "powheg.h"

namespace Powheg {
  // Constructor.
  Powheg::Powheg()  {

    // Initialize the process matrix element pointer to zero.
    matrixElement = 0;

    // Initialize all matrix element pointers.
    matrixElements.push_back(new LHAupPowheg_dijet());
    matrixElements.push_back(new LHAupPowheg_gg_h());
    matrixElements.push_back(new LHAupPowheg_hvq());
    matrixElements.push_back(new LHAupPowheg_st_sch());
    matrixElements.push_back(new LHAupPowheg_st_tch());
    matrixElements.push_back(new LHAupPowheg_vbf_h());
    matrixElements.push_back(new LHAupPowheg_vbf_wp_wp());
    matrixElements.push_back(new LHAupPowheg_w());
    matrixElements.push_back(new LHAupPowheg_wbb());
    matrixElements.push_back(new LHAupPowheg_wj());
    matrixElements.push_back(new LHAupPowheg_ww());
    matrixElements.push_back(new LHAupPowheg_wz());
    matrixElements.push_back(new LHAupPowheg_z());
    matrixElements.push_back(new LHAupPowheg_zj());	      
    matrixElements.push_back(new LHAupPowheg_zz());

  }

  // Destructor.
  Powheg::~Powheg() {
    
    // Delete all matrix element pointers.
    for(vector<LHAupPowheg*>::iterator me = matrixElements.begin();
	me != matrixElements.end(); me++) delete *me;
    
    // Clear the matrix elements vector.
    matrixElements.clear();
    
    // Remove the created configuration and PDF files.
    remove("powheg.input");
    remove("cteq6m");
  }
  
  // Read in a configuration string.
  void Powheg::readString(string setting) {
    settings.push_back(setting);
  }

  // Read in a configuration file.
  bool Powheg::readFile(string name) {

    // Open the input file.
    fstream file(name.c_str(), ios::in);
    string line;
    bool   powheg = false;
    
    // Loop over the lines of the file.
    while (getline(file, line, '\n')) {

      // Check the file has the POWHEG directive.
      if (line.substr(0, 8) == "#POWHEG ") {
	powheg = true;
	line = line.substr(8);

	// Check if the matrix element is set.
	if (line.find("!process") == 0) {
	  line.erase(remove(line.begin(), line.end(), '\t'), line.end());
	  line.erase(remove(line.begin(), line.end(), ' '), line.end());
	  process = line.substr(8);
	}
	// Check if the PDF is set.
	else if (line.find("!pdf") == 0) {
	  line.erase(remove(line.begin(), line.end(), '\t'), line.end());
	  line.erase(remove(line.begin(), line.end(), ' '), line.end());
	  pdf = line.substr(4);
	}
	else settings.push_back(line);
      }
    }
    file.close();
    return powheg;
  }

  // Initialize the Powheg wrapper.
  void Powheg::init() {
    
    // Open the output configuration file.
    fstream config("powheg.input", ios::out);

    // Copy the settings to the configuration file.
    for (unsigned int i = 0; i < settings.size(); i++) {
      config << settings[i] << "\n";
    }
    config.close();

    // Open the input and output PDF files.
    fstream pdfin(pdf.c_str(), ios::in | ios::binary);
    fstream pdfout("cteq6m", ios::out | ios::binary);
    
    // Copy the PDF input to the PDF output.
    pdfout << pdfin.rdbuf();
    pdfin.close();
    pdfout.close();

    // Set the process matrix element.
    for (vector<LHAupPowheg*>::iterator me = matrixElements.begin();
	 me != matrixElements.end(); me++) {
      if ((*me)->libraryName() == process) matrixElement = *me;
    }
    if (!matrixElement) cout << "Powheg++ Error: Unknown process " <<
      process << ".\n";
  }

  // Clean up the grid files generated by POWHEG-BOX after a run.
  void Powheg::cleanRun() {
    remove("powheg.input");
    remove("cteq6m");
    remove("FlavRegList");
    remove("pwgborngrid.top");
    remove("pwgbtlgrid.top");
    remove("pwggrid.dat");
    remove("pwghistnorms.top");
    remove("pwgNLO.top");
    remove("pwgrmngrid.top");
    remove("pwgstat.dat");
    remove("pwgubound.dat");
    remove("pwgxgrid.dat");
    remove("pwhg_checklimits");
  }
}
