CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C...SUBROUTINES FOR gg (or q\bar{q})->Bc+b+\bar{c}:  Bc in S-wave    C
C...AMP2UP()------SQUARE OF THE AMPLITUDE IN THE C.M.S.              C
C...BUNDHELICITY--BOUND STATE HELICITIES FOR 1S0 AND 3S1.            C
C...FREEHELICITY--HELICITY FOR g+g->\bar{b}+c+b+\bar{c}.             C
C...DOTUP()-------DOT PRODUCT OF TWO MOMENTUM.                       C
C...POLSPPUP()----SPINNOR PRODUCT INVOLVING Bc* POLARIZATION VECTOR. C
C...INPUP()-------INNER PRODUCT OF TWO MASSLESS PARTICAL.            C
C...SPPUP()-------SPINOR PRODUCT OF <p1+|\slash(p3)|p2+>.            C
C...RANDA()-------GENERATE A GROUP OF RANDOM NUMBERS.                C
C...PHASE_GEN()---DEAL WITH THE THREE-BODY PHASE SPACE.              C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C...       BC IN COLOR-SINGLET AND COLOR-OCTET STATES.               C
C Copyright (c) Z.X ZHANG, Chafik Driouich, Paula Eerola and X.G. Wu C
C reference: Comput.Phys.Commun. 159,192(2004); hep-ph/0502155;      C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
	SUBROUTINE XSECTION(SIGSCL,SIGVCT)
	IMPLICIT DOUBLE PRECISION (A-H,O-Z)
	IMPLICIT INTEGER (I-N)
	
	DOUBLE PRECISION COLFAC(10),CFSCL(10),CFVCT(10)
	DOUBLE COMPLEX FINCOL(10,16),COLMAT,BUNDAMP
	COMMON/UPCOM/ECM,PMBC,PMB,PMC,FBCC,PMOMUP(5,8),
     & 	COLMAT(10,64),BUNDAMP(4),PMOMZERO(5,8)
	COMMON/COLFLOW/AMP2CF(10),SMATVAL

C...FOR TRANSFORM THE SUBPROCESS INFORMATION, I.E.,  WHETHER USING
C...THE SUBPROCESS q\bar{q}->Bc+b+\bar{c} TO GENERATE EVENTS.
	COMMON/QQBAR/IQQBAR,IQCODE

C...TRANSFORM THE BOUND STATE INFORMATION.
	COMMON/COUNTER/IBCSTATE,NEV
	COMMON/COLOCT/IOCTET

C...INITIAL VALUE.
        SMATVAL=0.0D0
	SIGSCL =0.0D0
	SIGVCT =0.0D0

	DO II=1,10
	   CFVCT(II) =0.0D0
	   CFSCL(II) =0.0D0
	   AMP2CF(II)=0.0D0
	END DO

C...COLOR FACTORS FOR THE HADRONIC PRODUCTION OF Bc MESON.
C...IT IS USED ONLY FOR THE SUBPROCESS: gg->Bc+b+~c.
	IF(IQQBAR.EQ.0) THEN
	   IF(IOCTET.EQ.0) THEN
	      COLFAC(1) =4.0D0/27.0D0
	      COLFAC(2) =4.0D0/27.0D0
	      COLFAC(3) =-1.0D0/27.0D0
	      COLFAC(4) =3.0D0/2.0D0
	      COLFAC(5) =-1.0D0/3.0D0
	   END IF
	   IF(IOCTET.EQ.1) THEN
	      COLFAC(1) = 32.0D0/81.0D0
	      COLFAC(2) =-4.0D0/81.0D0
	      COLFAC(3) = 4.0D0/9.0D0
	      COLFAC(4) =-1.0D0/18.0D0
	      COLFAC(5) =-1.0D0/9.0D0
	      COLFAC(6) = 7.0D0/18.0D0
	      COLFAC(7) = 1.0D0/162.0D0
	      COLFAC(8) = 10.0D0/162.0D0
	      COLFAC(9) = 1.0D0/2.0D0
	      COLFAC(10)= 7.0D0/2.0D0
	   END IF
	END IF
C...CHANGE ALL THE MOMENTA INTO LIGHT-LIKE.THOSE LIGHT-LIKE MOMENTA
C...WILL BE USED IN INNER SCALAR PRODUCT AND SPINNER PRODUCT.
      DO 411, I=1,8
	 IF (PMOMUP(5,I) .GT. 1.0D-16) THEN
	   DO K=1,4
	    PMOMZERO(K,I)=PMOMUP(K,I)-PMOMUP(K,8)*PMOMUP(5,I)**2/
     &	    (2.0D0*DOTUP(8,I))
	   END DO
	   PMOMZERO(5,I)=0.0D0
	 ELSE
	   DO J=1,5
	     PMOMZERO(J,I)=PMOMUP(J,I)
         END DO
       END IF
411	CONTINUE

C...GET THE HELICITY MATRIX ELEMENTS FOR THE FREE QUARK PART.
C...NOTE HERE FOR THE CONDITION IBCSTATE=1, THE
C...OBTAINED RESULT FOR SIGSCL AND SIGVCT IS THE SAME 
C...(THIS IS ONLY USED TO SAVE TIME, BECAUSE NOW WE ONLY NEED
C...THE RESULTS FOR IBCSTATE=1).
	CALL FREEHELICITY

	IF(IBCSTATE.EQ.1) THEN
	     ILOW=1
	     IUP =1
	END IF
	IF(IBCSTATE.EQ.2) THEN
	     ILOW=2
	     IUP =2
	END IF

C...BEGIN OF BIG CIRCLE.
	DO IBC=ILOW,IUP
	 CALL BUNDHELICITY(IBC)
C...GET THE FIVE SUBSETS MATRIX ELEMENTS OF THE PROCESS gg->Bc+b+\bar{c}:
C...i.e., SUMMING THE FREE QUARK PART (gg->\bar{b}+c+b+\bar{c}) AND
C...THE BOUND STATE PART (\bar{c}+c->Bc) TOGETHER.
	 DO JJ=1,8
	  FINCOL(1,JJ)=COLMAT(1,JJ)*BUNDAMP(1)+COLMAT(1,JJ+8)*BUNDAMP(2)
     &	  +COLMAT(1,JJ+32)*BUNDAMP(3)+COLMAT(1,JJ+40)*BUNDAMP(4)
	  FINCOL(2,JJ)=COLMAT(2,JJ)*BUNDAMP(1)+COLMAT(2,JJ+8)*BUNDAMP(2)
     &	  +COLMAT(2,JJ+32)*BUNDAMP(3)+COLMAT(2,JJ+40)*BUNDAMP(4)
	  FINCOL(3,JJ)=COLMAT(3,JJ)*BUNDAMP(1)+COLMAT(3,JJ+8)*BUNDAMP(2)
     &	  +COLMAT(3,JJ+32)*BUNDAMP(3)+COLMAT(3,JJ+40)*BUNDAMP(4)
	  IF(IQQBAR.EQ.0) THEN
	   FINCOL(4,JJ)=COLMAT(4,JJ)*BUNDAMP(1)+COLMAT(4,JJ+8)*BUNDAMP(2)
     &	  +COLMAT(4,JJ+32)*BUNDAMP(3)+COLMAT(4,JJ+40)*BUNDAMP(4)
	   FINCOL(5,JJ)=COLMAT(5,JJ)*BUNDAMP(1)+COLMAT(5,JJ+8)*BUNDAMP(2)
     &	  +COLMAT(5,JJ+32)*BUNDAMP(3)+COLMAT(5,JJ+40)*BUNDAMP(4)
	   IF(IOCTET.EQ.1) THEN
	    FINCOL(6,JJ)=COLMAT(6,JJ)*BUNDAMP(1)+COLMAT(6,JJ+8)
     &       *BUNDAMP(2)
     &	     +COLMAT(6,JJ+32)*BUNDAMP(3)+COLMAT(6,JJ+40)*BUNDAMP(4)
	    FINCOL(7,JJ)=COLMAT(7,JJ)*BUNDAMP(1)+COLMAT(7,JJ+8)
     &       *BUNDAMP(2)
     &	     +COLMAT(7,JJ+32)*BUNDAMP(3)+COLMAT(7,JJ+40)*BUNDAMP(4)
            FINCOL(8,JJ)=COLMAT(8,JJ)*BUNDAMP(1)+COLMAT(8,JJ+8)
     &       *BUNDAMP(2)
     &	     +COLMAT(8,JJ+32)*BUNDAMP(3)+COLMAT(8,JJ+40)*BUNDAMP(4)
	    FINCOL(9,JJ)=COLMAT(9,JJ)*BUNDAMP(1)+COLMAT(9,JJ+8)
     &       *BUNDAMP(2)
     &	     +COLMAT(9,JJ+32)*BUNDAMP(3)+COLMAT(9,JJ+40)*BUNDAMP(4)
	    FINCOL(10,JJ)=COLMAT(10,JJ)*BUNDAMP(1)+COLMAT(10,JJ+8)
     &	     *BUNDAMP(2)+COLMAT(10,JJ+32)*BUNDAMP(3)+COLMAT(10,JJ+40)*
     &      BUNDAMP(4)
	   END IF
	  END IF
       END DO

       DO JJ=17,24
	FINCOL(1,JJ-8)=COLMAT(1,JJ)*BUNDAMP(2)+COLMAT(1,JJ+8)*BUNDAMP(1)
     &	+COLMAT(1,JJ+32)*BUNDAMP(4)+COLMAT(1,JJ+40)*BUNDAMP(3)
	FINCOL(2,JJ-8)=COLMAT(2,JJ)*BUNDAMP(2)+COLMAT(2,JJ+8)*BUNDAMP(1)
     &	+COLMAT(2,JJ+32)*BUNDAMP(4)+COLMAT(2,JJ+40)*BUNDAMP(3)
	FINCOL(3,JJ-8)=COLMAT(3,JJ)*BUNDAMP(2)+COLMAT(3,JJ+8)*BUNDAMP(1)
     &	+COLMAT(3,JJ+32)*BUNDAMP(4)+COLMAT(3,JJ+40)*BUNDAMP(3)
C2---------
	IF(IQQBAR.EQ.0) THEN
	 FINCOL(4,JJ-8)=COLMAT(4,JJ)*BUNDAMP(2)+COLMAT(4,JJ+8)*BUNDAMP(1)
     &	 +COLMAT(4,JJ+32)*BUNDAMP(4)+COLMAT(4,JJ+40)*BUNDAMP(3)
	 FINCOL(5,JJ-8)=COLMAT(5,JJ)*BUNDAMP(2)+COLMAT(5,JJ+8)*BUNDAMP(1)
     &	 +COLMAT(5,JJ+32)*BUNDAMP(4)+COLMAT(5,JJ+40)*BUNDAMP(3)
C---------
	IF(IOCTET.EQ.1) THEN
	 FINCOL(6,JJ-8)=COLMAT(6,JJ)*BUNDAMP(2)+COLMAT(6,JJ+8)*BUNDAMP(1)
     &	 +COLMAT(6,JJ+32)*BUNDAMP(4)+COLMAT(6,JJ+40)*BUNDAMP(3)
	 FINCOL(7,JJ-8)=COLMAT(7,JJ)*BUNDAMP(2)+COLMAT(7,JJ+8)*BUNDAMP(1)
     &	 +COLMAT(7,JJ+32)*BUNDAMP(4)+COLMAT(7,JJ+40)*BUNDAMP(3)
	 FINCOL(8,JJ-8)=COLMAT(8,JJ)*BUNDAMP(2)+COLMAT(8,JJ+8)*BUNDAMP(1)
     &	 +COLMAT(8,JJ+32)*BUNDAMP(4)+COLMAT(8,JJ+40)*BUNDAMP(3)
	 FINCOL(9,JJ-8)=COLMAT(9,JJ)*BUNDAMP(2)+COLMAT(9,JJ+8)*BUNDAMP(1)
     &	 +COLMAT(9,JJ+32)*BUNDAMP(4)+COLMAT(9,JJ+40)*BUNDAMP(3)
	 FINCOL(10,JJ-8)=COLMAT(10,JJ)*BUNDAMP(2)+COLMAT(10,JJ+8)*
     &	 BUNDAMP(1)+COLMAT(10,JJ+32)*BUNDAMP(4)+COLMAT(10,JJ+40)*
     &   BUNDAMP(3)
	END IF
C---------
	END IF
C2--------
       END DO

C...TO GET THE POSSIBILITY OF THREE COLOR FLOWS WHICH ARE USED IN MAIN 
C...PROGRAM FOR THE SUBPROCESS gg->Bc+b+\bar{c}. THESE THREE COLOR FLOW
C...DIRECTIONS ARE NOT ORTHOGONAL BUT ARE CORRESPONDING TO PARTICULAR
C...COLOR FLOW, WHICH CAN BE EQUIVALENT DERIVED FROM THE COLOR-FLOW
C...DECOMPOSITION IN PRD67,014026(2003) BY F.MALTONI ETAL.
	 IF (IQQBAR.EQ.0) THEN
C---------
       IF(IOCTET.EQ.0) THEN
	  IF (IBC.EQ.1) THEN
         DO JJ=1,16
	   CFSCL(1)=CFSCL(1)+1.0D0/36.0D0*DBLE(ABS(8*FINCOL(1,JJ)
     &	-FINCOL(3,JJ)))**2
	   CFSCL(2)=CFSCL(2)+1.0D0/36.0D0*DBLE(ABS(8*FINCOL(2,JJ)
     &	-FINCOL(4,JJ)))**2
	   CFSCL(3)=CFSCL(3)+1.0D0/4.0D0*DBLE(ABS(FINCOL(5,JJ))**2)
	   END DO
	  END IF
	  IF(IBC.EQ.2) THEN
         DO JJ=1,16
	   CFVCT(1)=CFVCT(1)+1.0D0/36.0D0*DBLE(ABS(8*FINCOL(1,JJ)
     &	-FINCOL(3,JJ)))**2
	   CFVCT(2)=CFVCT(2)+1.0D0/36.0D0*DBLE(ABS(8*FINCOL(2,JJ)
     &	-FINCOL(4,JJ)))**2
	   CFVCT(3)=CFVCT(3)+1.0D0/4.0D0*DBLE(ABS(FINCOL(5,JJ))**2)
	   END DO
	  END IF
	 END IF
C----------
       IF(IOCTET.EQ.1) THEN
	  IF (IBC.EQ.1) THEN
         DO JJ=1,16
	    CFSCL(1)=CFSCL(1)+1.0D0/18.0D0*DBLE(ABS(FINCOL(1,JJ))**2)
	    CFSCL(2)=CFSCL(2)+1.0D0/18.0D0*DBLE(ABS(FINCOL(2,JJ))**2)
	    CFSCL(3)=CFSCL(3)+1.0D0/2.0D0*DBLE(ABS(FINCOL(3,JJ))**2)
	    CFSCL(4)=CFSCL(3)+1.0D0/2.0D0*DBLE(ABS(FINCOL(4,JJ))**2)
	    CFSCL(5)=CFSCL(3)+1.0D0/2.0D0*DBLE(ABS(FINCOL(5,JJ))**2)
	    CFSCL(6)=CFSCL(3)+1.0D0/2.0D0*DBLE(ABS(FINCOL(6,JJ))**2)
	    CFSCL(7)=CFSCL(3)+1.0D0/18.0D0*DBLE(ABS(FINCOL(7,JJ))**2)
	    CFSCL(8)=CFSCL(3)+1.0D0/18.0D0*DBLE(ABS(FINCOL(8,JJ))**2)
	    CFSCL(9)=CFSCL(3)+1.0D0/18.0D0*DBLE(ABS(FINCOL(9,JJ))**2)
	   CFSCL(10)=CFSCL(3)+1.0D0/18.0D0*DBLE(ABS(FINCOL(10,JJ))**2)
	   END DO
	  END IF
	  IF(IBC.EQ.2) THEN
         DO JJ=1,16
	    CFVCT(1)=CFVCT(1)+1.0D0/18.0D0*DBLE(ABS(FINCOL(1,JJ))**2)
	    CFVCT(2)=CFVCT(2)+1.0D0/18.0D0*DBLE(ABS(FINCOL(2,JJ))**2)
	    CFVCT(3)=CFVCT(3)+1.0D0/2.0D0*DBLE(ABS(FINCOL(3,JJ))**2)
	    CFVCT(4)=CFVCT(3)+1.0D0/2.0D0*DBLE(ABS(FINCOL(4,JJ))**2)
	    CFVCT(5)=CFVCT(3)+1.0D0/2.0D0*DBLE(ABS(FINCOL(5,JJ))**2)
	    CFVCT(6)=CFVCT(3)+1.0D0/2.0D0*DBLE(ABS(FINCOL(6,JJ))**2)
	    CFVCT(7)=CFVCT(3)+1.0D0/18.0D0*DBLE(ABS(FINCOL(7,JJ))**2)
	    CFVCT(8)=CFVCT(3)+1.0D0/18.0D0*DBLE(ABS(FINCOL(8,JJ))**2)
	    CFVCT(9)=CFVCT(3)+1.0D0/18.0D0*DBLE(ABS(FINCOL(9,JJ))**2)
	   CFVCT(10)=CFVCT(3)+1.0D0/18.0D0*DBLE(ABS(FINCOL(10,JJ))**2)
	   END DO
	  END IF
	 END IF
C----------
       END IF

C...TO GET THE POSSIBILITY OF TWO COLOR FLOW WHICH IS USED IN MAIN 
C...PROGRAM FOR THE SUBPROCESS q\bar{q}->Bc+b+\bar{c}. THE TWO COLOR
C...FLOW DIRECTIONS ARE ORTHOGONAL.
	 IF(IQQBAR.EQ.1) THEN
	  IF(IBC.EQ.1) THEN
         DO JJ=1,16
	    CFSCL(1)=CFSCL(1)+9.0D0*DBLE(ABS(-FINCOL(1,JJ)/12.0D0+
     &     2.0D0/3.0D0*FINCOL(2,JJ)-1.0D0/6.0D0*FINCOL(3,JJ)))**2
     &     +3.0D0*DREAL((-FINCOL(1,JJ)/12.0D0+2.0D0/3.0D0*FINCOL(2,JJ)
     &     -1.0D0/6.0D0*FINCOL(3,JJ))*DCONJG(-FINCOL(1,JJ)/36.0D0-
     &     2.0D0/9.0D0*FINCOL(2,JJ)+5.0D0/18.0D0*FINCOL(3,JJ)))
	    CFSCL(2)=CFSCL(2)+9.0D0*DBLE(ABS(FINCOL(1,JJ)/36.0D0-
     &     2.0D0/9.0D0*FINCOL(2,JJ)+5.0D0/18.0D0*FINCOL(3,JJ)))**2
     &     +3.0D0*DREAL((-FINCOL(1,JJ)/12.0D0+2.0D0/3.0D0*FINCOL(2,JJ)-
     &     1.0D0/6.0D0*FINCOL(3,JJ))*DCONJG(FINCOL(1,JJ)/36.0D0-
     &     2.0D0/9.0D0*FINCOL(2,JJ)+5.0D0/18.0D0*FINCOL(3,JJ)))
         END DO
	  END IF 
	  IF(IBC.EQ.2) THEN
	   DO JJ=1,16
	    CFVCT(1)=CFVCT(1)+9.0D0*DBLE(ABS(-FINCOL(1,JJ)/12.0D0+
     &     2.0D0/3.0D0*FINCOL(2,JJ)-1.0D0/6.0D0*FINCOL(3,JJ)))**2
     &     +3.0D0*DREAL((-FINCOL(1,JJ)/12.0D0+2.0D0/3.0D0*FINCOL(2,JJ)
     &     -1.0D0/6.0D0*FINCOL(3,JJ))*DCONJG(-FINCOL(1,JJ)/36.0D0-
     &     2.0D0/9.0D0*FINCOL(2,JJ)+5.0D0/18.0D0*FINCOL(3,JJ)))
	    CFVCT(2)=CFVCT(2)+9.0D0*DBLE(ABS(FINCOL(1,JJ)/36.0D0-
     &     2.0D0/9.0D0*FINCOL(2,JJ)+5.0D0/18.0D0*FINCOL(3,JJ)))**2
     &     +3.0D0*DREAL((-FINCOL(1,JJ)/12.0D0+2.0D0/3.0D0*FINCOL(2,JJ)-
     &     1.0D0/6.0D0*FINCOL(3,JJ))*DCONJG(FINCOL(1,JJ)/36.0D0-
     &     2.0D0/9.0D0*FINCOL(2,JJ)+5.0D0/18.0D0*FINCOL(3,JJ)))
	   END DO
	  END IF	
	 END IF

C... NOTE HERE: SINCE THE CROSS-TERMS IN THE COLOR-FLOW ARE NEGLECTED,
C... THE TOTAL SQUARE OF AMPLITUDE DOES NOT EQUAL TO THE SUM OF THE
C... SQUARE OF THE PARTIAL AMPLITUDE (PERTAIN TO A CERTAIN COLOR-FLOW).
      
	IF(IQQBAR.EQ.0) THEN
C6-----------
	 IF(IBC.EQ.1) THEN
C1-----------
	   IF(IOCTET.EQ.0) THEN
	   DO JJ=1,16
	   SIGSCL=SIGSCL+COLFAC(1)*DBLE(ABS(8*FINCOL(1,JJ)-FINCOL(3,JJ)))
     &	**2+COLFAC(2)*DBLE(ABS(8*FINCOL(2,JJ)-FINCOL(4,JJ)))**2
     &    +COLFAC(3)*DREAL((8*FINCOL(1,JJ)-FINCOL(3,JJ))*DCONJG(8*
     &    FINCOL(2,JJ)-FINCOL(4,JJ)))+COLFAC(4)*DBLE(ABS(FINCOL
     &    (5,JJ)))**2+COLFAC(5)*DREAL(DCONJG(8*FINCOL(1,JJ)+8*
     &    FINCOL(2,JJ)-FINCOL(3,JJ)-FINCOL(4,JJ))*FINCOL(5,JJ))
	   END DO
	   END IF
C1-----------
C2-----------
	  IF(IOCTET.EQ.1) THEN
	   DO JJ=1,16
	   SIGSCL=SIGSCL+COLFAC(1)*ABS(FINCOL(1,JJ))**2+2*COLFAC(2)*
     &	   DREAL(FINCOL(1,JJ)*DCONJG(FINCOL(2,JJ)))+2*COLFAC(3)*
     &	   DREAL(FINCOL(1,JJ)*DCONJG(FINCOL(3,JJ)))+2*COLFAC(4)*
     &	   DREAL(FINCOL(1,JJ)*DCONJG(FINCOL(4,JJ)))+2*COLFAC(6)*
     &	   DREAL(FINCOL(1,JJ)*DCONJG(FINCOL(5,JJ)))+2*COLFAC(5)*
     &	   DREAL(FINCOL(1,JJ)*DCONJG(FINCOL(6,JJ)))+2*COLFAC(7)*
     &	   DREAL(FINCOL(1,JJ)*DCONJG(FINCOL(7,JJ)))+2*COLFAC(8)*
     &	   DREAL(FINCOL(1,JJ)*DCONJG(FINCOL(8,JJ)))+2*COLFAC(7)*
     &	   DREAL(FINCOL(1,JJ)*DCONJG(FINCOL(9,JJ)))+2*COLFAC(2)*
     &	   DREAL(FINCOL(1,JJ)*DCONJG(FINCOL(10,JJ)))+COLFAC(1)*
     &       ABS(FINCOL(2,JJ))**2+2*COLFAC(4)*DREAL(FINCOL(2,JJ)*
     &	   DCONJG(FINCOL(3,JJ)))+2*COLFAC(3)*DREAL(FINCOL(2,JJ)*
     &	   DCONJG(FINCOL(4,JJ)))+2*COLFAC(5)*DREAL(FINCOL(2,JJ)*
     &	   DCONJG(FINCOL(5,JJ)))+2*COLFAC(6)*DREAL(FINCOL(2,JJ)*
     &	   DCONJG(FINCOL(6,JJ)))+2*COLFAC(8)*DREAL(FINCOL(2,JJ)*
     &	   DCONJG(FINCOL(7,JJ)))+2*COLFAC(7)*DREAL(FINCOL(2,JJ)*
     &	   DCONJG(FINCOL(8,JJ)))+2*COLFAC(2)*DREAL(FINCOL(2,JJ)*
     &	   DCONJG(FINCOL(9,JJ)))+2*COLFAC(7)*DREAL(FINCOL(2,JJ)*
     &	   DCONJG(FINCOL(10,JJ)))+4.0D0*ABS(FINCOL(3,JJ))**2+
     &       2*COLFAC(9)*DREAL(FINCOL(3,JJ)*DCONJG(FINCOL(4,JJ)))+
     &       2*COLFAC(4)*DREAL(FINCOL(3,JJ)*DCONJG(FINCOL(7,JJ)))+
     &       2*COLFAC(3)*DREAL(FINCOL(3,JJ)*DCONJG(FINCOL(8,JJ)))+
     &       2*COLFAC(3)*DREAL(FINCOL(3,JJ)*DCONJG(FINCOL(9,JJ)))+
     &       2*COLFAC(3)*DREAL(FINCOL(3,JJ)*DCONJG(FINCOL(10,JJ)))+
     &       4*ABS(FINCOL(4,JJ))**2+2*COLFAC(3)*DREAL(FINCOL(4,JJ)*
     &	   DCONJG(FINCOL(7,JJ)))+2*COLFAC(4)*DREAL(FINCOL(4,JJ)*
     &	   DCONJG(FINCOL(8,JJ)))+2*COLFAC(3)*DREAL(FINCOL(4,JJ)*
     &	   DCONJG(FINCOL(9,JJ)))+2*COLFAC(3)*DREAL(FINCOL(4,JJ)*
     &	   DCONJG(FINCOL(10,JJ)))+COLFAC(10)*ABS(FINCOL(5,JJ))**2-
     &       2*DREAL(FINCOL(5,JJ)*DCONJG(FINCOL(6,JJ)))+2*COLFAC(6)*
     &       DREAL(FINCOL(5,JJ)*DCONJG(FINCOL(7,JJ)))+2*COLFAC(5)*
     &       DREAL(FINCOL(5,JJ)*DCONJG(FINCOL(8,JJ)))+2*COLFAC(6)*
     &       DREAL(FINCOL(5,JJ)*DCONJG(FINCOL(9,JJ)))+2*COLFAC(5)*
     &       DREAL(FINCOL(5,JJ)*DCONJG(FINCOL(10,JJ)))+COLFAC(10)*
     &       ABS(FINCOL(6,JJ))**2+2*COLFAC(5)*DREAL(FINCOL(6,JJ)*
     &	   DCONJG(FINCOL(7,JJ)))+2*COLFAC(6)*DREAL(FINCOL(6,JJ)*
     &	   DCONJG(FINCOL(8,JJ)))+2*COLFAC(5)*DREAL(FINCOL(6,JJ)*
     &	   DCONJG(FINCOL(9,JJ)))+2*COLFAC(6)*DREAL(FINCOL(6,JJ)*
     &	   DCONJG(FINCOL(10,JJ)))+COLFAC(1)*ABS(FINCOL(7,JJ))**2+
     &	   2*COLFAC(2)*DREAL(FINCOL(7,JJ)*DCONJG(FINCOL(8,JJ)))+
     &	   2*COLFAC(7)*DREAL(FINCOL(7,JJ)*DCONJG(FINCOL(9,JJ)))+
     &	   2*COLFAC(2)*DREAL(FINCOL(7,JJ)*DCONJG(FINCOL(10,JJ)))
     &       +COLFAC(1)*ABS(FINCOL(8,JJ))**2+2*COLFAC(2)*
     &       DREAL(FINCOL(8,JJ)*DCONJG(FINCOL(9,JJ)))+2*COLFAC(7)*
     &       DREAL(FINCOL(8,JJ)*DCONJG(FINCOL(10,JJ)))+
     &       COLFAC(1)*ABS(FINCOL(9,JJ))**2+2*COLFAC(8)*
     &       DREAL(FINCOL(9,JJ)*DCONJG(FINCOL(10,JJ)))+
     &       COLFAC(1)*ABS(FINCOL(10,JJ))**2
	  END DO
	 END IF
C2----------
	 END IF
C6-----------
C7-----------
	 IF(IBC.EQ.2) THEN
C3----------
	  IF(IOCTET.EQ.0) THEN
	   DO JJ=1,16
	   SIGVCT=SIGVCT+COLFAC(1)*DBLE(ABS(8*FINCOL(1,JJ)-FINCOL(3,JJ)))
     &	**2+COLFAC(2)*DBLE(ABS(8*FINCOL(2,JJ)-FINCOL(4,JJ)))**2
     &    +COLFAC(3)*DREAL((8*FINCOL(1,JJ)-FINCOL(3,JJ))*DCONJG(8*
     &    FINCOL(2,JJ)-FINCOL(4,JJ)))+COLFAC(4)*DBLE(ABS(FINCOL
     &    (5,JJ)))**2+COLFAC(5)*DREAL(DCONJG(8*FINCOL(1,JJ)+8*
     &    FINCOL(2,JJ)-FINCOL(3,JJ)-FINCOL(4,JJ))*FINCOL(5,JJ))
	   END DO
	  END IF
C3---------
C4---------
	  IF(IOCTET.EQ.1) THEN
	   DO JJ=1,16
	   SIGVCT=SIGVCT+COLFAC(1)*ABS(FINCOL(1,JJ))**2+2*COLFAC(2)*
     &	   DREAL(FINCOL(1,JJ)*DCONJG(FINCOL(2,JJ)))+2*COLFAC(3)*
     &	   DREAL(FINCOL(1,JJ)*DCONJG(FINCOL(3,JJ)))+2*COLFAC(4)*
     &	   DREAL(FINCOL(1,JJ)*DCONJG(FINCOL(4,JJ)))+2*COLFAC(6)*
     &	   DREAL(FINCOL(1,JJ)*DCONJG(FINCOL(5,JJ)))+2*COLFAC(5)*
     &	   DREAL(FINCOL(1,JJ)*DCONJG(FINCOL(6,JJ)))+2*COLFAC(7)*
     &	   DREAL(FINCOL(1,JJ)*DCONJG(FINCOL(7,JJ)))+2*COLFAC(8)*
     &	   DREAL(FINCOL(1,JJ)*DCONJG(FINCOL(8,JJ)))+2*COLFAC(7)*
     &	   DREAL(FINCOL(1,JJ)*DCONJG(FINCOL(9,JJ)))+2*COLFAC(2)*
     &	   DREAL(FINCOL(1,JJ)*DCONJG(FINCOL(10,JJ)))+COLFAC(1)*
     &       ABS(FINCOL(2,JJ))**2+2*COLFAC(4)*DREAL(FINCOL(2,JJ)*
     &	   DCONJG(FINCOL(3,JJ)))+2*COLFAC(3)*DREAL(FINCOL(2,JJ)*
     &	   DCONJG(FINCOL(4,JJ)))+2*COLFAC(5)*DREAL(FINCOL(2,JJ)*
     &	   DCONJG(FINCOL(5,JJ)))+2*COLFAC(6)*DREAL(FINCOL(2,JJ)*
     &	   DCONJG(FINCOL(6,JJ)))+2*COLFAC(8)*DREAL(FINCOL(2,JJ)*
     &	   DCONJG(FINCOL(7,JJ)))+2*COLFAC(7)*DREAL(FINCOL(2,JJ)*
     &	   DCONJG(FINCOL(8,JJ)))+2*COLFAC(2)*DREAL(FINCOL(2,JJ)*
     &	   DCONJG(FINCOL(9,JJ)))+2*COLFAC(7)*DREAL(FINCOL(2,JJ)*
     &	   DCONJG(FINCOL(10,JJ)))+4.0D0*ABS(FINCOL(3,JJ))**2+
     &       2*COLFAC(9)*DREAL(FINCOL(3,JJ)*DCONJG(FINCOL(4,JJ)))+
     &       2*COLFAC(4)*DREAL(FINCOL(3,JJ)*DCONJG(FINCOL(7,JJ)))+
     &       2*COLFAC(3)*DREAL(FINCOL(3,JJ)*DCONJG(FINCOL(8,JJ)))+
     &       2*COLFAC(3)*DREAL(FINCOL(3,JJ)*DCONJG(FINCOL(9,JJ)))+
     &       2*COLFAC(3)*DREAL(FINCOL(3,JJ)*DCONJG(FINCOL(10,JJ)))+
     &       4*ABS(FINCOL(4,JJ))**2+2*COLFAC(3)*DREAL(FINCOL(4,JJ)*
     &	   DCONJG(FINCOL(7,JJ)))+2*COLFAC(4)*DREAL(FINCOL(4,JJ)*
     &	   DCONJG(FINCOL(8,JJ)))+2*COLFAC(3)*DREAL(FINCOL(4,JJ)*
     &	   DCONJG(FINCOL(9,JJ)))+2*COLFAC(3)*DREAL(FINCOL(4,JJ)*
     &	   DCONJG(FINCOL(10,JJ)))+COLFAC(10)*ABS(FINCOL(5,JJ))**2-
     &       2*DREAL(FINCOL(5,JJ)*DCONJG(FINCOL(6,JJ)))+2*COLFAC(6)*
     &       DREAL(FINCOL(5,JJ)*DCONJG(FINCOL(7,JJ)))+2*COLFAC(5)*
     &       DREAL(FINCOL(5,JJ)*DCONJG(FINCOL(8,JJ)))+2*COLFAC(6)*
     &       DREAL(FINCOL(5,JJ)*DCONJG(FINCOL(9,JJ)))+2*COLFAC(5)*
     &       DREAL(FINCOL(5,JJ)*DCONJG(FINCOL(10,JJ)))+COLFAC(10)*
     &       ABS(FINCOL(6,JJ))**2+2*COLFAC(5)*DREAL(FINCOL(6,JJ)*
     &	   DCONJG(FINCOL(7,JJ)))+2*COLFAC(6)*DREAL(FINCOL(6,JJ)*
     &	   DCONJG(FINCOL(8,JJ)))+2*COLFAC(5)*DREAL(FINCOL(6,JJ)*
     &	   DCONJG(FINCOL(9,JJ)))+2*COLFAC(6)*DREAL(FINCOL(6,JJ)*
     &	   DCONJG(FINCOL(10,JJ)))+COLFAC(1)*ABS(FINCOL(7,JJ))**2+
     &	   2*COLFAC(2)*DREAL(FINCOL(7,JJ)*DCONJG(FINCOL(8,JJ)))+
     &	   2*COLFAC(7)*DREAL(FINCOL(7,JJ)*DCONJG(FINCOL(9,JJ)))+
     &	   2*COLFAC(2)*DREAL(FINCOL(7,JJ)*DCONJG(FINCOL(10,JJ)))
     &       +COLFAC(1)*ABS(FINCOL(8,JJ))**2+2*COLFAC(2)*
     &       DREAL(FINCOL(8,JJ)*DCONJG(FINCOL(9,JJ)))+2*COLFAC(7)*
     &       DREAL(FINCOL(8,JJ)*DCONJG(FINCOL(10,JJ)))+
     &       COLFAC(1)*ABS(FINCOL(9,JJ))**2+2*COLFAC(8)*
     &       DREAL(FINCOL(9,JJ)*DCONJG(FINCOL(10,JJ)))+
     &       COLFAC(1)*ABS(FINCOL(10,JJ))**2
	  END DO
	  END IF
C4----------
	 END IF
C7----------
	END IF

	IF(IQQBAR.EQ.1) THEN
	  IF(IBC.EQ.1) THEN
	   DO JJ=1,16
	    SIGSCL=SIGSCL+9.0D0*DBLE(ABS(FINCOL(1,JJ)/36.0D0-2.0D0/9.0D0
     &    *FINCOL(2,JJ)+5.0D0/18.0D0*FINCOL(3,JJ)))**2+6.0D0*DREAL(
     &    (-FINCOL(1,JJ)/12.0D0+2.0D0/3.0D0*FINCOL(2,JJ)-
     &    1.0D0/6.0D0*FINCOL(3,JJ))*DCONJG(FINCOL(1,JJ)/36.0D0-
     &    2.0D0/9.0D0*FINCOL(2,JJ)+5.0D0/18.0D0*FINCOL(3,JJ)))+
     &    9.0D0*DBLE(ABS(-FINCOL(1,JJ)/12.0D0+2.0D0/3.0D0
     &    *FINCOL(2,JJ)-1.0D0/6.0D0*FINCOL(3,JJ)))**2
	   END DO	
	  END IF
	  IF(IBC.EQ.2) THEN
	   DO JJ=1,16
	    SIGVCT=SIGVCT+9.0D0*DBLE(ABS(FINCOL(1,JJ)/36.0D0-2.0D0/9.0D0
     &    *FINCOL(2,JJ)+5.0D0/18.0D0*FINCOL(3,JJ)))**2+6.0D0*DREAL(
     &    (-FINCOL(1,JJ)/12.0D0+2.0D0/3.0D0*FINCOL(2,JJ)-
     &    1.0D0/6.0D0*FINCOL(3,JJ))*DCONJG(FINCOL(1,JJ)/36.0D0-
     &    2.0D0/9.0D0*FINCOL(2,JJ)+5.0D0/18.0D0*FINCOL(3,JJ)))+
     &    9.0D0*DBLE(ABS(-FINCOL(1,JJ)/12.0D0+2.0D0/3.0D0
     &    *FINCOL(2,JJ)-1.0D0/6.0D0*FINCOL(3,JJ)))**2
	   END DO	
	  END IF
	END IF

	END DO
C...END OF BIG CIRCLE.

C...COLLECT THE COLOR-FLOW INFORMATION:

	IF(IBCSTATE.EQ.1) THEN
	   DO JJ=1,10
	     AMP2CF(JJ)=CFSCL(JJ)
	     SMATVAL=SMATVAL+AMP2CF(JJ)
	   END DO
	END IF
	IF(IBCSTATE.EQ.2) THEN
	   DO JJ=1,10
	     AMP2CF(JJ)=CFVCT(JJ)
	     SMATVAL=SMATVAL+AMP2CF(JJ)
	   END DO
	END IF

C...THE FOLLOWING IS ONLY TO ELIMINATE THE NUMERICAL UNCERNTAINTY,
C...WHICH IN PRINCIPLE DOES NOT NEEDED. HOWEVER WE ADDED HERE 
C...TO AVOID SOME VERY PARTICULAR CASES.
c...double precision.
	DO II=1,3
	   IF(AMP2CF(II).LT.1.0D-16) AMP2CF(II)=1.0D-16
	END DO      
	IF(SMATVAL.LT.1.0D-16) SMATVAL=1.0D-16
	IF(SIGSCL.LT.1.0D-16)  SIGSCL =1.0D-16
	IF(SIGVCT.LT.1.0D-16)  SIGVCT =1.0D-16
      
	RETURN
	END

C********************************************************************

C...HELICITY AMPLITUDE OF THE BOUND STATE PART: \bar{b}+c->Bc.
	SUBROUTINE BUNDHELICITY(IBC)
	IMPLICIT DOUBLE PRECISION (A-H,O-Z)
	IMPLICIT INTEGER (I-N)
	DOUBLE COMPLEX COLMAT,BUNDAMP,POLSPPUP,INPUP
	COMMON/UPCOM/ECM,PMBC,PMB,PMC,FBCC,PMOMUP(5,8),
     & 	COLMAT(10,64),BUNDAMP(4),PMOMZERO(5,8)
	COMMON/POL/POLAR(4,3)
C...FOR COLOR-OCTET PRODUCTION.
	COMMON/COLOCT/IOCTET
	COMMON/OCTMATRIX/COEOCT

C...WAVEZERO IS THE VALUE OF THE WAVE FUNCTION AT ORIGIN.
      WAVEZERO=DSQRT(PMBC*FBCC**2/12.0D0)

C...COLOR-OCTET MATRIXMENT.
	IF(IOCTET.EQ.1) THEN
	  WAVEZERO=COEOCT*WAVEZERO
	END IF

C...BUNDAMP(1)->++, BUNDAMP(2)->--, BUNDAMP(3)->+-, BUNDAMP(4)->-+.
C...B_C IN 1S0 STATE AND NOT GET THE COMBINED RESULTS FOR Bc AND Bc*
      IF(IBC.EQ.1) THEN
	  BUNDAMP(1)=DCMPLX(-WAVEZERO*DSQRT(PMBC)/(2*DSQRT(PMB*PMC)))
	  BUNDAMP(2)=DCMPLX(+WAVEZERO*DSQRT(PMBC)/(2*DSQRT(PMB*PMC)))
	  BUNDAMP(3)=DCMPLX(0.0D0)
	  BUNDAMP(4)=DCMPLX(0.0D0)
	END IF

C...THE EXPRESSION OF POLARIZATION VECTORS DEPEND ON THE GAUGE CHOICE.
C...ONE WAY OF CONSTRUCTING POLARIZATION VECTOR OF 3S1 STATE: ALL
C...SATISFIES: POLAR(I)**2=-1, POLAR(I).POLAR(J)=0 (I.NE.J),
C...POLAR(I).PMOMUP(3)=0; IN ADDITION, WE CHOOSE: POLAR(1,1)=0.0D0
C...POLAR(2,1)=0.0D0, AND POLAR(1,3)=0.0D0.
      IF(IBC.EQ.2) THEN
	 POLAR(1,1)=0.0D0
	 POLAR(2,1)=0.0D0
	 POLAR(3,1)=PMOMUP(4,3)/DSQRT(PMOMUP(4,3)**2-PMOMUP(3,3)**2)
	 POLAR(4,1)=PMOMUP(3,3)/DSQRT(PMOMUP(4,3)**2-PMOMUP(3,3)**2)

       IF(PMOMUP(3,3).LT.0.0D0) THEN
	  POLAR(1,2)=-DSQRT(PMOMUP(4,3)**2-PMOMUP(2,3)**2-PMOMUP(3,3)**2)
     &	   /PMOMUP(5,3)
	  POLAR(2,2)=-PMOMUP(1,3)*PMOMUP(2,3)/DSQRT(PMOMUP(4,3)**2
     &	  -PMOMUP(2,3)**2-PMOMUP(3,3)**2)/PMOMUP(5,3)
	  POLAR(3,2)=-PMOMUP(1,3)*PMOMUP(3,3)/DSQRT(PMOMUP(4,3)**2
     &	  -PMOMUP(2,3)**2-PMOMUP(3,3)**2)/PMOMUP(5,3)
	  POLAR(4,2)=-PMOMUP(1,3)*PMOMUP(4,3)/DSQRT(PMOMUP(4,3)**2
     &	  -PMOMUP(2,3)**2-PMOMUP(3,3)**2)/PMOMUP(5,3)
	 ELSE
	  POLAR(1,2)=DSQRT(PMOMUP(4,3)**2-PMOMUP(2,3)**2-PMOMUP(3,3)**2)
     &	   /PMOMUP(5,3)
	  POLAR(2,2)=PMOMUP(1,3)*PMOMUP(2,3)/DSQRT(PMOMUP(4,3)**2
     &	  -PMOMUP(2,3)**2-PMOMUP(3,3)**2)/PMOMUP(5,3)
	  POLAR(3,2)=PMOMUP(1,3)*PMOMUP(3,3)/DSQRT(PMOMUP(4,3)**2
     &	  -PMOMUP(2,3)**2-PMOMUP(3,3)**2)/PMOMUP(5,3)
	  POLAR(4,2)=PMOMUP(1,3)*PMOMUP(4,3)/DSQRT(PMOMUP(4,3)**2
     &	  -PMOMUP(2,3)**2-PMOMUP(3,3)**2)/PMOMUP(5,3)
	 END IF

	 POLAR(1,3)=0.0D0
	 POLAR(2,3)=DSQRT(PMOMUP(4,3)**2-PMOMUP(3,3)**2)
     &   /DSQRT(PMOMUP(4,3)**2-PMOMUP(2,3)**2-PMOMUP(3,3)**2)
	 POLAR(3,3)=PMOMUP(2,3)*PMOMUP(3,3)/DSQRT(PMOMUP(4,3)**2-
     &	  PMOMUP(3,3)**2)/DSQRT(PMOMUP(4,3)**2-PMOMUP(2,3)**2
     &	  -PMOMUP(3,3)**2)
	 POLAR(4,3)=PMOMUP(2,3)*PMOMUP(4,3)/DSQRT(PMOMUP(4,3)**2-
     &	  PMOMUP(3,3)**2)/DSQRT(PMOMUP(4,3)**2-PMOMUP(2,3)**2
     &	  -PMOMUP(3,3)**2)

C...FOUR BOUND STATE MATRIX ELEMENTS OF 3S1.
	 BUNDAMP(1)=DCMPLX(0.0D0)
	 DO I=1,3
	  BUNDAMP(1)=BUNDAMP(1)+WAVEZERO*DSQRT(PMBC)/(2*DSQRT(PMB*PMC))
     &	*PMBC*(POLAR(4,I)*PMOMUP(4,8)-POLAR(1,I)*PMOMUP(1,8)-
     &    POLAR(2,I)*PMOMUP(2,8)-POLAR(3,I)*PMOMUP(3,8))/DOTUP(3,8)
	 END DO
	 BUNDAMP(2)=DCONJG(BUNDAMP(1))
       BUNDAMP(3)=DCMPLX(0.0D0)
	 DO I=1,3
        BUNDAMP(3)=BUNDAMP(3)+WAVEZERO*DSQRT(PMBC)/(2*DSQRT(PMB*PMC))
     &	*POLSPPUP(I)/(2*DOTUP(3,8))
       END DO
   	 BUNDAMP(4)=-DCONJG(BUNDAMP(3))
	
	END IF
      
	RETURN
	END

C**********************************************************************

C...Helicity amplitude of the free quark part: g+g->\bar{b}+c+b+\bar{c}.

	SUBROUTINE FREEHELICITY
	IMPLICIT DOUBLE PRECISION (A-H,O-Z)
	IMPLICIT INTEGER (I-N)
	DOUBLE COMPLEX BFUN,COLMAT,INPUP,SPPUP,YUP,XUP,BUNDAMP
	COMMON/UPCOM/ECM,PMBC,PMB,PMC,FBCC,PMOMUP(5,8),
     & 	COLMAT(10,64),BUNDAMP(4),PMOMZERO(5,8)
	COMMON/TRYUP/BFUN(9,4,64),YUP(100),XUP(2),IDP,IDQ0,
     &	IDK1,IDK2,IDB1,IDB2,IDC1,IDC2
C...FOR TRANSFORM THE SUBPROCESS INFORMATION, I.E.,  WHETHER USING
C...THE SUBPROCESS q\bar{q}->Bc+b+\bar{c} TO GENERATE EVENTS.
	COMMON/QQBAR/IQQBAR,IQCODE
C...WHETHER GETTING THE COLOR-OCTET COMPONENT CONTRIBUTIONS. HERE ONLY
C...FOR gg->Bc+b+~c (BC IN COLOR-OCTET S-WAVE STATES.).
	COMMON/COLOCT/IOCTET

	DIMENSION PROPUP(14,4)

C...The four subroutine are used to get BFUN(). FIRST->original from cb and
C...cc; SECOND->inter-change k_1 and k_2; THIRD->inter-change q_b1,q_b2 and 
C...q_c1,q_c2; FOUR->inter-change both. Here, BFUN() stands for the basic
C...Feynman diagrams which is free from color factors and proporgators.
C...The results are get from MATHMATICAL programs: helicitybasic.nb
C...and texbasic.nb. Here for easy programming, we use the number IDK1,IDK2,
C...IDB1,IDB2,IDC1,IDC2,IDQ0,IDP to identify the particles correspondingly. 
    
	IDQ0=8
	IDP=3

	DO 700, II=1,4
	   IF (II .EQ. 1) THEN
	      IDK1=1
	      IDK2=2
	      IDB1=4
	      IDB2=6
	      IDC1=7
	      IDC2=5
	   END IF

	   IF (II .EQ. 2) THEN
	      IDK1=2
	      IDK2=1
	      IDB1=4
	      IDB2=6
	      IDC1=7
	      IDC2=5
	   END IF

	   IF (II .EQ. 3) THEN
	      IDK1=1
	      IDK2=2
	      IDB1=7
	      IDB2=5
	      IDC1=4
	      IDC2=6
	   END IF

	   IF (II .EQ. 4) THEN
	      IDK1=2
	      IDK2=1
	      IDB1=7
	      IDB2=5
	      IDC1=4
	      IDC2=6
	   END IF

C...DEFINE SOME BASIC SPINNOR PRODUCTS THAT ARE NEEDED IN HELICITY AMPLITUDE.
	 YUP(1)=SPPUP(IDK1,IDC2,IDQ0)
	 YUP(2)=SPPUP(IDK1,IDB2,IDQ0)
	 YUP(3)=SPPUP(IDK1,IDQ0,IDB2)
	 YUP(4)=SPPUP(IDK1,IDQ0,IDC2)
	 YUP(5)=SPPUP(IDK1,IDQ0,IDC1)
	 YUP(6)=SPPUP(IDK1,IDQ0,IDB1)
	 YUP(7)=SPPUP(IDK1,IDK2,IDQ0)
	 YUP(8)=SPPUP(IDK1,IDQ0,IDK2)
	 YUP(9)=SPPUP(IDK1,IDC1,IDQ0)

	 YUP(10)=SPPUP(IDK2,IDB1,IDQ0)
	 YUP(11)=SPPUP(IDK2,IDC2,IDQ0)
	 YUP(12)=SPPUP(IDK2,IDK1,IDQ0)
	 YUP(13)=SPPUP(IDK2,IDQ0,IDB2)
	 YUP(14)=SPPUP(IDK2,IDQ0,IDC2)
	 YUP(15)=SPPUP(IDK2,IDQ0,IDC1)
	 YUP(16)=SPPUP(IDK2,IDB2,IDQ0)
	 YUP(17)=SPPUP(IDK2,IDQ0,IDB1)
	 YUP(18)=SPPUP(IDK2,IDC1,IDQ0)

	 YUP(19)=SPPUP(IDQ0,IDK2,IDQ0)
	 YUP(20)=SPPUP(IDQ0,IDB1,IDC1)
	 YUP(21)=SPPUP(IDQ0,IDK1,IDB1)
	 YUP(22)=SPPUP(IDQ0,IDC2,IDB1)
	 YUP(23)=SPPUP(IDQ0,IDB1,IDC2)
	 YUP(24)=SPPUP(IDQ0,IDB2,IDC2)
	 YUP(25)=SPPUP(IDQ0,IDB1,IDK1)
	 YUP(26)=SPPUP(IDQ0,IDK2,IDB1)
	 YUP(27)=SPPUP(IDQ0,IDC1,IDQ0)
	 YUP(28)=SPPUP(IDQ0,IDC2,IDQ0)
	 YUP(29)=SPPUP(IDQ0,IDB1,IDQ0)
	 YUP(30)=SPPUP(IDQ0,IDB2,IDQ0)
	 YUP(31)=SPPUP(IDQ0,IDK1,IDQ0)
	 YUP(32)=SPPUP(IDQ0,IDC1,IDB1)
	 YUP(33)=SPPUP(IDQ0,IDK2,IDC2)

	 YUP(34)=SPPUP(IDC2,IDQ0,IDC1)
	 YUP(35)=SPPUP(IDB2,IDQ0,IDB1)
	 YUP(36)=SPPUP(IDB2,IDC2,IDQ0)
	 YUP(37)=SPPUP(IDB1,IDQ0,IDC2)
	 YUP(38)=SPPUP(IDQ0,IDK1,IDB2)
	 YUP(39)=SPPUP(IDQ0,IDB2,IDC1)
	 YUP(40)=SPPUP(IDQ0,IDK2,IDC1)
	 YUP(41)=SPPUP(IDQ0,IDK2,IDB2)
	 YUP(42)=SPPUP(IDQ0,IDC1,IDB2)
	 XUP(1)=INPUP(IDQ0,IDK1)*INPUP(IDQ0,IDK2)
	 XUP(2)=DCONJG(XUP(1))
       
	 IF(IQQBAR.EQ.1) THEN
	    YUP(43)=SPPUP(IDB1,IDQ0,IDC1)
	    YUP(44)=SPPUP(IDC2,IDB1,IDK2)
	    YUP(45)=SPPUP(IDC2,IDK1,IDK2)
	    YUP(46)=SPPUP(IDK1,IDB1,IDK2)
	    YUP(47)=SPPUP(IDK1,IDK2,IDB1)
	    YUP(48)=SPPUP(IDB2,IDK1,IDK2)
	    YUP(49)=SPPUP(IDK1,IDB2,IDC1)
	    YUP(50)=SPPUP(IDK1,IDB2,IDK2)

	    YUP(51)=SPPUP(IDB2,IDK1,IDB1)
	    YUP(52)=SPPUP(IDC2,IDK2,IDB1)
	    YUP(53)=SPPUP(IDK2,IDB1,IDK1)
	    YUP(54)=SPPUP(IDK2,IDK1,IDC1)
	    YUP(55)=SPPUP(IDC2,IDB1,IDK1)
	    YUP(56)=SPPUP(IDC2,IDK2,IDK1)
	    YUP(57)=SPPUP(IDK2,IDK1,IDB1)
	    YUP(58)=SPPUP(IDK2,IDB2,IDC1)
	    YUP(59)=SPPUP(IDB2,IDK2,IDK1)
	    YUP(60)=SPPUP(IDK2,IDB2,IDK1)

	    YUP(61)=SPPUP(IDB2,IDB1,IDQ0)
	    YUP(62)=SPPUP(IDB2,IDB1,IDC1)
	    YUP(63)=SPPUP(IDB2,IDK2,IDC1)
	    YUP(64)=SPPUP(IDB2,IDB1,IDC2)
	    YUP(65)=SPPUP(IDC1,IDQ0,IDB1)
	    YUP(66)=SPPUP(IDK1,IDK2,IDB2)
	    YUP(67)=SPPUP(IDC1,IDB2,IDK2)
	    YUP(68)=SPPUP(IDC2,IDB2,IDK2)
	    YUP(69)=SPPUP(IDB2,IDQ0,IDC1)
	    YUP(70)=SPPUP(IDC1,IDB1,IDB2)
	    
	    YUP(71)=SPPUP(IDB2,IDQ0,IDC2)
	    YUP(72)=SPPUP(IDC1,IDK2,IDK1)
	    YUP(73)=SPPUP(IDC2,IDB2,IDK1)
	    YUP(74)=SPPUP(IDC1,IDB1,IDK2)
	    YUP(75)=SPPUP(IDQ0,IDB2,IDB1)
	    YUP(76)=SPPUP(IDC1,IDK2,IDB1)
	    YUP(77)=SPPUP(IDB2,IDK2,IDC2)
	    YUP(78)=SPPUP(IDC2,IDK2,IDB2)
	    YUP(79)=SPPUP(IDQ0,IDK1,IDC1)
	    YUP(80)=SPPUP(IDQ0,IDK1,IDC2)
	    
	    YUP(81)=SPPUP(IDC1,IDB1,IDK1)
	    YUP(82)=SPPUP(IDK1,IDB2,IDB1)
	    YUP(83)=SPPUP(IDC2,IDB2,IDB1)
	    YUP(84)=SPPUP(IDC1,IDB2,IDB1)
	    YUP(85)=SPPUP(IDC2,IDB1,IDB2)
	    YUP(86)=SPPUP(IDK1,IDB2,IDC2)
	 END IF

       IF(IQQBAR.EQ.0) THEN
	  IF (II.EQ.1) CALL BFIRST
	  IF (II.EQ.2) CALL BSECOND
	  IF (II.EQ.3) CALL BTHIRD
	  IF (II.EQ.4) CALL BFOURTH
	 END IF
	 
	 IF(IQQBAR.EQ.1) THEN
	  IF (II.EQ.1) THEN
	    DO KK=1,64  
		  BFUN(1,II,KK)=0.0D0
            BFUN(2,II,KK)=0.0D0
	      BFUN(3,II,KK)=0.0D0
	      BFUN(4,II,KK)=0.0D0
	    END DO
		CALL BFIRST
	  END IF
	  IF (II.EQ.3) THEN
	    DO KK=1,64  
		  BFUN(1,II,KK)=0.0D0
            BFUN(2,II,KK)=0.0D0
	      BFUN(3,II,KK)=0.0D0
	      BFUN(4,II,KK)=0.0D0
	    END DO
		CALL BTHIRD
	  END IF
	 END IF

C...The needed basic propagators. PROPUP(N,1) from cb and cc sets. Other
C...propagators can be obtained from them by interchange gluons and quarks,
C...which can be achieved by interchanging the identity number of the 
C...particles (i.e. IDK1,IDK2,...). Here the correspondence of the diagram 
C...labels, Mcb1,Mcb2,..., to the original Feynman diagrams are shown in paper.
       IF(IQQBAR.EQ.0) THEN
C...PROPUP(1,1)<-Mcb1,PROPUP(2,1)<-Mcb2,PROPUP(3,1)<-Mcb3,PROPUP(4,1)<-Mcb4
       IF (II.EQ.1 .OR. II.EQ.2) THEN
         PROPUP(1,II)=1/(-2*DOTUP(IDB1,IDK2))/(2*DOTUP(IDC1,IDC1)
     &	 +2*DOTUP(IDC2,IDC1)-2*DOTUP(IDK1,IDC2)-2*DOTUP(IDK1,IDC1))
     &	 /(-2*DOTUP(IDK1,IDC2))
	   PROPUP(2,II)=1/(-2*DOTUP(IDB1,IDK2))/(2*DOTUP(IDC1,IDC1)
     &	 +2*DOTUP(IDC2,IDC1)-2*DOTUP(IDK1,IDC2)-2*DOTUP(IDK1,IDC1))
     &	 /(-2*DOTUP(IDC1,IDK1))
	   PROPUP(3,II)=1/(-2*DOTUP(IDB2,IDK2))/(2*DOTUP(IDC1,IDC1)
     &	 +2*DOTUP(IDC2,IDC1)-2*DOTUP(IDK1,IDC2)-
     &     2*DOTUP(IDK1,IDC1))/(-2*DOTUP(IDC2,IDK1))
	   PROPUP(4,II)=1/(-2*DOTUP(IDB2,IDK2))/(2*DOTUP(IDC1,IDC1)
     &	 +2*DOTUP(IDC2,IDC1)-2*DOTUP(IDK1,IDC2)-
     &	 2*DOTUP(IDK1,IDC1))/(-2*DOTUP(IDC1,IDK1))
	 END IF

C...PROPUP(5,1)->Mcc1,PROPUP(6,1)->Mcc3,PROPUP(7,1)->Mcc5
	 PROPUP(5,II)=1/(2*DOTUP(IDB1,IDB1)+2*DOTUP(IDB1,IDB2))
     &	 /(-2*DOTUP(IDC2,IDK2))/(2*DOTUP(IDK1,IDK2)-
     &	 2*DOTUP(IDK1,IDC2)-2*DOTUP(IDC2,IDK2))
	 PROPUP(6,II)=1/(2*DOTUP(IDB1,IDB1)+2*DOTUP(IDB1,IDB2))
     &	 /(-2*DOTUP(IDC2,IDK2))/(-2*DOTUP(IDC1,IDK1))
	 PROPUP(7,II)=1/(2*DOTUP(IDB1,IDB1)+2*DOTUP(IDB1,IDB2))
     &	 /(-2*DOTUP(IDC1,IDK1))/(2*DOTUP(IDK1,IDK2)
     &     -2*DOTUP(IDC1,IDK1)-2*DOTUP(IDC1,IDK2))

C...PROPUP(8,1)->Mcc7, PROPUP(9,1)->Mcc8
	 IF (II.EQ.1 .OR. II.EQ.3) THEN
	   PROPUP(8,II)=1/(2*DOTUP(IDB1,IDB1)+2*DOTUP(IDB1,IDB2))
     &	 /(2*DOTUP(IDK1,IDK2))/(2*DOTUP(IDK1,IDK2)
     &     -2*DOTUP(IDK1,IDC2)-2*DOTUP(IDC2,IDK2))
	   PROPUP(9,II)=1/(2*DOTUP(IDB1,IDB1)+2*DOTUP(IDB1,IDB2))
     &	 /(2*DOTUP(IDK1,IDK2))/(2*DOTUP(IDK1,IDK2)
     &     -2*DOTUP(IDC1,IDK1)-2*DOTUP(IDC1,IDK2))
	 END IF

C...PROPUP(10,1)->Mco1, PROPUP(11,1)->Mco2
	 PROPUP(10,II)=1/(2*DOTUP(IDB1,IDB1)+2*DOTUP(IDB1,IDB2))
     &	 /(-2*DOTUP(IDC2,IDK1))/(2*DOTUP(IDB1,IDB1)+2*DOTUP(IDB1,IDB2)
     &     -2*DOTUP(IDB1,IDK2)-2*DOTUP(IDB2,IDK2))
	 PROPUP(11,II)=1/(2*DOTUP(IDB1,IDB1)+2*DOTUP(IDB1,IDB2))
     &	 /(-2*DOTUP(IDC1,IDK1))/(2*DOTUP(IDB1,IDB1)+2*DOTUP(IDB1,IDB2)
     &	 -2*DOTUP(IDB1,IDK2)-2*DOTUP(IDB2,IDK2))

C...PROPUP(12,1)->Moo1
	 IF (II.EQ.1 .OR. II.EQ.2) THEN
	   PROPUP(12,II)=1/(2*DOTUP(IDB1,IDB1)+2*DOTUP(IDB1,IDB2))/
     &	 (2*DOTUP(IDC1,IDC1)+2*DOTUP(IDC2,IDC1))/(2*DOTUP(IDB1,IDB1)
     &     +2*DOTUP(IDB1,IDB2)-2*DOTUP(IDB1,IDK1)-2*DOTUP(IDB2,IDK1))
	 END IF

C...PROPUP(13,1)->Moo3, PROPUP(14,1)->Moo4
	 IF (II.EQ.1) THEN
	   PROPUP(13,II)=1/(2*DOTUP(IDB1,IDB1)+2*DOTUP(IDB1,IDB2))/
     &	 (2*DOTUP(IDK1,IDK2))/(2*DOTUP(IDC1,IDC1)+2*DOTUP(IDC2,IDC1))
	   PROPUP(14,II)=1/(2*DOTUP(IDB1,IDB1)+2*DOTUP(IDB1,IDB2))/
     &	 (2*DOTUP(IDC1,IDC1)+2*DOTUP(IDC2,IDC1))
	 END IF
	 END IF

       IF(IQQBAR.EQ.1) THEN
	   IF (II.EQ.1 .OR. II.EQ.3) THEN
	     PROPUP(1,II)=1/(2*DOTUP(IDK1,IDK2))/(2*DOTUP(IDK1,IDK2)-
     &		 2*DOTUP(IDK1,IDB1)-2*DOTUP(IDK2,IDB1))/
     &         (2*DOTUP(IDC1,IDC1)+2*DOTUP(IDC1,IDC2))
		 PROPUP(2,II)=1/(2.*DOTUP(IDK1,IDK2))/(2*DOTUP(IDK1,IDK2)-
     &		 2*DOTUP(IDK1,IDB2)-2*DOTUP(IDK2,IDB2))/
     &         (2*DOTUP(IDC1,IDC1)+2*DOTUP(IDC1,IDC2))
		 PROPUP(4,II)=1/(-2*DOTUP(IDK1,IDB1)-2*DOTUP(IDK1,IDB2)+
     &		 2*DOTUP(IDB1,IDB1)+2*DOTUP(IDB1,IDB2))/
     &         (2*DOTUP(IDC1,IDC1)+2*DOTUP(IDC1,IDC2))/
     &         (2*DOTUP(IDB1,IDB1)+2*DOTUP(IDB1,IDB2))
	     IF(II.EQ.1) THEN
		   PROPUP(3,II)=1/(2*DOTUP(IDK1,IDK2))/
     &         (2*DOTUP(IDC1,IDC1)+2*DOTUP(IDC1,IDC2))/
     &         (2*DOTUP(IDB1,IDB1)+2*DOTUP(IDB1,IDB2))
	     END IF
	   END IF
	 END IF
700   CONTINUE
      	
C...Five collectted matrix elements according to the color factor C_1ij, 
C...C_2ij, C_3ij, C_4ij and C_5ij. Note here the DSQRT part in the denominator
C...is needed, for all the quarks are massive. The following result is get
C...from the MATHMATICAL program: matrixtotal.nb. Here KK=1-64 stands for the 
c...helicity of the amplitude.

      IF(IQQBAR.EQ.0) THEN
C0--------
      IF(IOCTET.EQ.0) THEN
	 DO 900, KK=1,64
	 COLMAT(1,KK)=(-((BFUN(6,1,KK) + (BFUN(9,1,KK) - BFUN(9,2,KK))*
     -   (DOTUP(1,2) - DOTUP(5,1) - DOTUP(5,2)))*PROPUP(8,1)) - 
     -   BFUN(8,3,KK)*PROPUP(9,3) - (4*BFUN(5,3,KK) - 4*BFUN(5,4,KK) +
     -   BFUN(9,3,KK)-BFUN(9,4,KK))*(DOTUP(1,2)-DOTUP(4,1)-DOTUP(4,2))*
     -   PROPUP(9,3) + BFUN(8,4,KK)*(PROPUP(7,4) + PROPUP(9,3)) + 
     -   2*BFUN(5,1,KK)*DOTUP(5,1)*PROPUP(10,1) +(-BFUN(2,4,KK) 
     -   + BFUN(4,4,KK))*PROPUP(11,4) + 2*BFUN(5,4,KK)*DOTUP(4,2)
     -   *PROPUP(11,4) +(-BFUN(2,1,KK) + BFUN(4,1,KK))*PROPUP(12,2) + 
     -   2*BFUN(5,1,KK)*DOTUP(4,4)*PROPUP(12,2)+2*BFUN(5,1,KK)*
     -   DOTUP(4,6) *PROPUP(12,2) + 2*BFUN(5,1,KK)*DOTUP(5,1)*
     -   PROPUP(12,2) +2*BFUN(5,1,KK)*DOTUP(7,1)*PROPUP(12,2) - 
     -   BFUN(3,1,KK)*(PROPUP(10,1) + PROPUP(12,2)) +BFUN(1,1,KK)* 
     -   (PROPUP(1,1) + PROPUP(10,1) + PROPUP(12,2)) - (BFUN(6,1,KK)
     -   - BFUN(8,1,KK) + BFUN(8,2,KK))*PROPUP(13,1) +4*BFUN(5,1,KK) 
     -   *DOTUP(1,2)*PROPUP(13,1)-4*BFUN(5,2,KK)*DOTUP(1,2)*PROPUP(13,1) 
     -   +BFUN(9,1,KK)*DOTUP(5,1)*PROPUP(13,1) -BFUN(9,2,KK)*DOTUP(5,1) 
     -   *PROPUP(13,1) + BFUN(9,1,KK)*DOTUP(5,2)*PROPUP(13,1) - 
     -   BFUN(9,2,KK)*DOTUP(5,2)*PROPUP(13,1) - 4*BFUN(5,1,KK)*
     -   DOTUP(7,1)*PROPUP(13,1)+4*BFUN(5,2,KK)*DOTUP(7,1)*PROPUP(13,1)- 
     -   BFUN(9,1,KK)*DOTUP(7,1)*PROPUP(13,1) + BFUN(9,2,KK)*
     -   DOTUP(7,1)*PROPUP(13,1) - 4*BFUN(5,1,KK)*DOTUP(7,2)*
     -   PROPUP(13,1) + 4*BFUN(5,2,KK)*DOTUP(7,2)*PROPUP(13,1) - 
     -   BFUN(9,1,KK)*DOTUP(7,2)*PROPUP(13,1) + BFUN(9,2,KK)
     -   *DOTUP(7,2)*PROPUP(13,1) + BFUN(6,2,KK)*(PROPUP(5,2)
     -   + PROPUP(8,1) + PROPUP(13,1)) - ((2*BFUN(5,1,KK) -
     -   4*BFUN(5,2,KK)+BFUN(9,1,KK)+BFUN(9,2,KK))*PROPUP(14,1))/2.)
     -   /DSQRT(DOTUP(8,6)*DOTUP(8,7)*DOTUP(8,4)*DOTUP(8,5))

	 COLMAT(2,KK)=((BFUN(9,1,KK) - BFUN(9,2,KK))*
     -   (DOTUP(1,2) - DOTUP(5,1) - DOTUP(5,2))*PROPUP(8,1) - 
     -   BFUN(8,4,KK)*PROPUP(9,3) + 4*BFUN(5,3,KK)*DOTUP(1,2)*
     -   PROPUP(9,3) -4*BFUN(5,4,KK)*DOTUP(1,2)*PROPUP(9,3) + 
     -   BFUN(9,3,KK)*DOTUP(1,2)*PROPUP(9,3)-BFUN(9,4,KK)*DOTUP(1,2) 
     -   *PROPUP(9,3) -4*BFUN(5,3,KK)*DOTUP(4,1)*PROPUP(9,3) + 
     -   4*BFUN(5,4,KK)*DOTUP(4,1)*PROPUP(9,3) - BFUN(9,3,KK)
     -   *DOTUP(4,1)*PROPUP(9,3) + BFUN(9,4,KK)*DOTUP(4,1)
     -   *PROPUP(9,3) -4*BFUN(5,3,KK)*DOTUP(4,2)*PROPUP(9,3) + 
     -   4*BFUN(5,4,KK)*DOTUP(4,2)*PROPUP(9,3)-BFUN(9,3,KK)*DOTUP(4,2) 
     -   *PROPUP(9,3) +BFUN(9,4,KK)*DOTUP(4,2)*PROPUP(9,3) + 
     -   BFUN(8,3,KK)*(PROPUP(7,3) + PROPUP(9,3)) +2*BFUN(5,2,KK) 
     -   *DOTUP(5,2)*PROPUP(10,2) +(-BFUN(2,3,KK) + BFUN(4,3,KK) 
     -   )*PROPUP(11,3) +2*BFUN(5,3,KK)*DOTUP(4,1)*PROPUP(11,3) + 
     -   (-BFUN(2,2,KK) + BFUN(4,2,KK))*PROPUP(12,1) + 
     -   2*BFUN(5,2,KK)*DOTUP(4,4)*PROPUP(12,1) +2*BFUN(5,2,KK) 
     -   *DOTUP(4,6)*PROPUP(12,1) + 2*BFUN(5,2,KK)*DOTUP(5,2)
     -   *PROPUP(12,1) +2*BFUN(5,2,KK)*DOTUP(7,2)*PROPUP(12,1) - 
     -   BFUN(3,2,KK)*(PROPUP(10,2) + PROPUP(12,1)) + 
     -   BFUN(1,2,KK)*(PROPUP(1,2) + PROPUP(10,2) + PROPUP(12,1)) + 
     -   (-BFUN(8,1,KK) + BFUN(8,2,KK))*PROPUP(13,1) - 
     -   4*BFUN(5,1,KK)*DOTUP(1,2)*PROPUP(13,1) +4*BFUN(5,2,KK)* 
     -   DOTUP(1,2)*PROPUP(13,1)-BFUN(9,1,KK)*DOTUP(5,1)*PROPUP(13,1) + 
     -   BFUN(9,2,KK)*DOTUP(5,1)*PROPUP(13,1) - BFUN(9,1,KK)
     -   *DOTUP(5,2)*PROPUP(13,1)+BFUN(9,2,KK)*DOTUP(5,2)*PROPUP(13,1)+ 
     -   4*BFUN(5,1,KK)*DOTUP(7,1)*PROPUP(13,1) - 4*BFUN(5,2,KK)
     -   *DOTUP(7,1)*PROPUP(13,1) + BFUN(9,1,KK)*DOTUP(7,1)
     -   *PROPUP(13,1) - BFUN(9,2,KK)*DOTUP(7,1)*PROPUP(13,1) + 
     -   4*BFUN(5,1,KK)*DOTUP(7,2)*PROPUP(13,1) - 4*BFUN(5,2,KK)
     -   *DOTUP(7,2)*PROPUP(13,1) + BFUN(9,1,KK)*DOTUP(7,2)
     -   *PROPUP(13,1) - BFUN(9,2,KK)*DOTUP(7,2)*PROPUP(13,1) - 
     -   BFUN(6,2,KK)*(PROPUP(8,1) + PROPUP(13,1)) + 
     -   BFUN(6,1,KK)*(PROPUP(5,1) + PROPUP(8,1) + PROPUP(13,1)) - 
     -   ((-4*BFUN(5,1,KK) + 2*BFUN(5,2,KK) + BFUN(9,1,KK) + 
     -   BFUN(9,2,KK))*PROPUP(14,1))/2.) 
     -   /DSQRT(DOTUP(8,6)*DOTUP(8,7)*DOTUP(8,4)*DOTUP(8,5))
	
	 COLMAT(3,KK)=(BFUN(4,1,KK)*PROPUP(4,1)+BFUN(7,2,KK)*PROPUP(6,2)+ 
     -   BFUN(7,4,KK)*PROPUP(6,4) - BFUN(6,3,KK)*PROPUP(8,3) - 
     -   (BFUN(9,3,KK)-BFUN(9,4,KK))*(DOTUP(1,2)-DOTUP(6,1)-DOTUP(6,2))
     -   *PROPUP(8,3) +BFUN(6,4,KK)*(PROPUP(5,4) + PROPUP(8,3)) - 
     -   (4*BFUN(5,1,KK) - 4*BFUN(5,2,KK) + BFUN(9,1,KK) - 
     -   BFUN(9,2,KK))*(DOTUP(1,2) - DOTUP(7,1) - DOTUP(7,2))*
     -   PROPUP(9,1) - 2*BFUN(5,1,KK)*DOTUP(5,1)*PROPUP(10,1) + 
     -   (BFUN(2,4,KK) - BFUN(4,4,KK) - 2*BFUN(5,4,KK)*DOTUP(4,2))*
     -   PROPUP(11,4) - BFUN(4,1,KK)*PROPUP(12,2) - 
     -   2*BFUN(5,1,KK)*DOTUP(4,4)*PROPUP(12,2) - 
     -   2*BFUN(5,1,KK)*DOTUP(4,6)*PROPUP(12,2) - 
     -   2*BFUN(5,1,KK)*DOTUP(5,1)*PROPUP(12,2) - 
     -   2*BFUN(5,1,KK)*DOTUP(7,1)*PROPUP(12,2) + 
     -   BFUN(2,1,KK)*(PROPUP(2,1) + PROPUP(12,2)) - 
     -   BFUN(1,1,KK)*(PROPUP(10,1) + PROPUP(12,2)) + 
     -   BFUN(3,1,KK)*(PROPUP(3,1)+PROPUP(10,1)+PROPUP(12,2))+ 
     -   (BFUN(6,1,KK) - BFUN(6,2,KK))*PROPUP(13,1) - 
     -   4*BFUN(5,1,KK)*DOTUP(1,2)*PROPUP(13,1) + 
     -   4*BFUN(5,2,KK)*DOTUP(1,2)*PROPUP(13,1) - 
     -   BFUN(9,1,KK)*DOTUP(5,1)*PROPUP(13,1) + 
     -   BFUN(9,2,KK)*DOTUP(5,1)*PROPUP(13,1) - 
     -   BFUN(9,1,KK)*DOTUP(5,2)*PROPUP(13,1) + 
     -   BFUN(9,2,KK)*DOTUP(5,2)*PROPUP(13,1) + 
     -   4*BFUN(5,1,KK)*DOTUP(7,1)*PROPUP(13,1) - 
     -   4*BFUN(5,2,KK)*DOTUP(7,1)*PROPUP(13,1) + 
     -   BFUN(9,1,KK)*DOTUP(7,1)*PROPUP(13,1) - 
     -   BFUN(9,2,KK)*DOTUP(7,1)*PROPUP(13,1) + 
     -   4*BFUN(5,1,KK)*DOTUP(7,2)*PROPUP(13,1) - 
     -   4*BFUN(5,2,KK)*DOTUP(7,2)*PROPUP(13,1) + 
     -   BFUN(9,1,KK)*DOTUP(7,2)*PROPUP(13,1) - 
     -   BFUN(9,2,KK)*DOTUP(7,2)*PROPUP(13,1) - 
     -   BFUN(8,1,KK)*(PROPUP(9,1) + PROPUP(13,1)) + 
     -   BFUN(8,2,KK)*(PROPUP(7,2) + PROPUP(9,1) + PROPUP(13,1)) + 
     -   ((2*BFUN(5,1,KK) - 4*BFUN(5,2,KK) + BFUN(9,1,KK) + 
     -   BFUN(9,2,KK))*PROPUP(14,1))/2.)
     -   /DSQRT(DOTUP(8,6)*DOTUP(8,7)*DOTUP(8,4)*DOTUP(8,5))
	
	 COLMAT(4,KK)=(BFUN(4,2,KK)*PROPUP(4,2)+BFUN(7,1,KK)*PROPUP(6,1)+ 
     -   BFUN(7,3,KK)*PROPUP(6,3) - (BFUN(6,4,KK) - (BFUN(9,3,KK) 
     -   -BFUN(9,4,KK))*(DOTUP(1,2)-DOTUP(6,1)-DOTUP(6,2)))*PROPUP(8,3)+ 
     -   BFUN(6,3,KK)*(PROPUP(5,3) + PROPUP(8,3)) - (BFUN(8,2,KK)
     -   -(4*BFUN(5,1,KK)-4*BFUN(5,2,KK)+BFUN(9,1,KK) -BFUN(9,2,KK))*
     -   (DOTUP(1,2) - DOTUP(7,1) - DOTUP(7,2)))*PROPUP(9,1) - 
     -   2*BFUN(5,2,KK)*DOTUP(5,2)*PROPUP(10,2) +BFUN(3,2,KK) 
     -   *(PROPUP(3,2) + PROPUP(10,2)) + (BFUN(2,3,KK) - 
     -   BFUN(4,3,KK) - 2*BFUN(5,3,KK)*DOTUP(4,1))*PROPUP(11,3) + 
     -   BFUN(3,2,KK)*PROPUP(12,1) -BFUN(4,2,KK)*PROPUP(12,1) - 
     -   2*BFUN(5,2,KK)*DOTUP(4,4)*PROPUP(12,1) - 
     -   2*BFUN(5,2,KK)*DOTUP(4,6)*PROPUP(12,1) - 
     -   2*BFUN(5,2,KK)*DOTUP(5,2)*PROPUP(12,1) - 
     -   2*BFUN(5,2,KK)*DOTUP(7,2)*PROPUP(12,1) + 
     -   BFUN(2,2,KK)*(PROPUP(2,2) + PROPUP(12,1)) - 
     -   BFUN(1,2,KK)*(PROPUP(10,2) + PROPUP(12,1)) + 
     -   (-BFUN(6,1,KK) + BFUN(6,2,KK))*PROPUP(13,1) - 
     -   4*BFUN(5,2,KK)*DOTUP(1,2)*PROPUP(13,1) - 
     -   (BFUN(8,2,KK)-4*BFUN(5,1,KK)*DOTUP(1,2))*PROPUP(13,1)+ 
     -   BFUN(9,1,KK)*DOTUP(5,1)*PROPUP(13,1) - 
     -   BFUN(9,2,KK)*DOTUP(5,1)*PROPUP(13,1) + 
     -   BFUN(9,1,KK)*DOTUP(5,2)*PROPUP(13,1) - 
     -   BFUN(9,2,KK)*DOTUP(5,2)*PROPUP(13,1) - 
     -   4*BFUN(5,1,KK)*DOTUP(7,1)*PROPUP(13,1) + 
     -   4*BFUN(5,2,KK)*DOTUP(7,1)*PROPUP(13,1) - 
     -   BFUN(9,1,KK)*DOTUP(7,1)*PROPUP(13,1) + 
     -   BFUN(9,2,KK)*DOTUP(7,1)*PROPUP(13,1) - 
     -   4*BFUN(5,1,KK)*DOTUP(7,2)*PROPUP(13,1) + 
     -   4*BFUN(5,2,KK)*DOTUP(7,2)*PROPUP(13,1) - 
     -   BFUN(9,1,KK)*DOTUP(7,2)*PROPUP(13,1) + 
     -   BFUN(9,2,KK)*DOTUP(7,2)*PROPUP(13,1) + 
     -   BFUN(8,1,KK)*(PROPUP(7,1) + PROPUP(9,1) + PROPUP(13,1)) + 
     -   ((-4*BFUN(5,1,KK) + 2*BFUN(5,2,KK) + BFUN(9,1,KK) + 
     -   BFUN(9,2,KK))*PROPUP(14,1))/2.)
     &   /DSQRT(DOTUP(8,6)*DOTUP(8,7)*DOTUP(8,4)*DOTUP(8,5))
	
	 COLMAT(5,KK)=(-(BFUN(6,3,KK)*PROPUP(5,3))-BFUN(6,4,KK)*
     -   PROPUP(5,4)-BFUN(8,1,KK)*PROPUP(7,1)-BFUN(8,2,KK)*PROPUP(7,2)+ 
     -   (-BFUN(1,3,KK) + BFUN(3,3,KK) - 2*BFUN(5,3,KK)*DOTUP(6,1))*
     -   PROPUP(10,3) + (-BFUN(1,4,KK) + BFUN(3,4,KK) - 
     -   2*BFUN(5,4,KK)*DOTUP(6,2))*PROPUP(10,4) + (BFUN(2,2,KK) -
     -   2*BFUN(5,2,KK)*DOTUP(7,2))*PROPUP(11,2) -BFUN(1,2,KK)* 
     -   PROPUP(12,1) +(BFUN(2,2,KK) + BFUN(3,2,KK) - 2*BFUN(5,2,KK)
     -   *(DOTUP(4,4) + DOTUP(4,6) + DOTUP(5,2) +DOTUP(7,2))) 
     -   *PROPUP(12,1) - BFUN(4,2,KK)*(PROPUP(4,2) +PROPUP(11,2) +
     -   PROPUP(12,1)) +(-BFUN(1,1,KK) + BFUN(3,1,KK))*PROPUP(12,2)+ 
     -   BFUN(2,1,KK)*(PROPUP(11,1) + PROPUP(12,2)) -BFUN(4,1,KK)* 
     -   (PROPUP(4,1) + PROPUP(11,1) + PROPUP(12,2)) +(-BFUN(5,2,KK) 
     -   + BFUN(9,1,KK) + BFUN(9,2,KK))*PROPUP(14,1) - BFUN(5,1,KK)*
     -   (2*DOTUP(7,1)*PROPUP(11,1) +2*(DOTUP(4,4) + DOTUP(4,6) + 
     -   DOTUP(5,1) + DOTUP(7,1))*PROPUP(12,2) + PROPUP(14,1)))
     &   /DSQRT(DOTUP(8,6)*DOTUP(8,7)*DOTUP(8,4)*DOTUP(8,5))	 
900    CONTINUE
       END IF
C0---------
C8---------
	 IF(IOCTET.EQ.1) THEN
	  DO KK=1,64
	    COLMAT(1,KK)=(-(BFUN(7,1,KK)*PROPUP(6,1)) + 
     -      (BFUN(6,2,KK) - (BFUN(9,1,KK) - BFUN(9,2,KK))*
     -      (DOTUP(1,2) - DOTUP(5,1) - DOTUP(5,2)))*PROPUP(8,1) - 
     -      BFUN(6,1,KK)*(PROPUP(5,1)+PROPUP(8,1))+(BFUN(8,2,KK)-
     -      (4*BFUN(5,1,KK)-4*BFUN(5,2,KK)+BFUN(9,1,KK)-BFUN(9,2,KK))*
     -      (DOTUP(1,2) - DOTUP(7,1) - DOTUP(7,2)))*PROPUP(9,1) - 
     -      BFUN(8,1,KK)*(PROPUP(7,1) + PROPUP(9,1)))
     &      /DSQRT(DOTUP(8,6)*DOTUP(8,7)*DOTUP(8,4)*DOTUP(8,5))	 
		COLMAT(2,KK)=(-(BFUN(7,2,KK)*PROPUP(6,2)) + 
     -      (BFUN(6,1,KK) + (BFUN(9,1,KK) - BFUN(9,2,KK))*
     -      (DOTUP(1,2) - DOTUP(5,1) - DOTUP(5,2)))*PROPUP(8,1) - 
     -      BFUN(6,2,KK)*(PROPUP(5,2)+PROPUP(8,1))+(BFUN(8,1,KK)+ 
     -      (4*BFUN(5,1,KK)-4*BFUN(5,2,KK)+BFUN(9,1,KK)-BFUN(9,2,KK))*
     -      (DOTUP(1,2) - DOTUP(7,1) - DOTUP(7,2)))*PROPUP(9,1)- 
     -      BFUN(8,2,KK)*(PROPUP(7,2) + PROPUP(9,1)))
     &      /DSQRT(DOTUP(8,6)*DOTUP(8,7)*DOTUP(8,4)*DOTUP(8,5))	 
	COLMAT(3,KK)=(BFUN(7,1,KK)*PROPUP(6,1)+BFUN(7,4,KK)*PROPUP(6,4)- 
     -      (BFUN(1,2,KK) + 2*BFUN(5,2,KK)*DOTUP(5,2))*PROPUP(10,2) + 
     -      (-BFUN(1,3,KK) + BFUN(3,3,KK) - 2*BFUN(5,3,KK)*DOTUP(6,1))*
     -      PROPUP(10,3) + (BFUN(2,4,KK) - BFUN(4,4,KK) - 
     -      2*BFUN(5,4,KK)*DOTUP(4,2))*PROPUP(11,4) - 
     -      (BFUN(1,2,KK) - BFUN(2,2,KK) + BFUN(4,2,KK) + 
     -      2*BFUN(5,2,KK)*(DOTUP(4,4) + DOTUP(4,6) + DOTUP(5,2) + 
     -      DOTUP(7,2)))*PROPUP(12,1) + 
     -      BFUN(3,2,KK)*(PROPUP(3,2) + PROPUP(10,2) + PROPUP(12,1)) - 
     -      BFUN(1,1,KK)*PROPUP(12,2) + BFUN(3,1,KK)*PROPUP(12,2) - 
     -      BFUN(4,1,KK)*(PROPUP(11,1) + PROPUP(12,2)) + 
     -      BFUN(2,1,KK)*(PROPUP(2,1) + PROPUP(11,1) + PROPUP(12,2)) + 
     -      2*BFUN(5,1,KK)*(-(DOTUP(7,1)*PROPUP(11,1)) - 
     -      (DOTUP(4,4) + DOTUP(4,6) + DOTUP(5,1) + DOTUP(7,1))*
     -      PROPUP(12,2)) - (BFUN(5,1,KK) + BFUN(5,2,KK) - 
     -      BFUN(9,1,KK) - BFUN(9,2,KK))*PROPUP(14,1))
     &      /DSQRT(DOTUP(8,6)*DOTUP(8,7)*DOTUP(8,4)*DOTUP(8,5))	 
	 COLMAT(4,KK)=(BFUN(7,2,KK)*PROPUP(6,2)+BFUN(7,3,KK)*PROPUP(6,3) 
     -      -(BFUN(1,1,KK) + 2*BFUN(5,1,KK)*DOTUP(5,1))*PROPUP(10,1) + 
     -      (-BFUN(1,4,KK) + BFUN(3,4,KK) - 2*BFUN(5,4,KK)*DOTUP(6,2))*
     -      PROPUP(10,4) + (BFUN(2,3,KK) - BFUN(4,3,KK) - 
     -      2*BFUN(5,3,KK)*DOTUP(4,1))*PROPUP(11,3) - 
     -      BFUN(1,2,KK)*PROPUP(12,1) + BFUN(3,2,KK)*PROPUP(12,1) - 
     -      BFUN(4,2,KK)*(PROPUP(11,2) + PROPUP(12,1)) + 
     -      BFUN(2,2,KK)*(PROPUP(2,2) + PROPUP(11,2) + PROPUP(12,1)) - 
     -      2*BFUN(5,2,KK)*(DOTUP(7,2)*PROPUP(11,2) + 
     -      (DOTUP(4,4) + DOTUP(4,6) + DOTUP(5,2) + DOTUP(7,2))*
     -      PROPUP(12,1))- (BFUN(1,1,KK) - BFUN(2,1,KK) + BFUN(4,1,KK))
     -      *PROPUP(12,2)-2*BFUN(5,1,KK)*(DOTUP(4,4)+DOTUP(4,6)+
     -      DOTUP(5,1)+DOTUP(7,1))*PROPUP(12,2)+BFUN(3,1,KK)*
     -      (PROPUP(3,1)+PROPUP(10,1)+PROPUP(12,2)) - (BFUN(5,1,KK) +
     -      BFUN(5,2,KK) - BFUN(9,1,KK) - BFUN(9,2,KK))*PROPUP(14,1))
     &      /DSQRT(DOTUP(8,6)*DOTUP(8,7)*DOTUP(8,4)*DOTUP(8,5))	 
	 COLMAT(5,KK)=(-((BFUN(6,4,KK) - (BFUN(9,3,KK) - BFUN(9,4,KK))*
     -      (DOTUP(1,2) - DOTUP(6,1) - DOTUP(6,2)))*PROPUP(8,3)) + 
     -      BFUN(6,3,KK)*(PROPUP(5,3) + PROPUP(8,3)) - (BFUN(8,2,KK) - 
     -      (4*BFUN(5,1,KK)-4*BFUN(5,2,KK)+BFUN(9,1,KK)-BFUN(9,2,KK))*
     -      (DOTUP(1,2) - DOTUP(7,1) - DOTUP(7,2)))*PROPUP(9,1) + 
     -      (BFUN(1,4,KK) - BFUN(3,4,KK))*PROPUP(10,4) + 
     -      2*BFUN(5,4,KK)*DOTUP(6,2)*PROPUP(10,4) + (BFUN(1,1,KK) - 
     -      BFUN(3,1,KK))*PROPUP(12,2) - BFUN(2,1,KK)*(PROPUP(11,1) + 
     -      PROPUP(12,2)) + BFUN(4,1,KK)*(PROPUP(4,1) + PROPUP(11,1) + 
     -      PROPUP(12,2)) +(-BFUN(6,1,KK) + BFUN(6,2,KK))*PROPUP(13,1) - 
     -      BFUN(8,2,KK)*PROPUP(13,1) -(4*BFUN(5,2,KK)*(DOTUP(1,2) - 
     -      DOTUP(7,1) - DOTUP(7,2)) - (BFUN(9,1,KK) - BFUN(9,2,KK))*
     -      (DOTUP(5,1) + DOTUP(5,2) - DOTUP(7,1) - DOTUP(7,2)))*
     -      PROPUP(13,1) + BFUN(8,1,KK)*(PROPUP(7,1) + PROPUP(9,1) +
     -      PROPUP(13,1)) + BFUN(5,1,KK)*(2*(DOTUP(4,4) + DOTUP(4,6) +
     -      DOTUP(5,1))*PROPUP(12,2) + 2*DOTUP(7,1)*(PROPUP(11,1) + 
     -      PROPUP(12,2) - 2*PROPUP(13,1)) + 4*(DOTUP(1,2) - 
     -      DOTUP(7,2))*PROPUP(13,1) - PROPUP(14,1)) +((4*BFUN(5,2,KK) 
     -      - BFUN(9,1,KK) - BFUN(9,2,KK))*PROPUP(14,1))/2.)
     &      /DSQRT(DOTUP(8,6)*DOTUP(8,7)*DOTUP(8,4)*DOTUP(8,5))	 
		COLMAT(6,KK)=(-((BFUN(6,3,KK)+(BFUN(9,3,KK)-BFUN(9,4,KK))*
     -      (DOTUP(1,2) - DOTUP(6,1) - DOTUP(6,2)))*PROPUP(8,3)) + 
     -      BFUN(6,4,KK)*(PROPUP(5,4) + PROPUP(8,3)) - 
     -      (4*BFUN(5,1,KK) - 4*BFUN(5,2,KK) + BFUN(9,1,KK) - 
     -      BFUN(9,2,KK))*(DOTUP(1,2) - DOTUP(7,1) - DOTUP(7,2))*
     -      PROPUP(9,1) + (BFUN(1,3,KK) - BFUN(3,3,KK))*PROPUP(10,3)+ 
     -      2*BFUN(5,3,KK)*DOTUP(6,1)*PROPUP(10,3) + 
     -      (BFUN(1,2,KK) - BFUN(3,2,KK))*PROPUP(12,1) - 
     -      BFUN(2,2,KK)*(PROPUP(11,2) + PROPUP(12,1)) + 
     -      BFUN(4,2,KK)*(PROPUP(4,2) + PROPUP(11,2) + PROPUP(12,1))+ 
     -      (BFUN(6,1,KK) - BFUN(6,2,KK))*PROPUP(13,1) - 
     -      4*BFUN(5,1,KK)*DOTUP(1,2)*PROPUP(13,1) - 
     -      ((BFUN(9,1,KK) - BFUN(9,2,KK))*(DOTUP(5,1) +DOTUP(5,2) -  
     -      DOTUP(7,1) - DOTUP(7,2)) - 4*BFUN(5,1,KK)*(DOTUP(7,1)
     -      + DOTUP(7,2)))*PROPUP(13,1) - BFUN(8,1,KK)*(PROPUP(9,1) +
     -      PROPUP(13,1)) + BFUN(8,2,KK)*(PROPUP(7,2) + PROPUP(9,1) + 
     -      PROPUP(13,1)) + BFUN(5,2,KK)*(2*(DOTUP(4,4) + DOTUP(4,6)+
     -      DOTUP(5,2))*PROPUP(12,1) + 2*DOTUP(7,2)*(PROPUP(11,2) + 
     -      PROPUP(12,1) - 2*PROPUP(13,1)) + 4*(DOTUP(1,2) -
     -      DOTUP(7,1))*PROPUP(13,1)-PROPUP(14,1))-((-4*BFUN(5,1,KK)+
     -      BFUN(9,1,KK) + BFUN(9,2,KK))*PROPUP(14,1))/2.)
     &      /DSQRT(DOTUP(8,6)*DOTUP(8,7)*DOTUP(8,4)*DOTUP(8,5))
		COLMAT(7,KK)=(-(BFUN(7,3,KK)*PROPUP(6,3)) + 
     -      (BFUN(6,4,KK) - (BFUN(9,3,KK) - BFUN(9,4,KK))*
     -      (DOTUP(1,2) - DOTUP(6,1) - DOTUP(6,2)))*PROPUP(8,3) - 
     -      BFUN(6,3,KK)*(PROPUP(5,3) + PROPUP(8,3)) + 
     -      (BFUN(8,4,KK) - (4*BFUN(5,3,KK) - 4*BFUN(5,4,KK) + 
     -      BFUN(9,3,KK) - BFUN(9,4,KK))*
     -      (DOTUP(1,2) - DOTUP(4,1) - DOTUP(4,2)))*PROPUP(9,3) - 
     -      BFUN(8,3,KK)*(PROPUP(7,3) + PROPUP(9,3)))
     &      /DSQRT(DOTUP(8,6)*DOTUP(8,7)*DOTUP(8,4)*DOTUP(8,5))	 
	  	COLMAT(8,KK)=(-(BFUN(7,4,KK)*PROPUP(6,4)) + 
     -      (BFUN(6,3,KK) + (BFUN(9,3,KK) - BFUN(9,4,KK))*
     -      (DOTUP(1,2) - DOTUP(6,1) - DOTUP(6,2)))*PROPUP(8,3) - 
     -      BFUN(6,4,KK)*(PROPUP(5,4) + PROPUP(8,3)) + 
     -      (BFUN(8,3,KK) + (4*BFUN(5,3,KK) - 4*BFUN(5,4,KK) + 
     -      BFUN(9,3,KK) - BFUN(9,4,KK))*
     -      (DOTUP(1,2) - DOTUP(4,1) - DOTUP(4,2)))*PROPUP(9,3) - 
     -      BFUN(8,4,KK)*(PROPUP(7,4) + PROPUP(9,3)))
     &      /DSQRT(DOTUP(8,6)*DOTUP(8,7)*DOTUP(8,4)*DOTUP(8,5))	 
		COLMAT(9,KK)=(-(BFUN(1,1,KK)*PROPUP(1,1))-BFUN(2,1,KK)*
     -      PROPUP(2,1)-BFUN(3,1,KK)*PROPUP(3,1)-BFUN(4,1,KK)*
     &      PROPUP(4,1))/DSQRT(DOTUP(8,6)*DOTUP(8,7)*DOTUP(8,4)*
     &      DOTUP(8,5))
		COLMAT(10,KK)=(-(BFUN(1,2,KK)*PROPUP(1,2))-BFUN(2,2,KK)*
     -	  PROPUP(2,2) - BFUN(3,2,KK)*PROPUP(3,2) - BFUN(4,2,KK)*
     -      PROPUP(4,2))/DSQRT(DOTUP(8,6)*DOTUP(8,7)*DOTUP(8,4)*
     &      DOTUP(8,5))	 
	  END DO
	 END IF
C8---------
      END IF

	IF(IQQBAR.EQ.1) THEN
	 DO KK=1,64
	  COLMAT(1,KK)=(PROPUP(2,1)*BFUN(2,1,KK)+PROPUP(1,3)*BFUN(1,3,KK)
     &       -PROPUP(3,1)*BFUN(3,1,KK)-PROPUP(4,3)*BFUN(4,3,KK))
     &       /DSQRT(DOTUP(8,6)*DOTUP(8,7)*DOTUP(8,4)*DOTUP(8,5))
	  COLMAT(2,KK)=(PROPUP(1,1)*BFUN(1,1,KK)+PROPUP(2,3)*BFUN(2,3,KK)
     &       +PROPUP(3,1)*BFUN(3,1,KK)+PROPUP(4,3)*BFUN(4,3,KK))
     &       /DSQRT(DOTUP(8,6)*DOTUP(8,7)*DOTUP(8,4)*DOTUP(8,5))
	  COLMAT(3,KK)=(PROPUP(4,1)*BFUN(4,1,KK)+PROPUP(4,3)
     &     *BFUN(4,3,KK))
     &	   /DSQRT(DOTUP(8,6)*DOTUP(8,7)*DOTUP(8,4)*DOTUP(8,5))
	 END DO
	END IF

	END

C********************************************************************

C...DOTPRODUCT OF TWO MOMENTA.
	DOUBLE PRECISION FUNCTION DOTUP(IP,JP)
	IMPLICIT DOUBLE PRECISION (A-H,O-Z)
	IMPLICIT INTEGER (I-N)

	DOUBLE COMPLEX COLMAT,BUNDAMP
	COMMON/UPCOM/ECM,PMBC,PMB,PMC,FBCC,PMOMUP(5,8),
     & 	COLMAT(10,64),BUNDAMP(4),PMOMZERO(5,8)
      
      DOTUP=PMOMUP(4,IP)*PMOMUP(4,JP)-PMOMUP(1,IP)*PMOMUP(1,JP)-
     &	PMOMUP(2,IP)*PMOMUP(2,JP)-PMOMUP(3,IP)*PMOMUP(3,JP)
	
      RETURN
      END

C******************************************************************

C...INNER PRODUCT INVOLVING Bc POLARIZATION VECTOR. IP STANDS ONE
C...OF THE THREE POLARIZATION VECTORS.
	DOUBLE COMPLEX FUNCTION POLSPPUP(IP)
	IMPLICIT DOUBLE PRECISION (A-H,O-Z)
	IMPLICIT INTEGER (I-N)
	DOUBLE COMPLEX COLMAT,BUNDAMP,PIV,PJV,EPHASE,PKV
	COMMON/UPCOM/ECM,PMBC,PMB,PMC,FBCC,PMOMUP(5,8),
     & 	COLMAT(10,64),BUNDAMP(4),PMOMZERO(5,8)
	COMMON/POL/POLAR(4,3)    
     
	PIA=POLAR(4,IP)+POLAR(3,IP)
	PIP=POLAR(4,IP)-POLAR(3,IP)
	PIV=DCMPLX(POLAR(1,IP),POLAR(2,IP))

	PJA=PMOMUP(4,8)+PMOMUP(3,8)
	PJP=PMOMUP(4,8)-PMOMUP(3,8)
	PJV=DCMPLX(PMOMUP(1,8),PMOMUP(2,8))

	PKA=PMOMZERO(4,3)+PMOMZERO(3,3)
	PKP=PMOMZERO(4,3)-PMOMZERO(3,3)
	PKV=DCMPLX(PMOMZERO(1,3),PMOMZERO(2,3))

      IF (PJA .GT. 1.0D-16 .AND. PJP .GT. 1.0D-16) THEN
	   EPHASE=DCONJG(PJV)/DSQRT(PJA*PJP)
	ELSE
	   EPHASE=DCMPLX(1.0D0)
	END IF

	POLSPPUP=PKA*PIP*DCONJG(PJV)-DCONJG(PKV)*PJA*PIP-PKA*PIV*PJP
     &	*EPHASE**2+PIV*DCONJG(PKV)*DCONJG(PJV)-PKV*DCONJG(PIV)*
     &    DCONJG(PJV)+PJA*DCONJG(PIV)*PKP+PIA*PKV*PJP*EPHASE**2-
     &    PIA*PKP*DCONJG(PJV)

      RETURN
	END

C*****************************************************************

C...INNER SCALAR PRODUCT OF TWO MOMENTA.
	DOUBLE COMPLEX FUNCTION INPUP(IP,JP)
	IMPLICIT DOUBLE PRECISION (A-H,O-Z)
	IMPLICIT INTEGER (I-N)

	DOUBLE COMPLEX COLMAT,PIV,PJV,BUNDAMP
	COMMON/UPCOM/ECM,PMBC,PMB,PMC,FBCC,PMOMUP(5,8),
     & 	COLMAT(10,64),BUNDAMP(4),PMOMZERO(5,8)
            
	PIA=PMOMZERO(4,IP)+PMOMZERO(3,IP)
	PIP=PMOMZERO(4,IP)-PMOMZERO(3,IP)
	PIV=DCMPLX(PMOMZERO(1,IP),PMOMZERO(2,IP))

	PJA=PMOMZERO(4,JP)+PMOMZERO(3,JP)
	PJP=PMOMZERO(4,JP)-PMOMZERO(3,JP)
	PJV=DCMPLX(PMOMZERO(1,JP),PMOMZERO(2,JP))

      IF (PIA .GT. 1.0D-16 .AND. PJA .GT. 1.0D-16) THEN
	   INPUP=PIV*DSQRT(PJA/PIA)-PJV*DSQRT(PIA/PJA)
	END IF
	IF (PIA .LT. 1.0D-16 .AND. PJA .GT. 1.0D-16) THEN
	   INPUP=DSQRT(PIP*PJA)
      END IF
      IF (PIA .GT. 1.0D-16 .AND. PJA .LT. 1.0D-16) THEN
	   INPUP=-DSQRT(PIA*PJP)
      END IF
	IF (PIA .LT. 1.0D-16 .AND. PJA .LT. 1.0D-16) THEN
	   INPUP=0.0D0
      END IF

      RETURN
      END

C******************************************************************

C...SPINOR PRODUCT <p1+|\slash(p3)|p2+>, ALL MOMENTA ARE LIGHT-LIKE.
	DOUBLE COMPLEX FUNCTION SPPUP(IP,KP,JP)
	IMPLICIT DOUBLE PRECISION (A-H,O-Z)
	IMPLICIT INTEGER(I-N)
	DOUBLE COMPLEX COLMAT,INPUP,BUNDAMP
	COMMON/UPCOM/ECM,PMBC,PMB,PMC,FBCC,PMOMUP(5,8),
     & 	COLMAT(10,64),BUNDAMP(4),PMOMZERO(5,8)
	      
      SPPUP=DCONJG(INPUP(KP,IP))*INPUP(KP,JP)
      
      RETURN
      END

C********************************************************************

C...FROM PROGRAM RAMBOS, WHICH IS A DEMOCRATIC MULTI-PARTICLE PHASE 
C...SPACE GENERATOR.  AUTHORS:  S.D. ELLIS,  R. KLEISS,  W.J. STIRLING
C...THIS IS VERSION 1.0 - WRITTEN BY R. KLEISS modified slightly by 
C...Ian Hinchliffe. HERE WE MAKE LITTLE CHANGES AND LET IT ONLY ADAPTABLE
C...TO THREE FINAL PARTICALS. THE INTERESTING READER CAN CHANGE BACK TO
C...IT'S ORIGINAL FORM EASILY.

      SUBROUTINE PHASE_GEN(Y,ET,WT)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
	IMPLICIT INTEGER (I-N)

	DOUBLE COMPLEX COLMAT,BUNDAMP
      COMMON/UPCOM/ECM,PMBC,PMB,PMC,FBCC,PMOMUP(5,8),
     & 	COLMAT(10,64),BUNDAMP(4),PMOMZERO(5,8)
	COMMON/RCONST/PI
      DIMENSION XM(3),P(4,3),Q(4,3),R(4),Z(5),
     &   B(3),P2(3),XM2(3),E(3),V(3),Y(5)
c      DATA ACC/1.0D-14/,ITMAX/6/,IN_IT/0/,PI2LOG/1.837877D0/
      
      ACC=1.0D-14
	ITMAX=6
	IN_IT=0
	PI2LOG=1.837877D0
      
	XM(1)=PMC
	XM(2)=PMB
	XM(3)=PMBC

	N=3

      IF(IN_IT.EQ.0) THEN
        IN_IT=1
        Z(1)=0.0D0
        DO K=2,5
          Z(K)=Z(K-1)+DLOG(DFLOAT(K))
        END DO
      END IF

C COUNT NONZERO MASSES
      XMT=0.0D0
      NM=0
      DO I=1,N
        IF(XM(I) .GT. 1.0D-6) NM=NM+1
        XMT=XMT+DBLE(ABS(XM(I)))
      END DO

C GENERATE N MASSLESS MOMENTA IN INFINITE PHASE SPACE
      EXTRA_WEIGHT=1.0D0
      DO I=1,N-1
        IF(I.EQ.1)THEN
          C=2.0D0*Y(I)-1.0D0
          S=DSQRT(1.0D0-C*C)
C...there is one redundant overall phi that can be chosing arbitrarily. 
C...By chosing the original F=0, we will always get
C...Q(1,1)=0, which corresponds to a specific receive direction of the
C...final particles. This breaks the isotropy of the space, to avoid this, 
C...we may choose F=2*PI*pyr(0) .
C          F=0.0D0
          F=2*PI*PYR(0)
		FAC=Y(I+1)
        ELSE
          C=2.0D0*Y(I+1)-1.0D0
          S=DSQRT(1.0D0-C*C)
          F=2.0D0*PI*Y(I+2)
          FAC=Y(I+3)
        END IF
        Q(4,I)=-DLOG(FAC)
        EXTRA_WEIGHT=EXTRA_WEIGHT*Q(4,I)
        Q(3,I)=Q(4,I)*C
        Q(2,I)=Q(4,I)*S*COS(F)
        Q(1,I)=Q(4,I)*S*SIN(F)
      END DO

C CALCULATE THE PARAMETERS OF THE SCALE TRANSFORMATION
      DO I=1,4
        R(I)=0.0D0
      END DO
      DO I=1,N-1
        DO K=1,4
          R(K)=R(K)+Q(K,I)
        END DO
      END DO

C CALCULATE THE N_TH VECTOR
      DO K=1,3
        Q(K,N)=-R(K)
      END DO
      Q(4,N)=DSQRT(Q(1,N)**2+Q(2,N)**2+Q(3,N)**2)
      R(4)=R(4)+Q(4,N)
      RMAS=R(4)
      IF(RMAS .LT. 1.0D-6)THEN
        WT=0.D0
        RETURN
      END IF
      X=ET/RMAS

C scale the q's to the p's
      DO I=1,N
        DO K=1,4
          P(K,I)=X*Q(K,I)
        END DO
      END DO

C RETURN FOR WEIGHTED MASSLESS MOMENTA
      WT=PI2LOG*(N-1)-DLOG(ET-P(4,N))*2.0D0*(1-N)-DLOG(ET)-
     &	DLOG(2.0D0)-DLOG(P(4,N))-Z(2*N-3)
      IF(NM.EQ.0) THEN
        WT=EXTRA_WEIGHT*DEXP(WT)
        RETURN
      END IF

C MASSIVE PARTICLES: RESCALE THE MOMENTA BY A FACTOR X
      XMAX=DSQRT(1.0D0-(XMT/ET)**2)
      DO I=1,N
        XM2(I)=XM(I)**2
        P2(I) =P(4,I)**2
      END DO
      ITER=0
      X=XMAX
      ACCU=ET*ACC
      DO WHILE (ITER.LE.ITMAX)
        F0=-ET
        G0=0.D0
        X2=X*X
        DO I=1,N
          E(I)=DSQRT(XM2(I)+X2*P2(I))
          F0=F0+E(I)
          IF(E(I) .GT. 0.0D0)THEN
            G0=G0+P2(I)/E(I)
          END IF
        END DO
        IF(DBLE(ABS(F0)).GT.ACCU.AND.ITER.LE.ITMAX) THEN
          ITER=ITER+1
          X=X-F0/(X*G0)
        ELSE IF(DBLE(ABS(F0)).LE.ACCU) THEN
          ITER=ITMAX+1
        END IF
      END DO

      DO I=1,N
        V(I)=X*P(4,I)
        DO K=1,3
          P(K,I)=X*P(K,I)
        END DO
        P(4,I)=E(I)
      END DO

C CALCULATE THE MASS-EFFECT WEIGHT FACTOR
      WT2=1.0D0
      WT3=0.0D0
      DO I=1,N
        IF(E(I) .GT. 0.0D0)THEN
          WT2=WT2*V(I)/E(I)
          WT3=WT3+V(I)**2/E(I)
        END IF
      END DO
      WTM=(2.0D0*N-3.0D0)*DLOG(X)+DLOG(WT2/WT3*ET)

C RETURN FOR WEIGHTED MASSIVE MOMENTA
      WT=WT+WTM
      WT=DEXP(WT)*EXTRA_WEIGHT
      IF(XMT .GT. ET)THEN
        WT=0.0D0
        RETURN
      END IF

C...B_C 
      PMOMUP(5,3)=XM(3)
      DO J=1,4
	   PMOMUP(J,3)=P(J,3)
      END DO

C...B QUARK
      PMOMUP(5,4)=XM(2)
      DO J=1,4
	   PMOMUP(J,4)=P(J,2)
      END DO
     
C...\BAR{C} QUARK     
      PMOMUP(5,5)=XM(1)
      DO J=1,4
	   PMOMUP(J,5)=P(J,1)
      END DO

      RETURN
      END

C********************************************************************

      SUBROUTINE RANDA(N,RANDX)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
	IMPLICIT INTEGER (I-N)
      DIMENSION RANDX(N)

      DO I=1,N
         RANDX(I)=PYR(0)
      END DO

      RETURN
      END

C***********************************************************************
C...CHANGES ARE MADE WHICH MAKE THE PROGRAM ONLY TO GET THE IMPORTANCE
C...FUNCTION. 
      SUBROUTINE VEGAS(FXN,NDIM,NCALL,ITMX,NPRN)
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C    ARGUMENTS:                                                        C
C       FXN    = FUNCTION TO BE INTEGRATED/MAPPED                      C
C       NDIM   = # DIMENSIONS                                          C
C       NCALL  = MAXIMUM TOTAL # OF CALLS TO THE FUNCTION              C
C       ITMX   = MAXIMUM # OF ITERATIONS ALLOWED                       C
C       NPRN   = PRINTOUT LEVEL:                                       C
C              >=2  ADDITIONALLY INF. ABOUT ACCUMULATED VALUES         C
C                     PER ITERATION.                                   C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      IMPLICIT INTEGER (I-N)

C...PYTHIA COMMON BLOCK.
      PARAMETER (MAXNUP=500)
      COMMON/HEPEUP/NUP,IDPRUP,XWGTUP,SCALUP,AQEDUP,AQCDUP,IDUP(MAXNUP),
     &ISTUP(MAXNUP),MOTHUP(2,MAXNUP),ICOLUP(2,MAXNUP),PUP(5,MAXNUP),
     &VTIMUP(MAXNUP),SPINUP(MAXNUP)
      SAVE /HEPEUP/

C...User process event common block.
      COMMON/GRADE/XI(50,10)

      COMMON/PTPASS/PTMIN,PTMAX,CROSSMAX,ETAMIN,ETAMAX,
     &SMIN,SMAX,YMIN,YMAX,PSETAMIN,PSETAMAX

      COMMON/VEGCROSS/VEGSEC,VEGERR,IVEGGRADE

      CHARACTER*8 BEGIN_TIME,END_TIME
      DIMENSION X(10),XIN(50),R(50),IA(10),D(50,10)
C      DATA ALPH/1.5D0/

      ALPH=1.50D0
C...NUMBER OF BINS.
      ND=50
C===============================================================
C A))   INITIALIZING SOME VARIABLES
C===============================================================
      SI    =0.0D0
      SI2   =0.0D0
      SWGT  =0.0D0
      SCHI  =0.0D0
      SCALLS=0.0D0
      CALLS =NCALL
      XND   =ND
      NDM   =ND-1
C...............................................................
C  DEFINING THE INITIAL INTERVALS DISTRIBUTION
C...............................................................
      IF(IVEGGRADE.EQ.0) THEN
	  RC=1.0D0/XND
        DO 7 J=1,NDIM
          XI(ND,J)=1.0D0
          DR=0.0D0
        DO 7 I=1,NDM
          DR=DR+RC
          XI(I,J)=DR
7       CONTINUE
      END IF

C===============================================================
C B))  ITERATING LOOP
C===============================================================
      DO 1000 IT=1,ITMX
        IF(IT.EQ.1) THEN
	  CALL TIME(BEGIN_TIME)
	  WRITE(*,'(A)') BEGIN_TIME
C	  WRITE(3,'(A)') BEGIN_TIME
	END IF
C...............................................................
C  INITIALIZING ITERATION VARIABLES
C...............................................................
        TI   =0.0D0
        SFUN2=0.0D0
        DO 10 J=1,NDIM
        DO 10 I=1,ND
         D(I,J)=0.0D0
10      CONTINUE
	DO 11 JJ=1,NCALL
          CALL GENERAND(NDIM,XND,X,IA,WGT)
	  CALL PHPOINT(X,WT)
	  IF(WT.LT.1.0D-15) THEN
	     TEMPFXN=0.0D0
	  ELSE
	     TEMPFXN=FXN(X,WT)*WGT
	  END IF
C...RECORD THE MAXIMUM DIFFERENTIAL CROSS-SECTION.
	  IF(TEMPFXN.GT.CROSSMAX) THEN
	    CROSSMAX=TEMPFXN
	  END IF
          FUN=TEMPFXN/CALLS
          FUN2=FUN*FUN
          WEIGHT=WGT/CALLS
          TI=TI+FUN
          SFUN2=SFUN2+FUN2
          DO J=1,NDIM
            IAJ=IA(J)
            D(IAJ,J)=D(IAJ,J)+FUN2
          END DO
11      CONTINUE
C...............................................................
C  COMPUTING THE INTEGRAL AND ERROR VALUES
C...............................................................
        TI2=TI*TI
        TSI=DSQRT((SFUN2*CALLS-TI2)/(CALLS-1.0D0))
        WGTA=TI2/TSI**2
        SI=SI+TI*WGTA
        SI2=SI2+TI2
        SWGT=SWGT+WGTA
        SCHI=SCHI+TI2*WGTA
        SCALLS=SCALLS+CALLS
        AVGI=SI/SWGT
        SD=SWGT*IT/SI2
        CHI2A=0.0D0
        IF(IT.GT.1)CHI2A=SD*(SCHI/SWGT-AVGI*AVGI)/(IT-1)
        SD=1.0D0/DSQRT(SD)
        ERR=SD*100.0D0/AVGI

C...RECORD THE CROSS-SECTION AND THE CORRESPONDING ERR OBTAINED.
C...MAY BE USED FOR PYTHIA RUNNING(INITIALIZATION).
	  VEGSEC=AVGI  !pb
	  VEGERR=ERR
C...............................................................
C  PRINTING
C...............................................................        
C...CROSS UNIT pb.
	  IF(NPRN.GE.2) THEN
	    PRINT 201,IT,AVGI,SD,ERR
C	    WRITE(3,201) IT,AVGI,SD,ERR
	    CALL TIME(END_TIME)
	    WRITE(*,'(A)') END_TIME
C	    WRITE(3,'(A)') END_TIME
	  END IF

778     FORMAT('INTEGRAL VALUE =',G10.4,'+/-',
     &   G10.4,3X,' CHI**2=',G10.4, /' ')
201     FORMAT('ITER.NO',I3,' ACC.RESULT(pb)==>',G14.5,'+/-',G10.4,
     .   '... % ERR=',G10.2)
C===============================================================
C  C))   REDEFINING THE GRID
C===============================================================
C...............................................................
C  SMOOTHING THE F**2 VALUED STORED FOR EACH INTERVAL
C...............................................................
        DO 23 J=1,NDIM
          XO=D(1,J)
          XN=D(2,J)
          D(1,J)=(XO+XN)/2.0D0
          X(J)=D(1,J)
          DO 22 I=2,NDM
            D(I,J)=XO+XN 
            XO=XN
            XN=D(I+1,J)
            D(I,J)=(D(I,J)+XN)/3.0D0
            X(J)=X(J)+D(I,J)
22        CONTINUE
            D(ND,J)=(XN+XO)/2.0D0
            X(J)=X(J)+D(ND,J)
23      CONTINUE
C...............................................................
C   COMPUTING THE 'IMPORTANCE FUNCTION' OF EACH INTERVAL
C...............................................................
        DO 28 J=1,NDIM
         RC=0.0D0
         DO I=1,ND
          R(I)=0.0D0
          IF(D(I,J).LE.0.) GO TO 224
          XO=X(J)/D(I,J)
          R(I)=((XO-1.0D0)/XO/DLOG(XO))**ALPH
224       RC=RC+R(I)
         END DO
C...............................................................
C  REDEFINING THE SIZE OF EACH INTERVAL
C...............................................................
        RC=RC/XND
        KK=0
        XN=0.0D0
        DR=0.0D0
        I=0
25      KK=KK+1
        DR=DR+R(KK)
        XO=XN
        XN=XI(KK,J)
26      IF(RC.GT.DR) GO TO 25
        I=I+1
        DR=DR-RC
        XIN(I)=XN-(XN-XO)*DR/R(KK)
        IF(I.LT.NDM) GO TO 26
        DO I=1,NDM
          XI(I,J)=XIN(I)
        END DO
        XI(ND,J)=1.0D0
28      CONTINUE
1000  CONTINUE
	
      RETURN
      END

C**************************************************************
      SUBROUTINE GENERAND(NDIM,XND,X,IA,WEIGHT)
	IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      
	COMMON/GRADE/XI(50,10)
	DIMENSION IA(10),X(10),RANDX(10)

C...TO GET THE SUBPROCESS CROSS-SECTION.
      COMMON/SUBOPEN/SUBFACTOR,SUBENERGY,ISUBONLY

      WEIGHT=1.0D0

      CALL RANDA(NDIM,RANDX)
C...............................................................
C  COMPUTING THE POINT POSITION
C...............................................................
	DO 15 J=1,NDIM
         XN=RANDX(J)*XND+1.0D0
         IA(J)=XN
         XIM1=0.0D0
         IF(IA(J).GT.1) XIM1=XI(IA(J)-1,J)
         XO=XI(IA(J),J)-XIM1
         X(J)=XIM1+(XN-IA(J))*XO
         WEIGHT=WEIGHT*XO*XND
15    CONTINUE      

      IF(ISUBONLY.EQ.1) THEN
         X(6)=SUBFACTOR
	   X(7)=SUBFACTOR
      END IF

      RETURN
	END

C...THIS PERFORMS A LORENTZ TRANSFORMATION
      SUBROUTINE LORENTZ(PB,PC,PL)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER(I-N)

      DIMENSION PB(4),PC(4),PL(4)

      Q    =SQRT(PB(4)**2-PB(1)**2-PB(2)**2-PB(3)**2)
	PL(4)=(PB(4)*PC(4)+PB(3)*PC(3)+PB(2)*PC(2)+PB(1)*PC(1))/Q
      F    =(PL(4)+PC(4))/(Q+PB(4))
      DO  J=1,3
        PL(J)=PC(J)+F*PB(J)
      END DO

      RETURN
      END
